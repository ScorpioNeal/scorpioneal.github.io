<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm Leetcode 455 Assign Cookies</title>
    <url>/posts/76b09fa2/</url>
    <content><![CDATA[<p>Greedy</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 437 Path Sum 3</title>
    <url>/posts/a898cbda/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 563 Binary Tree Tilt</title>
    <url>/posts/c40d9066/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 538 Convert BST to Greater Tree</title>
    <url>/posts/4738d6df/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 475 Heaters</title>
    <url>/posts/f1454c2d/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 429 N-ary Tree Level Order Traversal</title>
    <url>/posts/8dcf895b/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 257 Binary Tree Paths</title>
    <url>/posts/544be13c/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 235 Lowest Common Ancestor of a Binary Search Tree</title>
    <url>/posts/68a60d10/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 637 Average of levels in binary tree</title>
    <url>/posts/42adb360/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 669 Trim a Binary Search Tree</title>
    <url>/posts/76424700/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 707 Design LinkedList</title>
    <url>/posts/c510d6d2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 706 Design HashMap</title>
    <url>/posts/9c9897b1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 705 Design HashSet</title>
    <url>/posts/c0e9ac24/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 443 String Compression</title>
    <url>/posts/e660b369/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 232 Implement Queue using Stacks</title>
    <url>/posts/b4a58c2a/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 225 Implement Stack using Queues</title>
    <url>/posts/8dc2d219/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 107 Binary tree level order traversal 2</title>
    <url>/posts/c93fd58a/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm 二叉树前中后序遍历 递归与非递归的实现</title>
    <url>/posts/52f5d09b/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 897 Increasing order search tree</title>
    <url>/posts/21b94842/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 994 Rotting Oranges</title>
    <url>/posts/7727a6f3/</url>
    <content><![CDATA[<p>广度优先搜索</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 993 Cousins in binary tree</title>
    <url>/posts/89a53fa/</url>
    <content><![CDATA[<p>递归思路最清晰</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 1022 Sum of root to leaf binary numbers</title>
    <url>/posts/2b2429b0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 784 Letter Case Permutation</title>
    <url>/posts/e1ef6796/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 1184 Distance Between Bus Stops</title>
    <url>/posts/2d8ecbe2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 849 Maximize Distance to Closest Person</title>
    <url>/posts/49bede3d/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 532 K-diff Pairs in an Array</title>
    <url>/posts/eabd76d6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 849 Maximize distance to closest person</title>
    <url>/posts/ca31362/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 754 Reach a Number</title>
    <url>/posts/3cad5a96/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 746 Min Cost Climbing Stairs</title>
    <url>/posts/61d54b2b/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 496 Next Greater Element 1</title>
    <url>/posts/df3044a3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 1009 Complement of Base 10 Integer</title>
    <url>/posts/dc26ed78/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bitwiseComplement2</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    String str = Integer.toBinaryString(N);</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++) &#123;</span><br><span class="line">        sb.append(str.charAt(i) == <span class="string">'0'</span> ? <span class="string">'1'</span> : <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Integer.valueOf(sb.toString(), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意Integer.valueOf(str, 2); 的使用<br>注意Integer.toBinaryString()的使用</p>
<p>其他解法:  位运算，不熟悉</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 453 Minimum Moves to Equal Array Elements</title>
    <url>/posts/ea9f0311/</url>
    <content><![CDATA[<p>直观思路如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> max = nums[nums.length -<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> val = max - nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(val == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            nums[i] += val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val + get(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是会造成Time Limit Exceeded ， 通过不了。</p>
<p>巧妙思路</p>
<p><a href="https://www.cnblogs.com/grandyang/p/6053827.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/6053827.html</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 434 Number of segments in a string</title>
    <url>/posts/afc442a4/</url>
    <content><![CDATA[<p>思路很好。 当前为空且下一个index不为空</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 1128 Number of equivalent domino pairs</title>
    <url>/posts/17786f6d/</url>
    <content><![CDATA[<p>计算出来num[i] 有多少个数之后<br>通过Cn2 = (n * (n - 1))/2 来获得最终多少种排列</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 204 Count Primes</title>
    <url>/posts/c25081df/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 219 Contains Dulplicate 2</title>
    <url>/posts/6c30c346/</url>
    <content><![CDATA[<p>笨方法，遍历一遍<br>使用hashmap可以优化</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 1071 Greatest Common Divisor of Strings</title>
    <url>/posts/301dd35e/</url>
    <content><![CDATA[<p>辗转相除法</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Leetcode 1051 Height Checker</title>
    <url>/posts/6206342c/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 812 Largest Triangle Area</title>
    <url>/posts/9520d35b/</url>
    <content><![CDATA[<p>注意 三角形根据三顶点求面积的计算公式</p>
<p>S=1/2 * [(x1y2-x2y1)+(x2y3-x3y2)+(x3y1-x1y3)]</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 1010 Pairs of songs with total duration divisible by 60</title>
    <url>/posts/6fa4d6a/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 1002 Find Common Characters</title>
    <url>/posts/fb8c3633/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 594 Longest harmonious Subsequence</title>
    <url>/posts/b58ba739/</url>
    <content><![CDATA[<p>注意，对于这样的非正整数，不可以用数组来村数据</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 942 DI String Match</title>
    <url>/posts/a4f6abd9/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 989 Add To Array Form Of Integer</title>
    <url>/posts/346cd301/</url>
    <content><![CDATA[<p>考虑溢出问题，所以不可以直接转为int/long去计算</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 949 Largest Time for Given Digits</title>
    <url>/posts/31c696da/</url>
    <content><![CDATA[<p>思路很好。</p>
<ol>
<li>选择所有时间对应的数字</li>
<li>排序给定数字</li>
<li>找到对应数字</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 970 Powerful Integers</title>
    <url>/posts/3485dad9/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 922 Sort Array By Parity 2</title>
    <url>/posts/aeee22f2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 836 Rectangle Overlap</title>
    <url>/posts/7b4a97c1/</url>
    <content><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/80472764" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/80472764</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 1122 Relative Sort Array</title>
    <url>/posts/503af792/</url>
    <content><![CDATA[<p>遇到数字的问题, 考虑把数字作为bucket<br>与map效果一样，但是数组[数字]++ 这样也可以</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 844 Backspace String Compare</title>
    <url>/posts/9715d017/</url>
    <content><![CDATA[<ol>
<li>可以使用Stack</li>
<li>注意StringBuilder的deleteCharAt的用法</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 665 Non-decreasing Array</title>
    <url>/posts/da9f9e6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 925 Pressed Name</title>
    <url>/posts/fbb3e6/</url>
    <content><![CDATA[<p>坑很多，思路比较容易</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 404 Sum Of Left Leaves</title>
    <url>/posts/fa243c55/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 153 Min Stack</title>
    <url>/posts/a6096449/</url>
    <content><![CDATA[<p>注意是 x &lt;= min, 否则pop时候判断会有问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= min) &#123;</span><br><span class="line">        stack.push(min);</span><br><span class="line">        min = x;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 160 Intersection of Two LinkedList</title>
    <url>/posts/4d5b7367/</url>
    <content><![CDATA[<p>三种思路</p>
<ol>
<li>Stack</li>
<li>找到长短直接的差距n, 然后长链表先走n步后，与短链表一起走</li>
<li>巧妙的解法</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Algorithm LeetCode 66 Plus One</title>
    <url>/posts/5ac11b38/</url>
    <content><![CDATA[<p>坑:  int型溢出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">    <span class="keyword">int</span> dig = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ten = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = digits.length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            ten = ten * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dig += (digits[i] * ten );</span><br><span class="line">    &#125;</span><br><span class="line">    String s = (dig + <span class="number">1</span>) + <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        ret[i] = Integer.parseInt(s.charAt(i) + <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Algorithm LeetCode 914 X of a Kind in a Deck of Cards</title>
    <url>/posts/e7c78f66/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 374 Guess Number Higher or Lower</title>
    <url>/posts/b5448e67/</url>
    <content><![CDATA[<p>坑:</p>
<p>注意审题 My Number</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 242 valid-anagram</title>
    <url>/posts/b6f1cce9/</url>
    <content><![CDATA[<p>最开始想法, 使用 ^ 发现无法处理 case: “aa”, “bb”</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 108 Convert Sorted Array to Binary Search Tree</title>
    <url>/posts/72ef869e/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 107 Binary Tree Level Order Traversal 2</title>
    <url>/posts/100ad818/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 28 Implement strStr()</title>
    <url>/posts/2198e368/</url>
    <content><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><ul>
<li><a href="https://blog.csdn.net/f1033774377/article/details/82556438" target="_blank" rel="noopener">https://blog.csdn.net/f1033774377/article/details/82556438</a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 367 Valid Perfect Square</title>
    <url>/posts/b6a37ecd/</url>
    <content><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><ul>
<li><a href="https://www.cnblogs.com/grandyang/p/5619296.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/5619296.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm LeetCode 234 Palindrome Linked List</title>
    <url>/posts/6d34e4e/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm-LeetCode-119-Pascal&#39;s Triangle 2</title>
    <url>/posts/3885d3ad/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm-LeetCode-290-Word Pattern</title>
    <url>/posts/afd7ba5c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a <code>pattern</code> and a string <code>str</code>, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in <code>pattern</code> and a non-empty word in <code>str</code>.</p>
<p>Example 1:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: pattern = "abba", str = "dog cat cat dog"</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input:pattern = "abba", str = "dog cat cat fish"</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: pattern = "aaaa", str = "dog cat cat dog"</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p>Example 4:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: pattern = "abba", str = "dog dog dog dog"</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p>Notes:<br>You may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters that may be separated by a single space.</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>这题主要考察了 map.put(K, V)方法返回值的问题。</p>
<p>对于一个map来说，<br>第一次put成功, map.put(k1, v1), 返回值是上次k1位置对应的value, 这儿因为是首次，所以返回null<br>第二次put成功, map.put(k1, v2), 返回值是上次k1位置对应的value, 这儿就会返回v1</p>
<p>因此，设计一个map, key是patter中的char, 也是str中的strs[index]. 所以用Map<object>, value用index</object></p>
<p>e.g </p>
<p>这样对于pattern来说, e.g pattern 为 ‘aabb’</p>
<p>map.put(a, 0); 返回null<br>map.put(a, 1); 返回0<br>map.put(b, 2); 返回null<br>map.put(b, 3); 返回2</p>
<p>对于str来说, e.g str 为 “dog dog cat cat”<br>map.put(dog, 0); 返回null<br>map.put(dog, 1); 返回0<br>map.put(cat, 2); 返回null<br>map.put(cat, 3); 返回2</p>
<p>发现他们返回值对得上，就可以认为是pattern的</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>在写代码的时候发现如果开始把Map设计为Map&lt;Object, Integer&gt;的时候跑case会在这样的情况下失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String pattern = <span class="string">"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdd"</span>;</span><br><span class="line">String str = <span class="string">"s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s t t"</span>;</span><br></pre></td></tr></table></figure>

<p>也就是<br>pattern: map.put(d, 128) 返回Integer 128<br>str    : map.put(t, 128) 返回Integer 128<br>然后 Integer(128) != Integer(128)</p>
<p>整理下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">18</span>;</span><br><span class="line">Integer b = <span class="number">18</span>;</span><br><span class="line">a == b <span class="comment">// true</span></span><br><span class="line">Integer a1 = <span class="number">128</span>;</span><br><span class="line">Integer b1 = <span class="number">128</span>;</span><br><span class="line">a1 == b1 <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>原因是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Integer类内部 通过静态内部类提供了一个缓存池，范围在-128~127之间，如果超过这个范围 Integer 值都是new出来的对象 所以使用 == 比较会出错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原因Integer缓存了-128~127之间的数，这是在类加载期间就完成的。以后需要的时候直接指向它就可以了，省去了构造对象的开支，提高了效率。</span></span><br><span class="line"><span class="comment">//同理, Long也一样, 所以在Map中使用Integer或者Long作为Value的时候需要注意</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == pattern || str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] strs = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(strs.length != pattern.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = pattern.charAt(i);</span><br><span class="line">            String s = strs[i];</span><br><span class="line"></span><br><span class="line">            Object l = map.put(c, i);</span><br><span class="line">            Object r = map.put(s, i);</span><br><span class="line">            <span class="keyword">int</span> left = <span class="keyword">null</span> == l ? -<span class="number">1</span> : (<span class="keyword">int</span>)l;</span><br><span class="line">            <span class="keyword">int</span> right = <span class="keyword">null</span> == r ? -<span class="number">1</span> : (<span class="keyword">int</span>)r;</span><br><span class="line">            <span class="keyword">if</span>(left != right) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 深入理解Scroller原理</title>
    <url>/posts/31ea19a6/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/5629bee7718d" target="_blank" rel="noopener">https://www.jianshu.com/p/5629bee7718d</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-JVM相关</title>
    <url>/posts/421312a6/</url>
    <content><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_00_why_learn_jvm.html" target="_blank" rel="noopener">https://www.cnblogs.com/chanshuyi/p/jvm_serial_00_why_learn_jvm.html</a> </li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Data Binding相关</title>
    <url>/posts/d27340ce/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/b9af64c9fa04" target="_blank" rel="noopener">https://www.jianshu.com/p/b9af64c9fa04</a><br><a href="https://www.jianshu.com/p/e4c4a9aece40" target="_blank" rel="noopener">https://www.jianshu.com/p/e4c4a9aece40</a><br><a href="https://juejin.im/post/5b02cf8c6fb9a07aa632146d" target="_blank" rel="noopener">https://juejin.im/post/5b02cf8c6fb9a07aa632146d</a><br><a href="https://www.jianshu.com/p/2c4ac24761f5" target="_blank" rel="noopener">https://www.jianshu.com/p/2c4ac24761f5</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Data Binding Library-Work with observable data objects</title>
    <url>/posts/7ff436d6/</url>
    <content><![CDATA[<h1 id="Work-with-observable-data-objects"><a href="#Work-with-observable-data-objects" class="headerlink" title="Work with observable data objects"></a>Work with observable data objects</h1><p><a href="https://developer.android.com/topic/libraries/data-binding/observability#observable_objects" target="_blank" rel="noopener">Reference</a></p>
<p>Observability refers to the capability of an object to notify others about changes in its data. The Data Binding Library allows you to make objects, fields, or collections observable.</p>
<p>Any plain-old object can be used for data binding, but modifying the object doesn’t automatically cause the UI to update. Data binding can be used to give your data objects the ability to notify other objects, known as listener, when its data changes. There are three different types of observable classes: <a href="https://developer.android.com/topic/libraries/data-binding/observability#observable_objects" target="_blank" rel="noopener">objects</a>, <a href="https://developer.android.com/topic/libraries/data-binding/observability#observable_fields" target="_blank" rel="noopener">fields</a>, and <a href="https://developer.android.com/topic/libraries/data-binding/observability#observable_collections" target="_blank" rel="noopener">collections</a>.</p>
<p>When one of these observable data objects is bound to the UI and a property of the data object changes, the UI is updated automatically.</p>
<h2 id="Observable-fields"><a href="#Observable-fields" class="headerlink" title="Observable fields"></a>Observable fields</h2><p>Some work is involved in creating classes that implement the <a href="https://developer.android.com/reference/androidx/databinding/Observable.html" target="_blank" rel="noopener">Observable</a> interface, which could not be worth the effort if your classes only have a few properties. In this case, you can use the generic <a href="https://developer.android.com/reference/androidx/databinding/Observable.html" target="_blank" rel="noopener">Observable</a> class and the following primitive-specific classes to make fields observable:</p>
<ul>
<li>ObservableBoolean</li>
<li>ObservableByte</li>
<li>ObservableChar</li>
<li>ObservableShort</li>
<li>ObservableInt</li>
<li>ObservableLong</li>
<li>ObservableFloat</li>
<li>ObservableDouble</li>
<li>ObservableParcelable</li>
</ul>
<p>Observable fields are self-contained observable objects that have a single field. The primaitive versions avoid boxing and unboxing during access operations. To use this mechanism, create a <code>public final</code> property in the Java programming language or a read-only property in Kotlin, as shown in the following example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br></pre></td></tr></table></figure>

<p>To access the field value, use the <code>set()</code> and <code>get()</code> accessor methods, as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user.firstName.set(<span class="string">"Google"</span>);</span><br><span class="line"><span class="keyword">int</span> age = user.age.get();</span><br></pre></td></tr></table></figure>

<p>// TODO</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Data Binding Library-Layouts and binding expressions</title>
    <url>/posts/605894bb/</url>
    <content><![CDATA[<h1 id="Layouts-and-binding-expressions"><a href="#Layouts-and-binding-expressions" class="headerlink" title="Layouts and binding expressions"></a>Layouts and binding expressions</h1><p><a href="https://developer.android.com/topic/libraries/data-binding/expressions" target="_blank" rel="noopener">Reference</a></p>
<p>The expression language allows you to write expressions that handle events dispatched by the views. The Data Binding Library automatically generates the classes required to bind the views in the layout with your data objects.</p>
<p>Data binding layout files are slightly different and start with a root tag of <code>layout</code> followed by a <code>data</code> element and a <code>view</code> root element. This view element is what your root would be in a non-binding layout file. The following code shows a sample layout file:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"@&#123;user.lastName&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The <code>user</code> variable within <code>data</code> describes a property that may be used within this layout.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>Expressions within the layout are written in the attribute properties using the <code>&quot;@{}&quot;</code> syntax. Here, the TextView text is set to the <code>firstName</code> property of the <code>user</code> variable:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Data-object"><a href="#Data-object" class="headerlink" title="Data object"></a>Data object</h2><p>Let’s assume for now that you have a plain-old object to describe the <code>User</code> entity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This type of object has data that never changes. It is common in applications to have data that is read once and never changes thereafter. It is also possible to use an object that follows a set of conventions, such as the usage of accessor methods in Java, as shown in the following example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>From the perspective of data binding, these two classes are equivalent. The expression <code>@{user.firstName}</code> used for the <code>android:text</code> attribute accesses the <code>firstName</code> field in the former class and the <code>getFirstName()</code> method in the latter class. Alternatively, it is also resolved to <code>firstName()</code> if that method exists.</p>
<h2 id="Binding-data"><a href="#Binding-data" class="headerlink" title="Binding data"></a>Binding data</h2><p>A binding class is generated for each layout file. By default, the name of the classes is based on the name of the layout file, converting it to Pascal case and adding the Binding suffix to it. The above layout file is <code>activity_main.xml</code> so the corresponding generated class is <code>ActivityMainBinding</code>. This class holds all the bindings from the layout properties(for example, the <code>user</code> variable) to the layout’s views and knows how to assign values for the binding expressions. The recommended method to create the bindings is to do it while inflating the layout, as shown in the following example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   ActivityMainBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">   User user = <span class="keyword">new</span> User(<span class="string">"Test"</span>, <span class="string">"User"</span>);</span><br><span class="line">   binding.setUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>At runtime, the app displays the <code>Test</code> user in the UI. Alternatively, you can get the view using a <code>LayoutInflater</code>, as shown in the following example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ActivityMainBinding binding = ActivityMainBinding.inflate(getLayoutInflater());</span><br></pre></td></tr></table></figure>

<p>If you are using data binding items inside a <code>Fragment</code>, <code>ListView</code> or <code>RecyclerView</code> adapter, you may prefer to use the <code>inflate()</code> methods of the bindings classes or the <code>DataBindingUtil</code> class, as shown in the follow code example: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Expression-language"><a href="#Expression-language" class="headerlink" title="Expression language"></a>Expression language</h2><p>TODO 暂时不需要看</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Data Binding Library-Get started</title>
    <url>/posts/14f1fbc2/</url>
    <content><![CDATA[<h1 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h1><p><a href="https://developer.android.com/topic/libraries/data-binding/start" target="_blank" rel="noopener">Reference</a></p>
<p>Learn how to get your development environment ready to work with the Data Binding Library, including support for data binding code in Android Studio.</p>
<p>The Data Binding Library offers both flexibility and broad compatibility-it’s a support library, so you can use it with devices running Android 4.0(API level 14) or higher.</p>
<p>It’s recommended to use the latest Android Plugin for Gradle in your project. However, data binding is supported on version 1.5.0 and higher. For more information, see how to <a href="https://developer.android.com/studio/releases/gradle-plugin.html#updating-plugin" target="_blank" rel="noopener">update the Android Plugin for Gradle</a>.</p>
<h2 id="Build-environment"><a href="#Build-environment" class="headerlink" title="Build environment"></a>Build environment</h2><p>To get started with data binding, download the library from the <code>Support Repository</code> in the Android SDK manager. For more information, see <a href="https://developer.android.com/studio/intro/update.html" target="_blank" rel="noopener">Update the IDE and SDK Tools</a>.</p>
<p>To configure your app to use the data binding, add the <code>dataBinding</code> element to your <code>build.gradle</code> file in the app module, as shown in the following example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    android &#123;</span><br><span class="line">    ...</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Android-Studio-support-for-data-binding"><a href="#Android-Studio-support-for-data-binding" class="headerlink" title="Android Studio support for data binding"></a>Android Studio support for data binding</h2><p>Android Studio supports many of the editing features for data binding code. For example, it supports the following features for data binding expressions:</p>
<ul>
<li>Syntax highlighting</li>
<li>Flagging of expression language syntax errors</li>
<li>XML code completion</li>
<li>References, including <a href="https://www.jetbrains.com/help/idea/2017.1/navigation-in-source-code.html" target="_blank" rel="noopener">navigation</a>(such as navigate to a declaration) and <a href="https://www.jetbrains.com/help/idea/2017.1/viewing-inline-documentation.html" target="_blank" rel="noopener">quick documentation</a></li>
</ul>
<p>The <code>Preview</code> pane in <code>Layout Editor</code> displays the default value of data binidng expressions, if provided. For example, the <code>Preview</code> pane displays the <code>my_default</code> value on the <code>TextView</code> widget declared in the following example:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName, default=my_default&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you need to display a default value only during the design phase of your project, you can use <code>tools</code> attributes instead of default expression values, as described in <a href="https://developer.android.com/studio/write/tool-attributes.html" target="_blank" rel="noopener">Tools Attributes Reference</a>.</p>
<h2 id="Additional-resources"><a href="#Additional-resources" class="headerlink" title="Additional resources"></a>Additional resources</h2><p>To learn more about data binding, consult the following additional resources.</p>
<ul>
<li>Sample<ul>
<li><a href="https://github.com/googlesamples/android-databinding" target="_blank" rel="noopener">Android Data Binding Library samples</a></li>
</ul>
</li>
<li>Codelabs<ul>
<li><a href="https://codelabs.developers.google.com/codelabs/android-databinding" target="_blank" rel="noopener">Android Data Binding codelab</a></li>
</ul>
</li>
<li>Blog posts<ul>
<li><a href="https://medium.com/androiddevelopers/data-binding-lessons-learnt-4fd16576b719" target="_blank" rel="noopener">Data Binding - Lessons Learnt</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Data Binding Library-Overview</title>
    <url>/posts/1d9e584e/</url>
    <content><![CDATA[<h1 id="Data-Binding-Library"><a href="#Data-Binding-Library" class="headerlink" title="Data Binding Library"></a>Data Binding Library</h1><p><a href="https://developer.android.com/topic/libraries/data-binding" target="_blank" rel="noopener">Reference</a></p>
<p>The Data Binding Library is a support library that allows you to bind UI components in your layouts to data sources in your app using a declarative format rather than programmatically.</p>
<p>Layouts are often defined in activities with code that calls UI framework methods. For example, the code below calls <code>findViewById()</code> to find a <code>TextView</code> widget and bind it to the <code>username</code> property of the <code>viewModel</code> variable:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TextView textView = findViewById(R.id.sample_text);</span><br><span class="line">textView.setText(viewModel.getUserName());</span><br></pre></td></tr></table></figure>

<p>The following examples shows how to use the Data Binding Library to assign text to the widget directly in the layout file. This removes the need to call any of the Java code shown above. Note the use of <code>@{}</code> syntax in the assignment expression:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">android:text=<span class="string">"@&#123;viewmodel.userName&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>Binding components in the layout file lets you remove many UI framework calls in your activities, making them simpler and easier to maintain. This can also improve your app’s performance and help prevent memory leaks and null pointer exceptions.</p>
<h2 id="Using-the-Data-Binding-Library"><a href="#Using-the-Data-Binding-Library" class="headerlink" title="Using the Data Binding Library"></a>Using the Data Binding Library</h2><p>Use the following pages to learn how to use the Data Binding Library in your Android apps.</p>
<p><a href="https://developer.android.com/topic/libraries/data-binding/start.html" target="_blank" rel="noopener">Get started</a></p>
<pre><code>Learn how to get your development environment ready to work with the Data Binding Library, including support for data binding code in Android Studio.</code></pre><p><a href="https://developer.android.com/topic/libraries/data-binding/expressions.html" target="_blank" rel="noopener">Layouts and binding expressions</a></p>
<pre><code>The expression language allows you to write expressions that connecct variable to the views in the layout. The Data Binding Library automatically generates the classes required to bind the views in the layout with your data objects. The library provides features such as imports, variable, and includes that you can use in your layout.

These features of the library coexist seamlessly with your existing layouts. For example, the binding variables that can be used in expressions are defined inside a `data` element that is a sibling of the UI layout&apos;s root element. Both elements are wrapped in a `layout` tag, as shown in the following example:

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"viewmodel"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"com.myapp.data.ViewModel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ConstraintLayout...</span> /&gt;</span> <span class="comment">&lt;!-- UI layout's root element --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p><a href="https://developer.android.com/topic/libraries/data-binding/observability.html" target="_blank" rel="noopener">Work with observable data objects</a></p>
<pre><code>The Data Binding Library provides classes and methods to easily observe data for changes. You don&apos;t have to worry about refreshing the UI when the underlying data source changes. You can make your variables or their properties observable. The library allows you to make objects, fields, or collections observable.</code></pre><p><a href="https://developer.android.com/topic/libraries/data-binding/generated-binding.html" target="_blank" rel="noopener">Generated binding classes</a></p>
<pre><code>The Data Binding Library generates binding classes that are used to access the layout&apos;s variable and views. This page shows you how to use and customize generated binding classes.</code></pre><p><a href="https://developer.android.com/topic/libraries/data-binding/binding-adapters.html" target="_blank" rel="noopener">Binding adapters</a></p>
<pre><code>For every layout expression, there is a binding adapter that makes the framework calls required to set the corresponding properties or listeners. For example, the binding adapter can take care of calling the `setText()` method to set the text property or call the `setOnClickListener()` method to add a listener to the click event. The most common binding adapters, such as the adapters for the `android:text` property used in the examples in this page, are available for you to use in the `android.databinding.adapters` pakage. For a list of the common binding adapters, see [adapters](https://android.googlesource.com/platform/frameworks/data-binding/+/refs/heads/studio-master-dev/extensions/baseAdapters/src/main/java/androidx/databinding/adapters). You can also create custom adapters, as shown in the following example:

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"app:goneUnless"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goneUnless</span><span class="params">(View view, Boolean visible)</span> </span>&#123;</span><br><span class="line">    view.visibility = visible ? View.VISIBLE : View.GONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><a href="https://developer.android.com/topic/libraries/data-binding/architecture.html" target="_blank" rel="noopener">Bind layout views to Architecture components</a></p>
<pre><code>The Android Support Library includes the [Architecture Components](), which you can use to design rbust, testable, and maintainable apps. You can use the Architecture Components with the Data Binding Library to further simplify the development of your UI.</code></pre><p><a href="https://developer.android.com/topic/libraries/data-binding/two-way" target="_blank" rel="noopener">Two-way data binding</a></p>
<pre><code>The Data Binding Library supports two-way data binding. The notation used for this type of binding supports the ability to receive data changes to a property and listen to user updates to that property at the same time.</code></pre><h2 id="Additional-resources"><a href="#Additional-resources" class="headerlink" title="Additional resources"></a>Additional resources</h2><p>To learn more about data binding, consult the following additional resources.</p>
<ul>
<li><p>Samples</p>
<p>  <a href="https://github.com/googlesamples/android-databinding" target="_blank" rel="noopener">Android Data Binding Library saples</a></p>
</li>
<li><p>Codelabs</p>
<p>  <a href="https://codelabs.developers.google.com/codelabs/android-databinding" target="_blank" rel="noopener">Android Data Binding codelab</a></p>
</li>
<li><p>Blog posts</p>
<p>  <a href="https://medium.com/androiddevelopers/android-data-binding-library-from-observable-fields-to-livedata-in-two-steps-690a384218f2" target="_blank" rel="noopener">Android Data Binding Library — From Observable Fields to LiveData in two steps</a><br>  <a href="https://medium.com/androiddevelopers/data-binding-lessons-learnt-4fd16576b719" target="_blank" rel="noopener">Data Binding - Lessons learnt</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Manage your app&#39;s memory</title>
    <url>/posts/5cbb013a/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/topic/performance/memory" target="_blank" rel="noopener">Reference</a></p>
<p>Random-access memory (RAM) is a valuable resource in any software development environment, but it’s even more valuable on a mobile operating system where physical memory is often constrained. Although both the Android Runtime (ART) and Dalvik virtual machine perform routine garbage collection, this doesn’t  mean you can ignore when and where your app allocates and release memory. You still need to avoid introducing memory leaks, usually caused by holding onto object references in static member variables, and release any <a href="https://developer.android.com/reference/java/lang/ref/Reference.html" target="_blank" rel="noopener">Reference</a> objects at the appropriate time as defined by lifecycle callbacks.</p>
<p>This page explains how you can proactively reduce memory usage within your app. For information about how the Android operating system manages memory, see the <a href="https://developer.android.com/topic/performance/memory-overview.html" target="_blank" rel="noopener">Overview of Android Memeory Management</a>.</p>
<h2 id="Monitor-available-memory-and-memory-usage"><a href="#Monitor-available-memory-and-memory-usage" class="headerlink" title="Monitor available memory and memory usage"></a>Monitor available memory and memory usage</h2><p>Before you can fix the memory usage problems in your app, you first need to find them. The <a href="https://developer.android.com/studio/profile/memory-profiler.html" target="_blank" rel="noopener">Memory Profiler</a> in Android Studio helps you find and diagnose memory issues in the following ways.</p>
<ol>
<li>See how your app allocates memory over time. The Memory Profiler shows a realtime graph of how much memory your app is using, the number of allocated Java objects, and when garbage collection occurs.</li>
<li>Initiate garbage $</li>
</ol>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Build a Responsive UI with ConstraintLayout</title>
    <url>/posts/5fec0e43/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/training/constraint-layout" target="_blank" rel="noopener">Reference</a></p>
<p><a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout.html" target="_blank" rel="noopener">ConstriaintLayout</a> allows you to create large and complex  layouts with a flat view hierarchy(no nested view groups). It’s similar to <code>RelativeLayout</code> in that all views are laid out according to relationships between sibling views and the parent layout, but it’s more flexible than <code>RelativeLayout</code> and easier to use with Android Studio’s Layout Editor.</p>
<p>All the power of <code>ConstraintLayout</code> is available directly from the Layout Editor’s visual tools, because the layout API and the Layout Editor were specially built for each other. So you can build your layout with <code>ConstraintLayout</code> entirely by drag-and-dropping instead of editing the XML.</p>
<p>This page provides a guide to build a layout with <code>ConstraintLayout</code> in Android Studio 3.0 or higher. If you’d like more information about the Layout Editor itself, see the Android Studio guide to <a href="https://developer.android.com/studio/write/layout-editor.html" target="_blank" rel="noopener">Build a UI with Layout Editor</a>.</p>
<p>To see a variety of layouts you can create with <code>ConstraintLayout</code>, check out the <a href="https://github.com/android/views-widgets-samples/tree/master/ConstraintLayoutExamples" target="_blank" rel="noopener">Constraint Layout Examples project on Github</a>.</p>
<h2 id="Constraints-overview"><a href="#Constraints-overview" class="headerlink" title="Constraints overview"></a>Constraints overview</h2><p>To define a view’s position in <code>ConstraintLayout</code>, you must add at least one horizontal and one vertical constraint for the view. Each constraint represents a connection or alignment to another view, the parent layout, or an invisible guideline. Each constraint defines the view’s position along either the vertical or horizontal axis; so each view must have a minimum of one constraint for each axis, but often more are necessary.</p>
<p>When you drop a view into the Layout Editor, it stays where you leave it even if it has no constraints. However, this is only to make editing easier; if a view has no constraints when you run your layout on a device, it is drawn at position [0, 0] (the top-left corner).</p>
<p>In figure 1, the layout looks good in the editor, but there’s no vertical constraint on view C. When this layout draws on a device, view C horizontally aligns with the left and right edges of view A, but appears at the top of the screen because it has no vertical constraint.</p>
<p>Figure 1. The editor shows view C below A, but it has no vertical constraint<br><img src="https://developer.android.com/training/constraint-layout/images/constraint-fail_2x.png" alt></p>
<p>Although a missing constraint won’t cause a compilation error, the Layout Editor indicates missing constraints as an error in the toolbar. To view the errors and other warnings, click <code>Show Warnings and Errors</code>. The help you avoid missing constraints, the Layout Editro can automatially add constraints for you with the <a href="https://developer.android.com/training/constraint-layout#use-autoconnect-and-infer-constraints" target="_blank" rel="noopener">Autoconnect and infer constraints</a> feature.</p>
<h2 id="Add-ConstraintLayout-to-your-project"><a href="#Add-ConstraintLayout-to-your-project" class="headerlink" title="Add ConstraintLayout to your project"></a>Add ConstraintLayout to your project</h2><p>To use <code>ConstraintLayout</code> in your project, procceed as follows:</p>
<ol>
<li>Ensure you have the <code>maven.google.com</code> repository declared in your module-level <code>build.gradle</code> file:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repository &#123;</span><br><span class="line">    google()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Add the library as a dependency in the same <code>build.gradle</code> file, as shown in the following example. Note that the latest version might be different than what is shown in the example:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    dependencies &#123;</span><br><span class="line">    implementation 'com.android.support.constraint:constraint-layout:1.1.2'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>In the toolbar or sync notification, click <code>Sync Project with Gradle Files</code>.</li>
</ol>
<p>Now you’re ready to build your layout with <code>ConstraintLayout</code>.</p>
<h3 id="Convert-a-layout"><a href="#Convert-a-layout" class="headerlink" title="Convert a layout"></a>Convert a layout</h3><p>To convert an existing layout to a constraint layout, follow these steps:</p>
<ol>
<li>Open your layout in Android Studio and click the <code>Design</code> tab at the bottom of the editor window.</li>
<li>In the <code>Component Tree</code> window, right-click the layout and click <code>Convert layout to ConstraintLayout</code>.</li>
</ol>
<h3 id="Create-a-new-layout"><a href="#Create-a-new-layout" class="headerlink" title="Create a new layout"></a>Create a new layout</h3><p>To start a new constraint layout file, follow these steps:</p>
<ol>
<li>In the <code>Project</code> window, click the module folder and then select <code>File &gt; New &gt; XML &gt; Layout XML</code>.</li>
<li>Enter a name for the layout file and enter “android.support.constraint.ConstraintLayout” for the <code>Root Tag</code>.</li>
<li>Click <code>Finish</code>.</li>
</ol>
<h2 id="Add-or-remove-a-constraint"><a href="#Add-or-remove-a-constraint" class="headerlink" title="Add or remove a constraint"></a>Add or remove a constraint</h2><p>To add a constraint, do the following:</p>
<ol>
<li>Drag a view from the <code>Palette</code> window into the editor.</li>
</ol>
<p>When you add a view in a <code>ConstraintLayout</code>, it displays a bounding box with square resizing handles on each corner and circular constraint handles on each side.</p>
<ol start="2">
<li><p>Click the view to select it.</p>
</li>
<li><p>Do one of the following</p>
<ul>
<li><p>Click a constraint handle and drag it to an available anchor point. This point can be the edge of another view, the edge of the layout, or a guideline. NOtice that as you drag the constraint handle, the Layout Editor shows potential connection anchors and blue overlays.</p>
</li>
<li><p>Click one of the <code>Create a connection</code> buttons in the <code>Layout</code> section of the <code>Attributes</code> window, as shown in figure 4.</p>
<p><img src="https://developer.android.com/images/training/constraint-layout/constraint-layout-create-constraint-2x.png" alt="Figure 4"></p>
</li>
</ul>
</li>
</ol>
<p>When the constraint is created, the editor gives it a <a href="https://developer.android.com/training/constraint-layout#adjust-the-view-margins" target="_blank" rel="noopener">default margin</a> to separate the two views.</p>
<p>When creating constraints, remember the following rules:</p>
<ul>
<li>Every view must have at least two constraints: one horizontal and one vertical</li>
<li>You can create constraints only between a constraint handle and an anchor point that share the same plane. So a vertical plane(the left and right sides) of a view can be constrainted only to another vertical plane; and baselines can constraint only to other baselines.(不太理解啥意思)</li>
<li>Each constraint handle can be used for just one constraint, but you can create multiple constraints(from different views) to the same anchor point.</li>
</ul>
<p>You can delete a constraint by doing any of the following:</p>
<ul>
<li>Click on a constraint to select it, and then press <code>Delete</code></li>
<li>Press and hold <code>Control</code>(<code>Command</code> on macOS), and then click on a constraint anchor. Noteh that the constraint turns red to indicate that you can click to delte it , as shown in figure 5.</li>
</ul>
<p><img src="https://developer.android.com/images/training/constraint-layout/constraint-layout-delete-1-2x.png" alt="Figure 5"></p>
<ul>
<li>In the <code>Layout</code> section of the <code>Attributes</code> window, click on a constraint anchor, as shown in figure 6.</li>
</ul>
<p>If you add opposing constraints on a view, the constraint lines become squiggly like a spring to indicate the opposing force, as shown in video 2. The effect is most visible when the view size is set to “fixed” or “wrap content”, in which case the view is centered between the constraints. If you instead want the view to stretch its size to meet the constraints, <a href="https://developer.android.com/training/constraint-layout#adjust-the-view-size" target="_blank" rel="noopener">switching the size to “match constraints”</a>; or if you want to keep the current size but move the view so that it is not centered, <a href="https://developer.android.com/training/constraint-layout#adjust-the-constraint-bias" target="_blank" rel="noopener">adjust the constraints bias</a>.</p>
<p>You can use constraints to achieve different types of layout behavior, as described in the following sections.</p>
<h3 id="Parent-position"><a href="#Parent-position" class="headerlink" title="Parent position"></a>Parent position</h3><p>Constrain the side of a view to the corresponding edge of the layout.</p>
<p>In figure 7, the left side of the view is connected to the left edge of the parent layout. You can define the distance from the edge with margin.</p>
<p><img src="https://developer.android.com/training/constraint-layout/images/parent-constraint_2x.png" alt="Figure 7"></p>
<h3 id="Order-position"><a href="#Order-position" class="headerlink" title="Order position"></a>Order position</h3><p>Define the order of appearance for two views, either vertically or horizontally.</p>
<p>In figure 8, B is constrained to alwasys be to the right of A, and C is constrained below A. However, these constraints do not imply alignment, so B can still move up and down.</p>
<p><img src="https://developer.android.com/training/constraint-layout/images/position-constraint_2x.png" alt="Figure 8"></p>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>Align the edge of a view to the same edge of another view.</p>
<p>In figure 9, the left side of B is aligned to the left side of A. If you want to align the view centers, create a constraint on both sides.</p>
<p><img src="https://developer.android.com/training/constraint-layout/images/alignment-constraint_2x.png" alt="figure 9"></p>
<p>You can offset the alignment by dragging the view inward from the constraint. For example, figure 10 shows B with a 24dp offset alignment. The offset is defined by the constrained view’s margin.</p>
<p><img src="https://developer.android.com/training/constraint-layout/images/alignment-constraint-offset_2x.png" alt="figure 10"></p>
<p>You can also select all the views you want to align, and then click <code>Align</code> in the toolbar to select the alignment type.</p>
<h3 id="Baseline-alignment"><a href="#Baseline-alignment" class="headerlink" title="Baseline alignment"></a>Baseline alignment</h3><p>Align the text baseline of a view to the text baseline of another view.</p>
<p>In figure 11, the first line of B is aligned with the text in A.</p>
<p>To create a baseline constraint, right-click the text view you want to constrain and then click <code>Show Baseline</code>. Then click on the text baseline and drag the line to another line.</p>
<p><img src="https://developer.android.com/training/constraint-layout/images/baseline-constraint_2x.png" alt="Figure 11"></p>
<h3 id="Constrain-to-a-guideline"><a href="#Constrain-to-a-guideline" class="headerlink" title="Constrain to a guideline"></a>Constrain to a guideline</h3><p>You can add a vertical or horizontal guideline to which you can constrain views, and the guideline will be invisible to app users. You can position the guideline with the layout based on either up units or percent, relative to the layout’s edge.</p>
<p>To create a guideline, click <code>Guidelines</code> in the toolbar, and then click either <code>Add Vertical Guideline</code> or <code>Add Horizontal Guideline</code>.</p>
<p>Drag the dotted line to reposition it and click the circle at the edge of the guideline to toggle the measurement mode.</p>
<p><img src="https://developer.android.com/training/constraint-layout/images/guideline-constraint_2x.png" alt="Figure 12"></p>
<h3 id="Constrain-to-a-barrier"><a href="#Constrain-to-a-barrier" class="headerlink" title="Constrain to a barrier"></a>Constrain to a barrier</h3><p>Similar to a guideline, a barrier is an invisible line that you can constrain views to. Except a barrier does not define its own position; instead, the barrier position moves based on the position of views constrained within it.This is useful when you want to constrain a view to the a set of views rather than to one specific view.</p>
<p>For example, figure 13 shows view C is constrained to the right side of a barrier. The barrier is set to the “end”(or the right side in a left-to-right layout) of both view A and view B. So the barrier moves depending on whether the right side of view A or View B is is farthest right.</p>
<p>To create a barrier, follow these steps:</p>
<ol>
<li>Click <code>Guidelines</code> in the toolbar, and then click <code>Add Vertical Barrier</code> or <code>Add Horizontal Barrier</code></li>
<li>In the <code>Component Tree</code> window, select the views you want inside the barrier and drag them into the barrier compoent</li>
<li>Select the barrier from the <code>Component Tree</code>, open the <code>Attributes</code> window, and then set the <code>barrierDirection</code></li>
</ol>
<p>Now you can create a constraint from another view to the barrier.</p>
<p>You can also constrain views that are inside the barrier to the barrier. This way, you can ensure that all views in the barrier always align to each other, even if you don’t know which view will be the longest or tallest.</p>
<p>You can also include a guideline inside a barrier to ensure a “minimum” position for the barrier.</p>
<h2 id="Adjust-the-constraint-bias"><a href="#Adjust-the-constraint-bias" class="headerlink" title="Adjust the constraint bias"></a>Adjust the constraint bias</h2><p>When you add a constraint to both side of a view( and the view size for the same dimension is either “fixed” or “wrap content”), the view becomes centered between the two constraints with a bias of 50% by default. You can adjust the bias by dragging the bias slider in the <code>Attributes</code> window or by dragging the view, as shown in video 3.</p>
<p>If you instead want the view to stretch its size to meet the constraints, <a href="https://developer.android.com/training/constraint-layout#adjust-the-view-size" target="_blank" rel="noopener">switch the size to “match constratins”</a>.</p>
<h2 id="Adjust-the-view-size"><a href="#Adjust-the-view-size" class="headerlink" title="Adjust the view size"></a>Adjust the view size</h2><p>You can use the corner handles to resize a view, but this hard codes the size so the view will not resize for different content or screen sizes. To select a different sizing mode, click a view and open the <code>Attributes</code> window on the right side of the editor.</p>
<p>Near the top of the <code>Attributes</code> window is the view inspector, which includes controls for several layout attributes, as shown in figure 14(this is available only for views in a constraint layout).</p>
<p>You can change the way the height and width are calculated by clicking the symbols indicated with callout 3 in figure 14. These symbols represent the size mode as follows(click the symbol to toggle between these settings):</p>
<ul>
<li><img src="https://developer.android.com/studio/images/buttons/layout-width-fixed.png" alt> Fixed: You specify a specific dimension in the text box below or by resizing the view in the editor.</li>
<li><img src="https://developer.android.com/studio/images/buttons/layout-width-wrap.png" alt> Wrap Content: The view expands only as much as needed to fit its contents.</li>
<li><img src="https://developer.android.com/studio/images/buttons/layout-width-match.png" alt> Match Constraints: The view expands as much as possible to meet the constraints on each side(after accounting for the view’s margins). However, you can modify that behavior with the following attributes and values(these attributes take effect only when you set the view width to match constraints):</li>
</ul>
<p>//// TODO….</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Retrofit</title>
    <url>/posts/b6ff9bb5/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/59a4db0c518825242861181b" target="_blank" rel="noopener">https://juejin.im/post/59a4db0c518825242861181b</a></p>
<p><a href="https://mp.weixin.qq.com/s/I4M1QCxQx49IA-hVjhelKQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/I4M1QCxQx49IA-hVjhelKQ</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Dagger2</title>
    <url>/posts/d41965e/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5b45bd715188251b3a1db54f" target="_blank" rel="noopener">https://juejin.im/post/5b45bd715188251b3a1db54f</a><br><a href="https://juejin.im/post/5ccd496de51d453b573ee29d" target="_blank" rel="noopener">https://juejin.im/post/5ccd496de51d453b573ee29d</a><br><a href="https://juejin.im/post/5bcc7151f265da0ab41e8f6e" target="_blank" rel="noopener">https://juejin.im/post/5bcc7151f265da0ab41e8f6e</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidArchitecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-View the heap and memory allocations with Memory Profile</title>
    <url>/posts/9fb3b143/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/studio/profile/memory-profiler" target="_blank" rel="noopener">Reference</a></p>
<h1 id="View-the-Java-heap-and-memory-allocations-with-Memory-Profile"><a href="#View-the-Java-heap-and-memory-allocations-with-Memory-Profile" class="headerlink" title="View the Java heap and memory allocations with Memory Profile"></a>View the Java heap and memory allocations with Memory Profile</h1><p>The Memory Profile is a component in the <a href="https://developer.android.com/studio/preview/features/android-profiler.html" target="_blank" rel="noopener">Android Profile</a> that helps you identify memory leaks and memory churn that can lead to a stutter, freezes, and even app crashes. It shows a realtime graph of your app’s memory use and lets you capture a heap dump, force garbage collecctions, and track memory allocations.</p>
<p>To open the Memory Profile, follow these steps:</p>
<ol>
<li>Click <code>View &gt; Tool Windows &gt; Profiler</code>(you can also click <code>Profile</code> in the toolbar).</li>
<li>Select the device and app process you want to profile from the Android Profile toolbar. If you’ve connected a device over USB but don’t see it listed, ensure that you have <a href="https://developer.android.com/studio/debug/dev-options.html#enable" target="_blank" rel="noopener">enable USB debugging</a></li>
<li>Click anywhere in the <code>MEMORY</code> timeline to open the Memory Profile.</li>
</ol>
<p>Alternatively, you can inspect your app memory from the command line with <a href="https://developer.android.com/studio/command-line/dumpsys.html" target="_blank" rel="noopener">dumpsys</a>, and also <a href="https://developer.android.com/studio/debug/am-logcat.html#memory-logs" target="_blank" rel="noopener">see GC events in logcat</a>.</p>
<h2 id="Why-you-should-profile-your-app-memory"><a href="#Why-you-should-profile-your-app-memory" class="headerlink" title="Why you should profile your app memory"></a>Why you should profile your app memory</h2><p>Android provides a <a href="https://developer.android.com/topic/performance/memory-overview.html" target="_blank" rel="noopener">managed memory environment</a>-when it determines that your app is no longer using some objects, the garbage collector release the unused memory back to the heap. How Android goes about finding unused memory constantly being improved, but at some point on all Android versions, the system must briefly pause your code. Most of the time, the pauses are imperceptible. However, if your app allocates memory faster than the system can collect it, your app might be delayed while the collector frees enough memory to satisfy your allocations. The delay could cause your app to skip frames and cause visible slowness.</p>
<p>Even if your app doesn’t exhibit slowness, you should use the Memory Profiler to do the following:</p>
<ul>
<li>Look for undesirable memory allocation patterns in the timeline that might be causing performance problems</li>
<li>Dump the Java heap to see which objects are using up memory at any given time. Several heap dumps over an extended period of time can help identify memory leaks.</li>
<li>Record memory allocations during normal and extreme user interaction to identify exactly where your code is either allocating too many objects in a short time or allocating objects that become leaked.</li>
</ul>
<p>For information about programming practices that can reduce your app’s memory to use, read <a href="https://developer.android.com/topic/performance/memory.html" target="_blank" rel="noopener">Manage your app’s memory</a>.</p>
<h2 id="Memory-Profiler-overview"><a href="#Memory-Profiler-overview" class="headerlink" title="Memory Profiler overview"></a>Memory Profiler overview</h2><p>When you first open the Memory Profiler, you’ll see a detailed timeline of your app’s memory use and access tools to force garbage collection, capture a heap dump, and record memory allocations.</p>
<p><img src="https://developer.android.com/studio/images/profile/memory-profiler-callouts_2x.png" alt></p>
<p>As indicated in figure 1, the default view for the Memory Profiler includes the following:</p>
<ol>
<li>A button to force a garbage collection event.</li>
<li>A button to <a href="https://developer.android.com/studio/profile/memory-profiler#capture-heap-dump" target="_blank" rel="noopener">capture a heap dump</a>.</li>
<li>A dropdown menu to specify how frequently the profiler captures memory allocations. Selecting the appropriate option may help you <a href="https://developer.android.com/studio/profile/memory-profiler#performance" target="_blank" rel="noopener">improve app performance while profiling</a></li>
<li>Button to zoom in/out of the timeline.</li>
<li>A button to jump forward to the live memory data.</li>
<li>The event timeline, which shows the activity states, user input events, and screen rotation events.</li>
<li>The memory use timeline, which includes the following:<ul>
<li>A stacked graph of how much memory is being used by each memory category, as indicated by the y-axis on the left and the color key at the top.</li>
<li>A dashed line indicates the number of allocated objects, as indicated by the y-axis on the right.</li>
<li>An icon for each garbage collection event.</li>
</ul>
</li>
</ol>
<p>However, if you’re using a device running Android 7.1 or lower, not all profiling data is visible by default. If you see a message that says, “Advanced profiling is unavailable for the selected process,” you need to <a href="https://developer.android.com/studio/preview/features/android-profiler.html#advanced-profiling" target="_blank" rel="noopener">enable advanced profiling</a> to see the following:</p>
<ul>
<li>Event timeline</li>
<li>Number of allocated objects</li>
<li>Garbage collection events</li>
<li>On Android 8.0 and higher, advanced profiling is always enabled for debuggable apps.</li>
</ul>
<h3 id="How-memory-is-counted"><a href="#How-memory-is-counted" class="headerlink" title="How memory is counted"></a>How memory is counted</h3><p>The numbers you see at the top of the Memory Profiler are based on all the private memory pages that your app has committed, according to the Android system. This count does not include pages shared with the system or other apps.</p>
<p><img src="https://developer.android.com/studio/images/profile/memory-profiler-counts_2x.png" alt></p>
<p>The categories in the memory count are as follows:</p>
<ul>
<li><p>Java: Memory from objects allocated from Java or Kotlin code.</p>
</li>
<li><p>Native: Memory from objects allocated from C or C++ code.</p>
<p>  Even if you’re not using C++ in your app, you might see some native memory used here because the Android framework uses native memory to handle various tasks on your behalf, such as when handling image assets and other graphics-even though the code you’ve written is in Java or Kotlin.</p>
</li>
<li><p>Graphics: Memory used for graphics buffer queues to display pixels to the screen,including GL surfaces, GL textures, and so on. (Note that this is memory shared with the CPU, not dedicated GPU memory).</p>
</li>
<li><p>Stack: Memory used by both native and Java stacks in your app. This usually relates to how many threads your app is running.</p>
</li>
<li><p>Code: Memory that your app uses for code and resources, such as dex bytecode, optimized or compiled dex code, .so libraries, and  fonts.</p>
</li>
<li><p>Other: Memory used by your app that the system isn’t sure how to categorize.</p>
</li>
<li><p>Allocated: The number of Java/Kotlin objects allocated by your app. This does not count objects allocated in C or C++.</p>
<p>  When connected to a device running Android 7.1 and lower, this allocation count starts only at the time the Memory Profiler connected to your running app. So any objects allocated before you start profiling are not accounted for. However, Android 8.0 and higher includes an on-device profiling tool that keeps track of all allocations, so this number always represents the total number of Java objects outstanding in your app on Android 8.0 and higher.</p>
</li>
</ul>
<p>When compared to memory counts from the previous Android Monitor tool, the new Memory Profiler records your memory differently, so it might seem like your memory use is now higher. The Memory Profiler monitors some extra categories that increase the total, but if you only care about the Java heap memory, then the “Java” number should be similar to the value from the previous tool. Although the Java number probably doesn’t exactly match what you saw in Android Monitor, the new number accounts for all physical memory pages that have been allocated to your app’s Java heap since it was forked from Zygote. So this provides an accurate representation of how much physical memory your app is actually using.</p>
<h2 id="View-memory-allocations"><a href="#View-memory-allocations" class="headerlink" title="View memory allocations"></a>View memory allocations</h2><p>Memory allocations show you how each Java object and JNI reference in your memory was allocated. Specifically, the Memory Profiler can show you the following about object allocations:</p>
<ul>
<li>What types of objects were allocated and how much space they use.</li>
<li>The stack trace of each allocation, including in which thread</li>
<li>When the objects were deallocated(only when using a device with Android 8.0 or higher)</li>
</ul>
<p>If your device is running Android 8.0 or higher, you can view your object allocations at any time as follows: Drag in the timeline to select the region for which you want to view the allocations (as shown in video 1). There’s no need to begin a recording session, because Android 8.0 and higher includes an on-device profiling tool that constantly tracks your app’s allocations.</p>
<p>// Vieo</p>
<p>If your device is running Android 7.1 or lower, click Record memory allocations  in the Memory Profiler toolbar. While recording, the Memory Profiler tracks all allocations that occur in your app. When you’re done, click Stop recording  (the same button; see video 2) to view the allocations.</p>
<p>// Video</p>
<p>After you select a region of the timeline (or when you finish a recording session with a device running Android 7.1 or lower), the list of allocated objects appears below the timeline, grouped by class name and sorted by their heap count.</p>
<p>To inspect the allocation record, follow these steps:</p>
<ol>
<li>Browser the list to find objects that have unusually large heap counts and that might be leaked. To help find known classes, click the <code>Class Name</code> column header to sort alphabetically. Then click a class name. The <code>Instant View</code> pane appears on the right, showing each instance of that class, as shown in figure 3.<ul>
<li>Alternatively, you can locate objects quickly by clicking Filter, or by pressing Control+F(Command + F on Mac), and entering a class or package name in the search field. You can also search by method name if you select <code>Arrange by callstack</code> from the dropdown menu. If you want to use regular expressions, check the box next to <code>Regex</code>. Check the box next to <code>Match case</code> if your search query in case-sensitive.</li>
</ul>
</li>
<li>In the <code>Instance View</code> pane, click an instance. The <code>Call Stack</code> tab appears below , showing where that instance was allocated and in which thread.</li>
<li>In the <code>Call Stack</code> tab, right-click any line and choose <code>Jump to Source</code> to open that code in the editor.</li>
</ol>
<p><img src="https://developer.android.com/studio/images/profile/memory-profiler-allocations-detail_2x.png" alt></p>
<p>You can use the two menus above the list of allocated objects to choose which heap to inspect and how to organize the data.</p>
<p>From the menu on the left, choose which heap to inspect:</p>
<ul>
<li>default heap: When no heap is specified by the system.</li>
<li>image heap: The system boot image, containing classes that are preloaded during boot time. Allocations here are guarateed to never move or go away.</li>
<li>zygote heap: The copy-on-write heap where an app process is forked from in the Android system</li>
<li>app heap: The primary heap on which your app allocates memory</li>
<li>JNI heap: The heap that shows where Java Native Interface(JNI) references are allocated and released.</li>
</ul>
<p>From the menu on the right, choose how to arrange the allocations:</p>
<ul>
<li>Arrange by class: Groups all allocations based on class name. This is the default.</li>
<li>Arrange by package: Groups all allocations based on package name</li>
<li>Arrange by callstack: Groups all allocations into their corresponding call stack.</li>
</ul>
<h3 id="Improve-app-performance-while-profiling"><a href="#Improve-app-performance-while-profiling" class="headerlink" title="Improve app performance while profiling"></a>Improve app performance while profiling</h3><p>To improve app performance while profiling, the memory profile samples  memory allocations periodically by default. When testing on devices running API level 26 or higher, you can change this behavior by using the <code>Allocation Tracking</code> dropdown. The options available are as follows:</p>
<ul>
<li>Full: Captures all object allocations in memory. This is the default behavior in Android Studio 3.2 and earlier. If you have an app that allocates a lot of objects, you might observe visible slowdowns with your app while profiling.</li>
<li>Sampled: Samples object allocations in memory at regular intervals. This is the default option and has less impact on app performance while profiling. Apps that allocate a lot of objects over a short span of time may still exhibit visible slowdowns.</li>
<li>Off: Stops tracking your app’s memory allocation.</li>
</ul>
<h3 id="View-global-JNI-references"><a href="#View-global-JNI-references" class="headerlink" title="View global JNI references"></a>View global JNI references</h3><p>Java Native Interface(JNI) is a framework that allows Java code and native code to call one another.</p>
<p>JNI references are managed manually by the native code, so it is possible for Java objects used by native code to be kept alive for too long. Some objects on the Java heap may become unreachable if a JNI reference is discarded without first being explicitly deleted. Also , it is possible to exhaust the global JNI reference limit.</p>
<p>To troubleshoot such issues, use the <code>JNI heap</code> view in the Memory Profiler to browser all global JNI refrences and filter them by Java types and native call stacks. With this information, you can find when and where global JNI references are created and deleted.</p>
<p>While your app is running, select a portion of the timeline that you want to inspect and select <code>JNI heap</code> from the drop-down menu above the class list. You can then inspect objects in the heap as you normally would and double-click objects in the <code>Allocation Call Stack</code> tab to see where the JNI references are allocated and released in your code, as shown in figure 4.</p>
<p><img src="https://developer.android.com/studio/images/memory-profiler-jni-heap_2x.png" alt="figure 4"></p>
<p>To inspect memory allocations for your app’s JNI code, you must deploy your app to a device running Android 8.0 or higher.</p>
<p>For more information on JNI, see <a href="https://developer.android.com/training/articles/perf-jni" target="_blank" rel="noopener">JNI tips</a>.</p>
<h2 id="Capture-a-heap-dump"><a href="#Capture-a-heap-dump" class="headerlink" title="Capture a heap dump"></a>Capture a heap dump</h2><p>A heap dump shows which objects in your app are using memory at the time you capture the heap dump. Especially after an extended user session, a heap dump can help identify memory leaks by showing objects still in memory that you believe should no longer be there.</p>
<p>After you capture a heap dump, you can view the following:</p>
<ul>
<li>What types of objects your app has allocated, and how many of each</li>
<li>How much memory each object is using</li>
<li>Where references to each object are being held in your code.</li>
<li>The call stack for where an object was allocated. (Call stacks are currently available with a heap dump only with Android 7.1 and lower when you capture the heap dump while recording allocations.)</li>
</ul>
<p>To capture a heap dump, click <code>Dump Java heap</code> in the Memory Profile toolbar. While dumping the heap, the amount of Java memory might increase temporarily. This is normal because the heap dump occurs in the same process as your app and requires some memory to collect the data.</p>
<p>The heap dump appears below the memory timeline, showing all class types in the heap, as shown in figure 5.</p>
<p><img src="https://developer.android.com/studio/images/profile/memory-profiler-dump_2x.png" alt="figure 5"></p>
<p>If you need to be more precise about when the dump is created, you can create a heap dump at the critical point in your app code by calling <a href="https://developer.android.com/reference/android/os/Debug.html#dumpHprofData(java.lang.String)" target="_blank" rel="noopener">dumpHprofData()</a>.</p>
<p>In the list of classes, you can see the following information:</p>
<ul>
<li><p>Allocations: Number of allocations in the heap.</p>
</li>
<li><p>Native Size: Total amount of native memory used by this object type(in bytes). This column is visible only for Android 7.0 and higher.</p>
<p>  You will see memory here for some objects allocated in Java because Android uses native memory for some framework classes, such as Bitmap.</p>
</li>
<li><p>Shallow Size: Total amount of Java memory used by this object type(in types)</p>
</li>
<li><p>Retained Size: Total size of memory being retained due to all instances of this class (in bytes).</p>
</li>
</ul>
<p>You can use the two menus above the list of allocated objects to choose which heap dumps to inspect and how to organize the data.</p>
<p>From the menu on the left, choose which heap to inspect:</p>
<ul>
<li><p>default heap: When no heap is specified by the system.</p>
</li>
<li><p>app heap: The primary heap on which your app allocates memory.</p>
</li>
<li><p>image heap: The system boot image, containing classes that are preloaded during boot time.                      Allocations here are guaranteed to never move or go away.</p>
</li>
<li><p>zygote heap: The copy-on-write heap where an app process is forked from in the Android system.</p>
</li>
</ul>
<p>From the menu on the right, choose how to arrange the allocations:</p>
<ul>
<li><p>Arrange by class: Groups all allocations based on class name. This is the default.</p>
</li>
<li><p>Arrange by package: Groups all allocations based on package name.</p>
</li>
<li><p>Arrange by callstack: Groups all allocations into their corresponding call stack. This option works only if you capture the heap dump while recording allocations. Even so, there are likely to be objects in the heap that were allocated before you started recording, so those allocations appear first, simply listed by class name.</p>
</li>
</ul>
<p>The list is sorted by the <code>Retained Size</code> column by default. To sort by the values in a different column, click the column’s heading.</p>
<p>Click a class name to open the <code>Instance View</code> window on the right(shown in figure 6). Each listed instance includes the following:</p>
<ul>
<li>Depth: The shortest number of hops from any GC root to the selected instance.</li>
<li>Native Size: Size of this instance in native memory. This column is visible only for Android 7.0 and higher.</li>
<li>Shallow Size: Size of this instance in Java memory.</li>
<li>Retained Size: Size of memory that this instance dominates (as per the <a href="https://en.wikipedia.org/wiki/Dominator_(graph_theory)" target="_blank" rel="noopener">dominator tree</a>). </li>
</ul>
<p><img src="https://developer.android.com/studio/images/profile/memory-profiler-dump-stacktrace_2x.png" alt="figure 8"></p>
<p>To inspect your heap, follow these steps:</p>
<ol>
<li>Browse the list to find objects that have unusually large heap counts and that might be leaked. To help find known classes, click the <code>Class Name</code> column header to sort alphabetically. Then click a class name. The <code>Instance View</code> pane appears on the right, showing each instance of that class, as shown in figure 6.<ol>
<li>Alternatively, you can locate objects quickly by clicking <code>Filter</code> , or by pressing Control+F (Command+F on Mac), and entering a class or package name in the search field. You can also search by method name if you select <code>Arrange by callstack</code> from the dropdown menu. If you want to use regular expressions, check the box next to <code>Regex</code>. Check the box next to <code>Match case</code> if your search query is case-sensitive.</li>
</ol>
</li>
<li>In the <code>Instance View</code> pane, click an instance. The <code>References</code> tab appears below, showing every reference to that object.<br>Or, click the arrow next to the instance name to view all its fields, and then click a field name to view all its references. If you want to view the instance details for a field, right-click on the field and select <code>Go to Instance</code>.</li>
<li>In the <code>References</code> tab, if you identify a reference that might be leaking memory, right-click it and select <code>Go to Instance</code>. This selects the corresponding instance from the heap dump, showing you its own instance data.</li>
</ol>
<p>In your heap dump, look for memory leaks caused by any of the following:</p>
<ul>
<li>Long-lived references to <code>Activity</code>, <code>Context</code>, <code>View</code>, <code>Drawable</code>, and other objects that might hold a reference to the <code>Activity</code> or <code>Context</code> container.</li>
<li>Non-static inner classes, such as a <code>Runnable</code>, that can hold an <code>Activity</code> instance.</li>
<li>Caches that hold objects longer than necessary.</li>
</ul>
<h3 id="Save-a-heap-dump-as-an-HPROF-file"><a href="#Save-a-heap-dump-as-an-HPROF-file" class="headerlink" title="Save a heap dump as an HPROF file"></a>Save a heap dump as an HPROF file</h3><p>After you capture a heap dump, the data is viewable in the Memory Profiler only while the profiler is running. When you exit the profiling session, you lose the heap dump. So, if you want to save it for review later, export the heap dump to an HPROF file. In Android Studio 3.1 and lower, the <code>Export capture to file</code>  button is on the left side of the toolbar below the timeline; in Android Studio 3.2 and higher, there is an <code>Export Heap Dump</code> button at the right of each <code>Heap Dump</code> entry in the <code>Sessions</code> pane. In the <code>Export As</code> dialog that appears, save the file with the <code>.hprof</code> file-name extension.</p>
<p>To use a different HPROF analyzer like <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jhat.html" target="_blank" rel="noopener">jhat</a>, you need to convert the HPROF file from Android format to the Java SE HPROF format. You can do so with the <code>hprof-conv</code> tool provided in the <code>android_sdk/platform-tools/</code> directory. Run the <code>hprof-conv</code> command with two arguments: the original HPROF file and the location to write the converted HPROF file. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hprof-conv heap-original.hprof heap-converted.hprof</span><br></pre></td></tr></table></figure>

<h3 id="Import-a-heap-dump-file"><a href="#Import-a-heap-dump-file" class="headerlink" title="Import a heap dump file"></a>Import a heap dump file</h3><p>To import an HPROF (<code>.hprof</code>) file, click <code>Start a new profiling session</code>  in the Sessions pane, select <code>Load from file</code>, and choose the file from the file browser.</p>
<p>You can also import an HPROF file by dragging it from the file browser into an editor window.</p>
<h2 id="Techniques-for-profiling-your-memory"><a href="#Techniques-for-profiling-your-memory" class="headerlink" title="Techniques for profiling your memory"></a>Techniques for profiling your memory</h2><p>While using the Memory Profiler, you should stress your app code and try forcing memory leaks. One way to provoke memory leaks in your app is to let it run for a while before inspecting the heap. Leaks might trickle up to the top of the allocations in the heap. However, the smaller the leak, the longer you need to run the app in order to see it.</p>
<p>You can also trigger a memory leak in one of the following ways:</p>
<ul>
<li><p>Rotate the device from portrait to landscape and back again multiple times while in different activity states. Rotating the device can often cause an app to leak an <code>Activity</code>, <code>Context</code>, or <code>View</code> object because the system recreates the <code>Activity</code> and if your app holds a reference to one of those objects somewhere else, the system can’t garbage collect it.</p>
</li>
<li><p>Switch between your app and another app while in different activity states (navigate to the Home screen, then return to your app).</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Guide to App Architecture</title>
    <url>/posts/f6a91cf7/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/jetpack/docs/guide" target="_blank" rel="noopener">Reference</a></p>
<h1 id="Guide-to-app-architecture"><a href="#Guide-to-app-architecture" class="headerlink" title="Guide to app architecture"></a>Guide to app architecture</h1><p>This guide encompasses best practices and recommended architecture for building robust, production-quality apps.</p>
<p>This page assumes a basic familiarity with the Android Framework. If you are new to Android app development, check out our <a href="https://developer.android.com/guide" target="_blank" rel="noopener">Developer guides</a> to get started and learn more about the concepts mentioned in this guide.</p>
<p>If you’re interested in app architecture, and would like to see the material in this guide from a Kotlin programming perspective, check out the Udacity course <a href="https://www.udacity.com/course/ud9012" target="_blank" rel="noopener">Developing Android Apps with Kotlin</a>.</p>
<h2 id="Mobile-app-user-experiences"><a href="#Mobile-app-user-experiences" class="headerlink" title="Mobile app user experiences"></a>Mobile app user experiences</h2><p>In the majority of cases, desktop apps have a single entry point from a desktop or program launcher, then run as a single monolithic process. Android apps, on the other hand, have a much more complex structure. A typical Android app contains multiple <a href>app components</a>, including <a href>activities</a>, <a href>fragments</a>, <a href>services</a>, <a href>content providers</a>, and <a href>broadcast receivers</a>.</p>
<p>You declare most of these app components in your <a href>app manifest</a>. The Android OS then uses this file to decide how to integrate your app into  the devices’s overall user experience. Given that a properly-written Android app contains multiple components and that users often interact with multiple apps in a short period of time, apps need to adapt to different kinds of user-driven workflows and tasks.</p>
<p>For example, consider what happens when you share a photo in your favorite social network app:</p>
<ol>
<li>The app triggers a camera intent. The Android OS then launches a camera app to handle the request. At this point, the usre has left the social networking app, but their experience is still seamless.</li>
<li>The camera app might trigger other intents, like launching the file chooser, which may launch yet another app.</li>
<li>Eventually, the user returns to the social networking app and shares the photo.</li>
</ol>
<p>At  any point during the process, the user could be interupted by a phone call or notification. After acting upon this interruption, the user expects to be able to return to, and resume, this photo-sharing process. This app-hopping behavior is common on mobile devices, so your app must handle these flows correctly.</p>
<p>Keep in mind that mobile devices are also resource-constrained, so at any time, the operating system might kill some app processes to make room for new ones.</p>
<p>Given the conditions of this environment, it’s possible for your app components to be launched individually and out-of-order, and the operating system or user can destroy them at any time. Because these events aren’t under your control, <code>you shouldn&#39;t store any app data or state in your app components</code>, and your app components shouldn’t depend on each other.</p>
<h2 id="Common-architectural-principles"><a href="#Common-architectural-principles" class="headerlink" title="Common architectural principles"></a>Common architectural principles</h2><p>If you shouldn’t use app components to store app data and state, how should you design your app?</p>
<h3 id="Separation-of-concerns"><a href="#Separation-of-concerns" class="headerlink" title="Separation of concerns"></a>Separation of concerns</h3><p>The most important principle to follow is <a href>separation of concerns</a>. It’s a common mistake to write all your code in an <code>Activity</code> or a <code>Fragment</code>. These UI-based classes should only contain logic that handles UI and operating system interactions.<br>By keeping these classes as lean as possible, you can avoid many lifecycle-related problems.</p>
<p>Keep in mind that you don’t own implementations of <code>Activity</code> and <code>Fragment</code>; rather, these are just glue classes that represent the contract between the Android OS and your app. The oS can destroy them at any time based on user interactions or because of system conditions like low memory. To provide a satisfactory user experience and a more manageable app maintenance experience, it’s best to minimize your dependency on them.</p>
<h3 id="Drive-UI-from-a-model"><a href="#Drive-UI-from-a-model" class="headerlink" title="Drive UI from a model"></a>Drive UI from a model</h3><p>Another important principle is that you should <code>drive your UI from a model</code>, preferable a persistent model. Models are components that are responsible for handling the data for an app. They’re independent from the <code>View</code> objects and app components in your app, so they’re unaffected by the app’s lifecycle and the associated concerns.</p>
<p>Persistence is ideal for the following reasons:</p>
<ul>
<li>Your users don’t lose data if the Android OS destroys your app to free up resources.</li>
<li>Your app continues to work in cases when a network connection is flaky or not available.</li>
</ul>
<p>By basing your app on model classes with the well-defined responsibility of managing the data, your app is more testable and consistent.</p>
<h2 id="Recommended-app-architecture"><a href="#Recommended-app-architecture" class="headerlink" title="Recommended app architecture"></a>Recommended app architecture</h2><p>In this section, we demonstrate how to structure an app using <a href="https://developer.android.com/jetpack/#architecture-components" target="_blank" rel="noopener">Architecture Components</a> by working through an end-to-end use case.</p>
<p>Imageine we’re building a UI that shows a user profile. We use a private backend and a REST API to fetch the data for a given profile.</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>To start, consider the following diagram, which shows how all the modules should interact with one another after designing the app:</p>
<p><img src="https://developer.android.com/topic/libraries/architecture/images/final-architecture.png" alt></p>
<p>Notice that each component depends only on the component one level below it. For example, activities and fragments depend only on a view model. The repository is the only class that depends on multiple other classes; in this example, the repository depends on a persistent data model and a remote backend data source.</p>
<p>This design creates a consistent and pleasant user experience. Regardless of whether the user comes back to the app several minutes after they’ve last closed it or several days later, they instantly see a user’s information that the app persists locally. If this data is stale, the app’s repository module starts updating the data in the background.</p>
<h3 id="Build-the-user-interface"><a href="#Build-the-user-interface" class="headerlink" title="Build the user interface"></a>Build the user interface</h3><p>The UI consists of a fragment, <code>UserProfileFragment</code>, and its corresponding layout file, <code>user_profile_layout.xml</code>. To drive the UI, our data model needs to hold the following data elements:</p>
<ul>
<li><p>User ID:</p>
<p>  The identifier for the user. It’s best to pass this information into the fragment using the fragment arguments. If the Android OS destroys our process, this information is preserved, so the ID is available the next time our app is restarted.</p>
</li>
<li><p>User object:</p>
<p>  A data class that holds details about the user.</p>
</li>
</ul>
<p>We use a <code>userProfileViewModel</code>, based on the ViewModel architecture component, to keep this information.</p>
<p>We’ve now defined the following files:</p>
<ul>
<li><code>user_profile.xml</code>: The UI layout definition for the screen.</li>
<li><code>UserProfileFragment</code>: The UI controller that displays the data.</li>
<li><code>UserProfileViewModel</code>: The class that prepares the data for viewing in the <code>UserProfileFragment</code> and reacts to user interactions.</li>
</ul>
<p>The following code snippets show the starting contents for these files. (The layout file is omitted for simplicity).</p>
<p>UserProfileViewModel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class UserProfileViewModel : ViewModel() &#123;</span><br><span class="line">    val userId : String = TODO()</span><br><span class="line">    val user : User = TODO()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserProfileFragment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class UserProfileFragment : Fragment() &#123;</span><br><span class="line">    <span class="comment">// To use the viewModels() extension function, include</span></span><br><span class="line">    <span class="comment">// "androidx.fragment:fragment-ktx:latest-version" in your app</span></span><br><span class="line">    <span class="comment">// module's build.gradle file.</span></span><br><span class="line">    <span class="keyword">private</span> val viewModel: <span class="function">UserProfileViewModel by <span class="title">viewModels</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    override fun <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: LayoutInflater, container: ViewGroup?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: Bundle?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>: View </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.main_fragment, container, <span class="keyword">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now that we have these code modules, how do we connect them? After all, when the <code>user</code> field is set in the <code>UserProfileViewModel</code> class, we need a way to inform the UI.</p>
<p>To obtain the <code>user</code>, our <code>ViewModel</code> needs to access the Fragment arguments. We can either pass them from the Fragment, or better, using the <a href>SavedState module</a>, we can make our ViewModel read the argument directly:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserProfileViewModel</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileViewModel</span>(</span></span><br><span class="line">    savedStateHandle: SavedStateHandle</span><br><span class="line">) : ViewModel() &#123;</span><br><span class="line">    val userId : String = savedStateHandle[<span class="string">"uid"</span>] ?:</span><br><span class="line">      <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"missing user id"</span>)</span><br><span class="line">    val user : User = TODO()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserProfileFragment</span></span><br><span class="line"><span class="keyword">private</span> val viewModel: <span class="function">UserProfileViewModel by <span class="title">viewModels</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    factoryProducer = &#123; SavedStateVMFactory(<span class="keyword">this</span>)</span> &#125;</span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure>

<p>Now we need to inform our Fragment when the user object is obtained. This is where the <code>LiveData</code> architecture component comes in.</p>
<p><a href="https://developer.android.com/topic/libraries/architecture/livedata" target="_blank" rel="noopener">LiveData</a> is an observable data holder. Other components in your app can monitor changes to objects using this holder without creating explicit and rigid dependency paths between them. The LiveData component also respects the lifecycle state of your app’s components-such as activities, fragments, and services-and includes cleanup logic to prevent object leaking and excessive memory consumption.</p>
<p>To incorporate the LiveData component into our app, we change the field type in the <code>UserProfileViewModel</code> to <code>LiveData&lt;User&gt;</code>. Now the <code>UserProfileFragment</code> is informed when the data is updated. Furthermore, because this <code>LiveData</code> field is lifecycle aware, it automatically cleans up references after they’re no longer needed.</p>
<p>UserProfileViewModel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileViewModel</span>(</span></span><br><span class="line">savedStateHandle: SavedStateHandle</span><br><span class="line">) : ViewModel() &#123;</span><br><span class="line">    val userId : String = savedStateHandle[<span class="string">"uid"</span>] ?:</span><br><span class="line">      <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"missing user id"</span>)</span><br><span class="line">    val user : LiveData&lt;User&gt; = TODO()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now we modifiy <code>UserProfileFragment</code> to observe the data and update the UI:</p>
<p>UserProfileFragment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">override fun <span class="title">onViewCreated</span><span class="params">(view: View, savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">    viewModel.user.observe(viewLifecycleOwner) &#123;</span><br><span class="line">        <span class="comment">// update UI</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Every time the user profile data is updated, the <code>onChanged()</code> callback is invoked, and the UI is refreshed.</p>
<p>If you’re familiar with other libraries where observable callbacks are used, you might have realized that we didn’t override the fragment’s <code>onStop()</code> method to stop observing the data. This step isn’t necessary with LiveData beacuse it’s lifecycle aware, which means it doesn’t invoke the <code>onChanged()</code> callback unless the fragment is in an active state; that is it has received <code>onStart()</code> but hasn’t yet received <code>onStopped()</code>. LiveData also automatically removes the observer when the fragment’s <code>onDestroy()</code> method is called.</p>
<p>We also didn’t add any logic to handle configuration changes, such as the user rotating the device’s screen. The <code>UserProfileViewModel</code> is automatically restore when the configuration changes, so as soon as the new fragment is created, it receives the same instance of <code>ViewModel</code>, and the callback is invoked immediately using the current data. Given that <code>ViewModel</code> objects are inteneded to outlast the corresponding <code>View</code> objects that they update, you shouldn’t include direct references to <code>View</code> objects within your implementation of <code>ViewModel</code>. For more information about the lifetime of a <code>ViewModel</code> correspoinds to the lifecycle of UI components, see <a href="https://developer.android.com/topic/libraries/architecture/viewmodel.html#lifecycle" target="_blank" rel="noopener">The lifecycle of a ViewModel</a>.</p>
<h3 id="Fetch-data"><a href="#Fetch-data" class="headerlink" title="Fetch data"></a>Fetch data</h3><p>Now that we’ve used LiveData to connect the <code>UserProfileViewModel</code> to the <code>UserProfileFragment</code>, how can we fetch the user profile data?</p>
<p>For this example, we assume that our backend provides a REST API. We use the <a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a> library to access our backend, though you are free to use a different library that serves the same purpose.</p>
<p>Here’s our definition of <code>Webservice</code> that communicates with our backend:</p>
<p>WebService:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Webservice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@GET</span> declares an HTTP GET request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Path</span>("user") annotation on the userId parameter marks it as a</span></span><br><span class="line"><span class="comment">    * replacement for the &#123;user&#125; placeholder in the <span class="doctag">@GET</span> path</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;"</span>)</span><br><span class="line">   <span class="function">fun <span class="title">getUser</span><span class="params">(@Path(<span class="string">"user"</span>)</span> userId: String): Call&lt;User&gt;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>A first idea for implementing the <code>ViewModel</code> might involve directly calling the <code>Webservice</code> to fetch the data and assign this data to our <code>LiveData</code> object. This design works, but by using it , our app becomes more and more difficult to maintain as it grows. It gives too much reposibility to the <code>UserProfileViewModel</code> class, which violates the <a href="https://developer.android.com/jetpack/docs/guide#separation-of-concerns" target="_blank" rel="noopener">separation of concerns</a> principle.  Additionally, the scope of a <code>ViewModel</code> is tied to an <code>Activity</code> or <code>Fragment</code> lifecycle, which means that the data from the <code>WebService</code> is lost when the associated UI object’s lifecycle ends. This behavior creates an undersirable user experience.</p>
<p>Instead, our ViewModel delegates the data-fetching process to a new module, a repository.</p>
<p><code>Repository</code> modules handle data operations. They provide a clean API so that the rest of the app can retrieve this data easily. They know where to get the data from and what API calls to make when data is updated. You can consider repositories to be mediators between different data sources, such as persistent models, web services, and caches.</p>
<p>Our <code>UserRepository</code> class, shown in the following code snippet, uses an instance of <code>WebService</code> to fetch a user’s data:</p>
<p>UserRepository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> val webservice: Webservice = TODO()</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   <span class="function">fun <span class="title">getUser</span><span class="params">(userId: String)</span>: LiveData&lt;User&gt; </span>&#123;</span><br><span class="line">       <span class="comment">// This isn't an optimal implementation. We'll fix it later.</span></span><br><span class="line">       val data = MutableLiveData&lt;User&gt;()</span><br><span class="line">       webservice.getUser(userId).enqueue(object : Callback&lt;User&gt; &#123;</span><br><span class="line">           <span class="function">override fun <span class="title">onResponse</span><span class="params">(call: Call&lt;User&gt;, response: Response&lt;User&gt;)</span> </span>&#123;</span><br><span class="line">               data.value = response.body()</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// Error case is left out for brevity.</span></span><br><span class="line">           <span class="function">override fun <span class="title">onFailure</span><span class="params">(call: Call&lt;User&gt;, t: Throwable)</span> </span>&#123;</span><br><span class="line">               TODO()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> data</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Even though the repository module looks unnecessary, it serves an important purpose: it abstracts the data sources from the rest of the app. Now, our <code>UserProfileViewModel</code> doesn’t know how the data is fetched, so we can provide the view model with data obtained from several different data-fetching implementations.</p>
<h3 id="Manage-dependencies-between-components"><a href="#Manage-dependencies-between-components" class="headerlink" title="Manage dependencies between components"></a>Manage dependencies between components</h3><p>The <code>UserRepository</code> class above needs an instance of <code>WebService</code> to fetch the user’s data. It could simply create the instance, but to do that, it also needs to know the dependencies of the <code>WebService</code> class.<br>Additionally, <code>UserRepository</code> is probably not the only class that needs a <code>WebService</code>. This situation requires us to duplicate code, as each class that needs a reference to <code>WebService</code> needs to know how to construct it and its dependencies. If each class creates a new <code>WebService</code>, our app could become very resource heavy.</p>
<p>You can use the following design patterns to address this problem:</p>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">Dependency injection(DI)</a>:</p>
<p>  Dependency injection allows classes to define their dependencies without constructing them. At runtime, another class is responsible for providing these dependencies. We recommend the <a href="https://dagger.dev/" target="_blank" rel="noopener">Dagger 2</a> library for implementing dependency ijection in Android apps. Dagger 2 automatically constructs objects by walking the dependency tree, and it provides compile-time guarantees on dependencies.</p>
</li>
<li><p><a href>Service locator</a>: The service locator pattern provides a registry where classes can obtain their depedencies instead of constructing them.</p>
</li>
</ul>
<p>It’s easier to implement a service registry than use DI, so if you aren’t familiar with DI, use the service locator pattern instead.</p>
<p>These patterns allow you to scale your code because they provide clear patterns for managing dependencies without duplicating code or adding complexity. Furthermore, these patterens allow you to quickly switch between test and production data-fetching implementations.</p>
<p>Our example app uses <a href="https://dagger.dev/" target="_blank" rel="noopener">Dagger 2</a> to manage the <code>WebService</code> object’s dependencies.</p>
<h3 id="Connect-ViewModel-and-the-repository"><a href="#Connect-ViewModel-and-the-repository" class="headerlink" title="Connect ViewModel and the repository"></a>Connect ViewModel and the repository</h3><p>Now, we modify our <code>UserProfileViewModel</code> to use the <code>UserRepository</code> object:</p>
<p><code>UserProfileViewModel</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UserProfileViewModel</span> @<span class="title">Inject</span> <span class="title">constructor</span>(</span></span><br><span class="line">   savedStateHandle: SavedStateHandle,</span><br><span class="line">   userRepository: UserRepository</span><br><span class="line">) : ViewModel() &#123;</span><br><span class="line">   val userId : String = savedStateHandle[<span class="string">"uid"</span>] ?:</span><br><span class="line">          <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"missing user id"</span>)</span><br><span class="line">   val user : LiveData&lt;User&gt; = userRepository.getUser(userId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cache-data"><a href="#Cache-data" class="headerlink" title="Cache data"></a>Cache data</h3><p>The <code>UserRepository</code> implementation abstracts the call to the <code>Webservice</code> object, but because it relies on only one data source, it’s not very flexible.</p>
<p>The key problem with the <code>UserRepository</code> implementation is that after it fetches data from our backend, it doesn’t store that data anywhere. Threrefore, if the user leaves the <code>UserProfileFragment</code>, then returns to it, our app must re-fetch the data, even if it hasn’t changed.</p>
<p>The design is suboptimal for the following reasons:</p>
<ul>
<li>It wastes valuable network bandwidth</li>
<li>It forces the user to wait for the new query to complete</li>
</ul>
<p>To address these shortcomings, we add a new data source to our <code>UserRepository</code>, which caches the <code>User</code> objects in memory:</p>
<p>UserRepository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// Informs Dagger that this class should be constructed only once.</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> @<span class="title">Inject</span> <span class="title">constructor</span>(</span></span><br><span class="line">   private val webservice: Webservice,</span><br><span class="line">   <span class="comment">// Simple in-memory cache. Details omitted for brevity.</span></span><br><span class="line">   <span class="keyword">private</span> val userCache: UserCache</span><br><span class="line">) &#123;</span><br><span class="line">   <span class="function">fun <span class="title">getUser</span><span class="params">(userId: String)</span>: LiveData&lt;User&gt; </span>&#123;</span><br><span class="line">       val cached = userCache.get(userId)</span><br><span class="line">       <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> cached</span><br><span class="line">       &#125;</span><br><span class="line">       val data = MutableLiveData&lt;User&gt;()</span><br><span class="line">       userCache.put(userId, data)</span><br><span class="line">       <span class="comment">// This implementation is still suboptimal but better than before.</span></span><br><span class="line">       <span class="comment">// A complete implementation also handles error cases.</span></span><br><span class="line">       webservice.getUser(userId).enqueue(object : Callback&lt;User&gt; &#123;</span><br><span class="line">           <span class="function">override fun <span class="title">onResponse</span><span class="params">(call: Call&lt;User&gt;, response: Response&lt;User&gt;)</span> </span>&#123;</span><br><span class="line">               data.value = response.body()</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Error case is left out for brevity.</span></span><br><span class="line">           <span class="function">override fun <span class="title">onFailure</span><span class="params">(call: Call&lt;User&gt;, t: Throwable)</span> </span>&#123;</span><br><span class="line">               TODO()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> data</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Persist-data"><a href="#Persist-data" class="headerlink" title="Persist data"></a>Persist data</h3><p>Using our current implementation, if the user rotates the devie or leaves and immediately returns to the app, the existing UI becomes visible instantly because the repository retrieves data from our in-memory cache.</p>
<p>However, what happens if the user leaves the app and comes back hours later, after the Android OS has killed the process? By replying on our current implementation in this situation, we need to fetch the data again from the network. This refetching process isn’t just a bad user experience; it’s also wasteful because it consumes valueable mobile data.</p>
<p>You could fix this issue by caching the web requests, but that creates a key new problem; What happens if the same user data shows up from another type of request, such as fetching a list of friend? The app would show inconsistent data, which is confusing at best. For example, our app might show two different versions of the same user’s data  if the user made the list-of-friends request and the single-user request at different at times. Our app would need to figure out how to merge this inconsistent data.</p>
<p>The proper way to handle this situation is to use a persistent model. This is where the <a href="https://developer.android.com/training/data-storage/room/index.html" target="_blank" rel="noopener">Room</a> persistence library comes to the rescue.</p>
<p><code>Room</code> is an object-mapping library that provides local data persistence with minimal boilerplate code. At compile time, it validates each query against your data schema, so broken SQL queries result in compile-time errors instead of runtime failures. Room abstracts away some of the underlying implementation details of working with raw SQL tables and queries. It also allows you to observe changes to the database’s data, including collections and join queries, exposing such changes using LiveData objects. it even explicity defines execution constraints that address common threading issue, such as accessing storage on the main thread.</p>
<p>To use Room, we need to define our local schema. First, we add the <a href="https://developer.android.com/reference/android/arch/persistence/room/Entity.html" target="_blank" rel="noopener">@Entity</a> annotation to our <code>User</code> data model class and a <a href="https://developer.android.com/reference/android/arch/persistence/room/PrimaryKey" target="_blank" rel="noopener">@PrimaryKey</a> annotation to the class’s <code>id</code> field. These annotations mark <code>User</code> as a table in our database and <code>id</code> as the table’s primary key:</p>
<p>User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="function">data class <span class="title">User</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">   @PrimaryKey <span class="keyword">private</span> val id: String,</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">private</span> val name: String,</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">private</span> val lastName: String</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure>

<p>Then, we create a database class by implementing <a href="https://developer.android.com/reference/android/arch/persistence/room/RoomDatabase.html" target="_blank" rel="noopener">RoomDatabase</a> for our app:</p>
<p>UserDatabase</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">@Database(entities = [User::class], version = 1)</span><br><span class="line">abstract class UserDatabase : RoomDatabase()</span><br></pre></td></tr></table></figure>

<p>Notice that <code>UserDatabase</code> is abstract. Room automatically provides an implementation of it. For details, see the <a href="https://developer.android.com/training/data-storage/room/" target="_blank" rel="noopener">Room</a> documentation.</p>
<p>We now need a way to insert user data into the database. For this task, we create a <a href="https://en.wikipedia.org/wiki/Data_access_object" target="_blank" rel="noopener">data access object(DAO)</a>.</p>
<p>UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Dao</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Insert</span>(onConflict = REPLACE)</span><br><span class="line">   <span class="function">fun <span class="title">save</span><span class="params">(user: User)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   @<span class="title">Query</span><span class="params">(<span class="string">"SELECT * FROM user WHERE id = :userId"</span>)</span></span></span><br><span class="line"><span class="function">   fun <span class="title">load</span><span class="params">(userId: String)</span>: LiveData&lt;User&gt;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Notice that the <code>load</code> method returns an object of type <code>LiveData&lt;User&gt;</code>. Room knows when the database is modified and automatically notifies all active observers when the data changes. Because Room uses LiveData, this operation is efficient; it updates the data only when there is at least one active observer.</p>
<p>With our <code>UserDao</code> class defined, we then reference the DAO from our database class:</p>
<p>UserDatabase</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    @Database(entities = [User::class], version = 1)</span><br><span class="line">abstract class UserDatabase : RoomDatabase() &#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> fun <span class="title">userDao</span><span class="params">()</span>: UserDao</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Now we can modify our <code>UserRepository</code> to incorporate the Room data source:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// Informs Dagger that this class should be constructed only once.</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> @<span class="title">Inject</span> <span class="title">constructor</span>(</span></span><br><span class="line">   private val webservice: Webservice,</span><br><span class="line">   <span class="comment">// Simple in-memory cache. Details omitted for brevity.</span></span><br><span class="line">   <span class="keyword">private</span> val executor: Executor,</span><br><span class="line">   <span class="keyword">private</span> val userDao: UserDao</span><br><span class="line">) &#123;</span><br><span class="line">   <span class="function">fun <span class="title">getUser</span><span class="params">(userId: String)</span>: LiveData&lt;User&gt; </span>&#123;</span><br><span class="line">       refreshUser(userId)</span><br><span class="line">       <span class="comment">// Returns a LiveData object directly from the database.</span></span><br><span class="line">       <span class="keyword">return</span> userDao.load(userId)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> fun <span class="title">refreshUser</span><span class="params">(userId: String)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Runs in a background thread.</span></span><br><span class="line">       executor.execute &#123;</span><br><span class="line">           <span class="comment">// Check if user data was fetched recently.</span></span><br><span class="line">           val userExists = userDao.hasUser(FRESH_TIMEOUT)</span><br><span class="line">           <span class="keyword">if</span> (!userExists) &#123;</span><br><span class="line">               <span class="comment">// Refreshes the data.</span></span><br><span class="line">               val response = webservice.getUser(userId).execute()</span><br><span class="line"></span><br><span class="line">               <span class="comment">// Check for errors here.</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">// Updates the database. The LiveData object automatically</span></span><br><span class="line">               <span class="comment">// refreshes, so we don't need to do anything else here.</span></span><br><span class="line">               userDao.save(response.body()!!)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   companion object &#123;</span><br><span class="line">       val FRESH_TIMEOUT = TimeUnit.DAYS.toMillis(<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notice that even though we changed where the data comes from in <code>UserRepository</code>, we didn’t need to change our <code>UserProfileViewModel</code> or <code>UserProfileFragment</code>. This small-scoped update demonstrates the flexibility that our app’s architecture provides. It’s also great for testing, because we can provide a fake UserRepository and test our production <code>UserProfileViewModel</code> at the same time.</p>
<p>If users wait a few days before returning to an app that uses this architecture, it’s likely that they’ll see out-of-date information until the repository can fetch updated information. Depending on your use case, you may not want to show this out-of-date information. Instead, you can display placeholder data, which shows dummy values and indicates that your app is currently fetching and loading up-to-date information.</p>
<p>Single source of truth</p>
<p>It’s common for different REST API endpoints to return the same data. For example, if our backend has another endpoint that returns a list of friends, the same user object could come from two different API endpoints, maybe even using different levels of granularity. If the <code>UserRepository</code> were to return the response from the Webservice request as-is, without checking for consistency, our UIs could show confusing information because the version and format of data from the repository would depend on the endpoint most recently called.</p>
<p>For this reason, our <code>UserRepository</code> implementation saves web service responses into the database. Changes to the database then trigger callbacks on active LiveData objects. Using this model, the database serves as the single source of truth, and other parts of the app access it using our UserRepository. Regardless of whether you use a disk cache, we recommend that your repository designate a data source as the single source of truth for the rest of your app.</p>
<h3 id="Show-in-progress-operations"><a href="#Show-in-progress-operations" class="headerlink" title="Show in-progress operations"></a>Show in-progress operations</h3><p>TODO…..</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidArchitecture</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Fragments Overview</title>
    <url>/posts/3e88612c/</url>
    <content><![CDATA[<h1 id="Fragments-Overview"><a href="#Fragments-Overview" class="headerlink" title="Fragments Overview"></a>Fragments Overview</h1><p><a href="https://developer.android.com/guide/components/fragments" target="_blank" rel="noopener">Reference</a></p>
<p>A <a href="https://developer.android.com/reference/androidx/fragment/app/Fragment.html" target="_blank" rel="noopener">Fragment</a> represents a behavior or a portion of user interface in a <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentActivity.html" target="_blank" rel="noopener">FragmentActivity</a>. You can combine multiple fragments in a single activity to build a multi-pane UI and reuse a fragment in multiple activities. You can think of a fragment as a modular section of an activity, which has its own lifecycle, receives its own input events, and which you can add or remove while the activity is running (sort of like a “sub activity” that you can reuse in different activities).</p>
<p>A fragment must always be hosted in an activity and the fragment’s lifecycle is directly affected by the host activity’s lifecycle. For example, when the activity is paused, so are all fragments in it, and when the activity is destroyed, so are all fragments. However, while an activity is running(it is in the resumed <a href="https://developer.android.com/guide/components/activities.html#Lifecycle" target="_blank" rel="noopener">lifecycle state</a>), you can manipulate each fragment independently, such as add or remove them. When you perform such a fragment transaction, you can also add it to a back stack that’s managed by the activity-each back stack entry in the activity is a record of the fragment transaction that occured. The back stack allows the user to reverse a fragment transaction(navigate backwards), by pressing the Back button.</p>
<p>When you add a fragment as a part of your activity layout, it lives in a ViewGroup inside the activity’s view hierarchy and the fragment defines its own view layout. You can insert a fragment into your activity layout by declaring the fragment in the activity’s layout file, as a <code>&lt;fragment&gt;</code> element, or from your application code by adding it to an existing ViewGroup.</p>
<p>This document describes how to build your application to use fragments, including how fragments can maintain their state when added to the activity’s back stack, share events with the activity and other fragments in the activity, contribute to the activity’s app bar, and more.</p>
<p>For information about handling lifecycles, including guidance about best practices, see the follow resources:</p>
<ul>
<li><a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html" target="_blank" rel="noopener">Handling Lifecycles with Lifecycle-Aware Components</a></li>
<li><a href="https://developer.android.com/topic/libraries/architecture/guide.html" target="_blank" rel="noopener">Guide to App Architecture</a></li>
<li><a href="https://developer.android.com/guide/practices/tablets-and-handsets.html" target="_blank" rel="noopener">Supporting Tablets and Handsets</a></li>
</ul>
<h2 id="Design-Philosophy"><a href="#Design-Philosophy" class="headerlink" title="Design Philosophy"></a>Design Philosophy</h2><p>Android introduced fragments in Android 3.0(API level 11), primarily to support more dynamic and flexible UI designs on large screens, such as tablets. Because a tablet’s screen is much larger than that of a handset, there’s more room to combine and interchange UI components. Fragments allow such designs without the need for you to manage complex changes to the view hierarchy. By dividing the layout of an activity into fragments, you become able to modify the activity’s appearance at runtime and preserve those changes in a back stack that’s managed by the activity. They are now widely available through the <a href="https://developer.android.com/topic/libraries/support-library/packages.html#v4-fragment" target="_blank" rel="noopener">fragment support library</a>.</p>
<p>For example, a news application can use one fragment to show a list of articles on the left and another fragment to display an article on the right-both fragments appear in one activity, side by side, and each fragment has its own set of lifecycle callback methods and handle their own user input events. Thus, instead of using one activity to select an article and another activity to read the article, the user can select an article and read it all within the same activity, as illustrated in the tablet layout in figure 1.</p>
<p>You should design each fragment as a modular and reusable activity component. That is , because each fragment defines its own lifecycle callbacks, you can include one fragment in multiple activities, so you should design for reuse and avoid directly manipulating one fragment from another fragment. This is especially important because a modular fragment allows you to change your fragment combinations for different screen sizes.When designing your application to support both tablets and handsets, you can reuse your fragments in different layout configurations to optimize the user experience based on the available screen space. For example, on a handset, it mightly be necessary to separate fragments to provide a single-pane UI when more than one cannot fit within the same activity.</p>
<p>For example-to continue with the news applciation example-the application can embed two fragments in Activity A, when running on a tablet-sized device. However, on a handset-sized screen, there’s not enough room fro both fragments, so Activity A includes only the fragment for the list of the articles, and when the user selects an article, it starts Activity B, which includes the second fragment to read the article. Thus, the application supports both tablets and handsets by reusing fragments in different combinations, as illustrated in figure 1.</p>
<p>For more information about designing your application with different fragment combinations for different screen configurations, see the <a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="noopener">Screen Compatibility Overview</a></p>
<p><img src="https://developer.android.com/images/fundamentals/fragments.png" alt="Figure 1"></p>
<h2 id="Creating-a-Fragment"><a href="#Creating-a-Fragment" class="headerlink" title="Creating a Fragment"></a>Creating a Fragment</h2><p>To create a fragment, you must create a subclass of Fragment(or an existing subclass of it). The Fragment class has code that looks a lot like an Activity. It contains callback methods similar to an activity, such as <code>onCreate</code>, <code>onStart()</code>, <code>onPause</code>, and <code>onStop()</code>. In fact, if you’re converting an existing Android application to use fragments, you might simply move code from your activity’s callback methods into the respective callback methods of your fragment.</p>
<p>Usually, you should implement at least the following lifecycle methods:</p>
<ul>
<li><p>onCreate()</p>
<p>  The system calls this when creating the fragment. Within your implementation, you should initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.</p>
</li>
<li><p>onCreateView()</p>
<p>  The system calls this when it’s time for the fragment to draw its user interface for the first time. To draw a UI for your fragment, you must return a View from this method that is the root of your fragment’s layout. You can return null if the fragment does not provide a UI.</p>
</li>
<li><p>onPause()</p>
<p>  The system calls this method as the first indication that the user is leaving the fragment(though it doesn’t always mean the fragment is beging destroyed). This is usually where you should commit any changes that should be persisted beyond the current user session(because the user might not come back).</p>
</li>
</ul>
<p>Most applications should implement at least these three methods for every fragment, but there are several other callback methods you should also use to handle various stages of the fragment lifecycle. All the lifecycle callback methods are discussed in more detail in the section about <a href="https://developer.android.com/guide/components/fragments#Lifecycle" target="_blank" rel="noopener">Handling the Fragment Lifecycle</a>.</p>
<p>Note that the code implementing lifecycle actions of a dependent component should be placed in the component itself, rather than directly in the fragment callback implementations. See <a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html" target="_blank" rel="noopener">Handling Lifecycles with Lifecycle-Aware Components</a> to learn how to make your dependent components lifecycle-aware.</p>
<p>There are also a few subclasses that you might want to extend, instead of the base Fragment class:</p>
<ul>
<li><p>DialogFragment</p>
<p>  Displays a floating dialog. Using this class to create a dialog is a good alternative to using the dialog helper methods in the Activity class, because you can incorporate a fragment dialog into the back stack of fragments managed by the activity, allowing the user to return to a dismissed fragment.</p>
</li>
<li><p>ListFragment</p>
<p>  Displays a list of items that are managed by an adapter(such as a <code>SimpleCursorAdapter</code>), similar to <code>ListActivity</code>. It provides several methods for managing a list view, such as the <code>onListItemClick()</code> callback to handle click events. (Note that the prefered method for displaying a list is to use RecyclerView instead of ListView. In this case you would need to create a fragment that includes a <code>RecyclerView</code> in its layout. See <a href="https://developer.android.com/guide/topics/ui/layout/recyclerview.html" target="_blank" rel="noopener">Create a List with RecyclerView</a> to learn how.)</p>
</li>
<li><p>PreferenceFragmentCompat</p>
<p>  Displays a hierarchy of <code>Preference</code> objects as a list. This is used to <a href="https://developer.android.com/guide/topics/ui/settings.html" target="_blank" rel="noopener">create a settings screen</a> for your application.</p>
</li>
</ul>
<h3 id="Adding-a-user-interface"><a href="#Adding-a-user-interface" class="headerlink" title="Adding a user interface"></a>Adding a user interface</h3><p>A fragment is usually used as part of an activity’s user interface and contributes its own layout to the activity.</p>
<p>To provide a layout for a fragment, you must implement the <code>onCreateView()</code> callback method, which the Android system calls when it’s time for the fragment to draw its layout. Your implementation of this method must return a View that is the root of your fragment’s layout.</p>
<p>To return a layout from <code>onCreateView()</code>, you can inflate it from a <a href="https://developer.android.com/guide/topics/resources/layout-resource.html" target="_blank" rel="noopener">layout resource</a> define in XML. To help you do so, <code>onCreateView()</code> provides a <a href="https://developer.android.com/reference/android/view/LayoutInflater.html" target="_blank" rel="noopener">LayoutInflater</a> object.</p>
<p>For example, here’s a subclass of <code>Fragment</code> that loads a layout from the <code>example_fragment.xml</code> file:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.example_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>container</code> parameter passed to <code>onCreateView()</code> is the parent <code>ViewGroup</code>(from the activity’s layout) in which your fragment layout is inserted. The <code>savedInstanceState</code> parameter is a <a href="https://developer.android.com/reference/android/os/Bundle.html" target="_blank" rel="noopener">Bundle</a> that provides data about hte previous instance of the fragment, if the fragment is being resumed(restoring state is discussed more in the section about <a href="https://developer.android.com/guide/components/fragments#Lifecycle" target="_blank" rel="noopener">Handling the Fragment Lifecycle</a>).</p>
<p>The <a href="https://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int,%20android.view.ViewGroup,%20boolean)" target="_blank" rel="noopener">inflate()</a> method takes three arguments:</p>
<ul>
<li>The resource ID of the layout you want to inflate.</li>
<li>The <code>ViewGroup</code> to be the parent of the inflated layout. Passing the <code>container</code> is important in order for the system to apply layout parameters to the root view of the inflated layout, specified by the parent view in which it’s going.</li>
<li>A boolean indicating whether the inflated layout should be attached to the <code>ViewGroup</code>(the second parameter) during inflation. (In this case, this is false because the system is already inserting the inflated layout into the <code>container</code>-passing true would create a redundant view group in the final layout).</li>
</ul>
<p>Now you have seen how to create a fragment that provides a layout. Next, you need to add the fragment to your activity.</p>
<h3 id="Adding-a-fragment-to-an-activity"><a href="#Adding-a-fragment-to-an-activity" class="headerlink" title="Adding a fragment to an activity"></a>Adding a fragment to an activity</h3><p>Usually, a fragment contributes a portion of UI to the host activity, which is embedded as a part of the activity’s overall view hierarchy. There are two ways you can add a fragment to the activity layout:</p>
<ul>
<li><p>Declare the fragment inside the activity’s layout file.</p>
<p>  In this case, you can specify layout properties for the fragment as if it were a view. For example, here’s the layout file for an activity with two fragments:</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span> <span class="attr">android:name</span>=<span class="string">"com.example.news.ArticleListFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span> <span class="attr">android:name</span>=<span class="string">"com.example.news.ArticleReaderFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  The <code>android:name</code> attribute in the <code>&lt;fragment&gt;</code> specifies the <code>Fragment</code> class to instantiate in the layout.</p>
<p>  When the system creates this activity layout, it instantiates each fragment specified in the layout and calls the <code>onCreateView()</code> method for each one, to retrieve each fragment’s layout. The system inserts the <code>View</code> returned by the fragment directly in place of the <code>&lt;fragment&gt;</code> element.</p>
</li>
<li><p>Or， programmatically add the fragment to an existing <code>ViewGroup</code></p>
<p>  At any time while your activity is running, you can add fragments to your activity layout. You simply need to specify a <code>ViewGroup</code> in which to place the fragment.</p>
<p>  To make fragment transactions in your activity(such as add, remove, or replace a fragment), you must use APIs from <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentTransaction.html" target="_blank" rel="noopener">FragmentTransaction</a>. You can get an instance of <code>FragmentTransaction</code> from your <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentActivity.html" target="_blank" rel="noopener">FragmentActivity</a> like this:</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</span><br></pre></td></tr></table></figure>

<p>  You can then add a fragment using the <code>add()</code> method, specifying the fragment to add and the view in which to insert it. For example:</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExampleFragment fragment = <span class="keyword">new</span> ExampleFragment();</span><br><span class="line">fragmentTransaction.add(R.id.fragment_container, fragment);</span><br><span class="line">fragmentTransaction.commit();</span><br></pre></td></tr></table></figure>

<p>  The first argument passed to <code>add()</code> is the <code>ViewGroup</code> in which the fragment should be placed, specified by resource ID, and the second parameter is the fragment to add.</p>
<p>  Once you’ve made your changes with <code>FragmentTransaction</code>, you must call <code>commit()</code> for the changes to take effect.</p>
</li>
</ul>
<h2 id="Managing-Fragments"><a href="#Managing-Fragments" class="headerlink" title="Managing Fragments"></a>Managing Fragments</h2><p>To manage the fragments in your activity, you need to use <code>FragmentManager</code>. To get it, call <code>getSupportFragmentManager()</code> from your activity.</p>
<p>Some things that you can do with <code>FragmentManager</code> includes:</p>
<ul>
<li>Get fragments that exist in the activity, with <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentManager.html#findFragmentById(int)" target="_blank" rel="noopener">findFragmentById()</a>(fro fragments taht provide a UI in the activity layout) or <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentManager.html#findFragmentByTag(java.lang.String)" target="_blank" rel="noopener">findFragmentByTag()</a> (for fragments that do or don’t provide a UI).</li>
<li>Pop fragments off the back stack, with <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentManager.html#popBackStack()" target="_blank" rel="noopener">popBackStack()</a> (simulating a Back command by the user).</li>
<li>Register a listener for changes to the back stack, with <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentManager.html#addOnBackStackChangedListener(android.support.v4.app.FragmentManager.OnBackStackChangedListener)" target="_blank" rel="noopener">addOnBackStackChangedListener()</a>.</li>
</ul>
<p>For more information about these methods and others, refer to the <code>FragmentManager</code> class documentation.</p>
<p>As demonstrated in the previous section, you can also use <code>FragmentManager</code> to open a <code>FragmentTransaction</code>, which allows you to perform transactions, such as add and remove fragments.</p>
<h2 id="Performing-Fragment-Transactions"><a href="#Performing-Fragment-Transactions" class="headerlink" title="Performing Fragment Transactions"></a>Performing Fragment Transactions</h2><p>A great feature about using fragments in your activity is the ability to add, remove, replace, and perform other actions with them, in response to user interaction. Each set of changes that you commit to the activity is called a transaction and you can perform one using APIs in <code>FragmentTransaction</code>. You can also save each transaction to a back stack managed by the activity, allowing the user to navigate backward through the fragment changes(similar to navigating backward through activities).</p>
<p>You can acquire an instance of <code>FragmentTransaction</code> from the <code>FragmentManager</code> like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</span><br></pre></td></tr></table></figure>

<p>Each transaction is a set of changes that you want to perfrom at the same time. You can set up all the changes you want to perform for a given transaction using methods such <code>add()</code>, <code>remove()</code>, and <code>replace()</code>. Then, to apply the transaction to the activity, you must call <code>commit()</code>.</p>
<p>Before you call <code>commit()</code>, however, you might want to call <code>addToBackStack()</code>, in order to add the transaction to a back stack of fragment transactions. This back stack is managed by the activity and allows the user to return to the  previous fragment state, by pressing the Back button.</p>
<p>For example, here’s how you can replace one fragment with another, and preserve the previous state in the back stack:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create new fragment and transaction</span></span><br><span class="line">Fragment newFragment = <span class="keyword">new</span> ExampleFragment();</span><br><span class="line">FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace whatever is in the fragment_container view with this fragment,</span></span><br><span class="line"><span class="comment">// and add the transaction to the back stack</span></span><br><span class="line">transaction.replace(R.id.fragment_container, newFragment);</span><br><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Commit the transaction</span></span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure>

<p>In this example, <code>newFragment</code> replaces whatever fragment (if any) is currently in the layout container identified by the <code>R.id.fragment_container</code> ID. By calling <code>addToBackStack()</code>, the replace transaction is saved to the back stack so the user can reserve the transaction and bring back the previous fragment by pressing the Back button.</p>
<p><code>FragmentActivity</code>  then automatically retrieve fragments from the back stack via <code>onBackPressed()</code>.</p>
<p>If you add multiple changes to the transaction-such as another <code>add()</code> or <code>remove()</code>-and call <code>addToBackStack()</code>, then all changes applied before you call <code>commit</code> are added to the back stack as a single transaction and the Back button reverse them all together.</p>
<p>The order in which you add changes to a <code>FragmentTransaction</code> doesn’t matter, except:</p>
<ul>
<li>You must call <code>commit()</code> last</li>
<li>If you’re adding multiple fragments to the same container, then the order in which you add them determines the order they appear in the view hierarchy.</li>
</ul>
<p>If you don’t call <code>addToBackStack()</code> when you perfrom a transaction that removes a fragment, then that fragment is destroyed when the transaction is committed and the user cannot navigate back to it. Whereas, if you do call <code>addToBackStack()</code> when removing a fragment, then the fragment is stopped and is later resumed if the user navigates back.</p>
<p>Calling <code>commit()</code> doesn’t perform the transaction immediately. Rather, it schedules it to run on the activity’s UI thread(the main thread) as soon as the thread is able to do so. If necessary, however, you may call <a href>executePendingTransactions()</a> from your UI thread to immediately execute transactions submitted by <code>commit()</code>. Doing so is usually not necessary unless the transaction is a dependency for jobs in other thread.</p>
<h2 id="Communicating-with-the-Activity"><a href="#Communicating-with-the-Activity" class="headerlink" title="Communicating with the Activity"></a>Communicating with the Activity</h2><p>Althought a <code>Fragment</code> is implemented as an object that’s independent from a <code>FragmentActivity</code> and can be used inside multiple activities, a given instance of a fragment is directly tied to the activity that hosts it.</p>
<p>Specifically, the fragment can access the <code>FragmentActivity</code> instance with the <code>getActivity()</code> and easily perform tasks such as find a view in the activity layout:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">View listView = getActivity().findViewById(R.id.list);</span><br></pre></td></tr></table></figure>

<p>Likewise, your activity can call methods in the fragment by acquiring a reference to the <code>Fragment</code> from <code>FragmentManager</code>, using <code>findFragmentById()</code> or <code>findFragmentByTag()</code>. For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExampleFragment fragment = (ExampleFragment) getSupportFragmentManager.findFragmentById(R.id.example_fragment);</span><br></pre></td></tr></table></figure>

<h3 id="Creating-event-callbacks-to-the-activity"><a href="#Creating-event-callbacks-to-the-activity" class="headerlink" title="Creating event callbacks to the activity"></a>Creating event callbacks to the activity</h3><p>In some cases, you might need a fragment to share events or data with the activity and/or the other fragments hosted by the activity. To share data, create a shared ViewModel, as outlined in the Share data between fragments section in the <a href>ViewModel guide</a>. If you need to propagate events that cannot be handled with a ViewModel, you can instead define a callback interface inside the fragment and require that the host activity implement it. When the activity receives a callback through the interface, it can share the information with other fragments in the layout as necessary.</p>
<p>For example, if a news application has two fragments in an activity-one to show a list of articles(fragment A) and another to display an article (fragment B)- then fragment A must tell the activity when a list item is selected so that it can tell fragment B to display the article. In this case, the <code>OnArticleSelectedListener</code> interface is declared inside fragment A:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentA</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Container Activity must implement this interface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnArticleSelectedListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onArticleSelected</span><span class="params">(Uri articleUri)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then the activity that hosts the fragment implements the <code>OnArticleSelectedListener</code> interface and overrides <code>onArticleSelected()</code> to notify fragment B of the event from fragment A. To ensure that the host activity implements this interface, fragment A’s <code>onAttach()</code> callback method (which the system calls when adding the fragment to the activity) instantiates an instance of <code>OnArticleSelectedListener</code> by casting the <code>Activity</code> that is passed into <code>onAttach()</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentA</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> </span>&#123;</span><br><span class="line">    OnArticleSelectedListener listener;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listener = (OnArticleSelectedListener) context;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(context.toString() + <span class="string">" must implement OnArticleSelectedListener"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If the activity hasn’t implemented the interface, then the fragment throws a <code>ClassCastException</code>. On Success, the <code>mListener</code> member holds a reference to activity’s implementation of <code>OnArticleSelectedListener</code>, so that fragment A can share events with the activity by calling methods defined by the <code>OnArticleSelectedListener</code> interface. For example, if fragment A is an extension of <code>ListFragment</code>, each time the user clicks a list item, the system calls <code>onListItemClick()</code> in the fragment, which then calls <code>onArticleSelected()</code> to share the event with the activity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentA</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> </span>&#123;</span><br><span class="line">    OnArticleSelectedListener listener;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView l, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Append the clicked item's row ID with the content provider Uri</span></span><br><span class="line">        Uri noteUri = ContentUris.withAppendedId(ArticleColumns.CONTENT_URI, id);</span><br><span class="line">        <span class="comment">// Send the event and Uri to the host activity</span></span><br><span class="line">        listener.onArticleSelected(noteUri);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>id</code> parameter passed to <code>onListItemClick()</code> is the row ID of the clicked item, which the activity (or other fragment) uses to fetch the article from the application’s <code>ContentProvider</code>.</p>
<p>More information about using a content provider is available in the <code>ContentProvider</code> document.</p>
<h3 id="Adding-items-to-the-App-Bar"><a href="#Adding-items-to-the-App-Bar" class="headerlink" title="Adding items to the App Bar"></a>Adding items to the App Bar</h3><p>Your fragments can contribute menu items to the activity’s <a href="https://developer.android.com/guide/topics/ui/menus.html#options-menu" target="_blank" rel="noopener">Options Menu</a>(and, consequently, the <a href="https://developer.android.com/training/appbar/index.html" target="_blank" rel="noopener">app bar</a>) by implementing <code>onCreateOptionsMenu()</code>. In order for this method to receive calls, however, you must call <code>setHasOptionMenu()</code> during <code>onCreate()</code>, to indicate that the fragment would like to add items to the Options Menu. Otherwise, the fragment doesn’t receive a call to <code>onCreateOptionsMenu()</code>.</p>
<p>Any items that you then add to the Options Menu from the fragment are appended to the existing menu items. The fragment also receives callbacks to <code>onOptionsItemSelected()</code> when a menu item is selected.</p>
<p>You can also register a view in your fragment layout to provide a context menu by calling <code>registerForContextMenu()</code>. When the user opens the context menu, the fragment receives a call to <code>onCreateContextMenu()</code>. When the user selects an item, the fragment receies a call to <code>onContextItemSelected()</code>.</p>
<p>For more information about menus, see the <a href="https://developer.android.com/guide/topics/ui/menus.html" target="_blank" rel="noopener">Menus</a> developer guide and the <a href="https://developer.android.com/training/appbar/index.html" target="_blank" rel="noopener">App Bar</a> training class.</p>
<h2 id="Handling-the-Fragment-Lifecycle"><a href="#Handling-the-Fragment-Lifecycle" class="headerlink" title="Handling the Fragment Lifecycle"></a>Handling the Fragment Lifecycle</h2><p>Managing the lifecycle of a fragment is a lot like managing the lifecycle of an activity. Like an activity, a fragment can exist in three states: </p>
<ul>
<li><p>Resumed</p>
<p>  The fragment is visible in the running activity.</p>
</li>
<li><p>Paused</p>
<p>  Another activity is in the foreground and has focus, but the activity in which this fragment lives is still visible(the foreground activity is partially transparent or doesn’t cover the entire screen.)</p>
</li>
<li><p>Stopped</p>
<p>  The fragment isn’t visible. Either the host activity has been stopped or the fragment has been removed from the activity but added to the back stack. A stopped fragment is still alive(all state and member information is retained by the system). However, it is no longer visible to the user and is killed if the activity is killed.</p>
<p>  Also like an activity, you can preserve the UI state of a fragment across configuration changes and process death using a combination of <a href="https://developer.android.com/reference/androidx/fragment/app/Fragment.html#onSaveInstanceState(android.os.Bundle)" target="_blank" rel="noopener">onSaveInstanceState(Bundle)</a>, <a href="https://developer.android.com/reference/androidx/lifecycle/ViewModel.html" target="_blank" rel="noopener">ViewModel</a>, and persistent local storage. To learn more about preserving UI state, see <a href="https://developer.android.com/topic/libraries/architecture/saving-states.html" target="_blank" rel="noopener">Saving UI States</a>.</p>
<p>  The most significant difference in lifecycle between an activity and a fragment is how one is stored in its respective back stack. An activity is placed into a back stac of activities that’s managed by the system when it’s stopped, by default(so that the user can navigate back to it with the Back button, as discussed in <a href="https://developer.android.com/guide/components/tasks-and-back-stack.html" target="_blank" rel="noopener">Task and Back Stack</a>). However, a fragment is placed into a back stack managed by the host activity only when you explicitly request that the instance be saved by calling <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentTransaction.html#addToBackStack(java.lang.String)" target="_blank" rel="noopener">addToBackStack()</a> during a transaction that removes the fragment.</p>
<p>  Otherwise, managing the fragment lifecycle is very similar to managing the activity lifecycle; the same practices apply. See <a href="https://developer.android.com/guide/components/activities/activity-lifecycle.html" target="_blank" rel="noopener">The Activity Lifecycle</a> guide and <a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html" target="_blank" rel="noopener">Handling Lifecycles with Lifecycle-Aware Components</a> to learn more about the activity lifecycle and practices for managing it.</p>
</li>
</ul>
<h3 id="Coordinating-with-the-activity-lifecycle"><a href="#Coordinating-with-the-activity-lifecycle" class="headerlink" title="Coordinating with the activity lifecycle"></a>Coordinating with the activity lifecycle</h3><p>The lifecycle of the activity in which the fragment lives directly affects the lifecycle of the fragment, such that each lifecycle callback for the activity results in a similar callback for each fragment. For example, when the activity receives <code>onPause()</code>, each fragment in the activity receives <code>onPause()</code>.</p>
<p>Fragments have a few extra lifecycle callbacks, however, that handle unique interaction with the activity in order to perform actions such as build and destroy the fragment’s UI. These additional callback methods are:</p>
<ul>
<li><p>onAttach()</p>
<p>  Called when the fragment has been associated with the activity(the <code>Activity</code> is passed in here).</p>
</li>
<li><p>onCreateView()</p>
<p>  Called to create the view hierarchy associated with the fragment.</p>
</li>
<li><p>onActivityCreated()</p>
<p>  Called when the activity’s <code>onCreate()</code> method has returned</p>
</li>
<li><p>onDestroyView()</p>
<p>  Called when the view hierarchy associated with the fragment is being removed</p>
</li>
<li><p>onDetach()</p>
<p>  Called when the fragment is being disassociated from the activity.</p>
</li>
</ul>
<p>The flow of a fragment’s lifecycle, as it is affect by its host activity, is illustrated by figure 3. In this figure, you can see how each successive state of the activity determines which callback methods a fragment may receive. For example, when the activity has received its <code>onCreate()</code> callback, a fragment in the activity receives no more than the <code>onActivityCreated()</code> callback.</p>
<p>Once the activity reaches the resume state, you can freely add and remove fragments to the activity. Thus, only while the activity is in the resumed state can the lifecycle of a fragment change independently.</p>
<p>However, when the activity leaves the resumed state, the fragment again is pushed through its lifecycle by the activity.</p>
<p>The effect of the activity lifecycle on the fragment lifecycle.</p>
<p><img src="https://developer.android.com/images/activity_fragment_lifecycle.png" alt="Figure 3. The effect of the activity lifecycle on the fragment lifecycle."></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>To bring everything discussed in this document together, here’s an example of an activity using two fragments to create a two-pane layout. The activity below includes one fragment to show a list of Shakespeare play titles and another to show a summary of the play when selected from the list. It also demonstrates how to provide different configurations of the fragments, based on the screen configuration.</p>
<p>The main activity applies a layout in the usual way, during <code>onCreate()</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.fragment_layout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The layout applied is <code>fragment_layout.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span> <span class="attr">class</span>=<span class="string">"com.example.android.apis.app.FragmentLayout$TitlesFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/titles"</span> <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0px"</span> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">android:id</span>=<span class="string">"@+id/details"</span> <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0px"</span> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?android:attr/detailsElementBackground"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Using this layout, the system instantiates the TitlesFragment (which lists the play titles) as soon as the activity loads the layout, while the FrameLayout (where the fragment for showing the play summary appears) consumes space on the right side of the screen, but remains empty at first. As you’ll see below, it’s not until the user selects an item from the list that a fragment is placed into the FrameLayout.</p>
<p>However, not all screen configurations are wide enough to show both the list of plays and the summary, side by side. So, the layout above is used only for the landscape screen configuration, by saving it at <code>res/layout-land/fragment_layout.xml</code>.</p>
<p>Thus, when the screen is in portrait orientation, the system applies the following layout, which is saved at <code>res/layout/fragment_layout.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span> <span class="attr">class</span>=<span class="string">"com.example.android.apis.app.FragmentLayout$TitlesFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/titles"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This layout includes only TitlesFragment. This means that, when the device is in portrait orientation, only the list of play titles is visible. So, when the user clicks a list item in this configuration, the application starts a new activity to show the summary, instead of loading a second fragment.</p>
<p>Next, you can see how this is accomplished in the fragment classes. First is TitlesFragment, which shows the list of Shakespeare play titles. This fragment extends ListFragment and relies on it to handle most of the list view work.</p>
<p>As you inspect this code, notice that there are two possible behaviors when the user clicks a list item: depending on which of the two layouts is active, it can either create and display a new fragment to show the details in the same activity (adding the fragment to the FrameLayout), or start a new activity (where the fragment can be shown).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TitlesFragment</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> dualPane;</span><br><span class="line">    <span class="keyword">int</span> curCheckPosition = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Populate list with our static array of titles.</span></span><br><span class="line">        setListAdapter(<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(getActivity(),</span><br><span class="line">                android.R.layout.simple_list_item_activated_1, Shakespeare.TITLES));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we have a frame in which to embed the details</span></span><br><span class="line">        <span class="comment">// fragment directly in the containing UI.</span></span><br><span class="line">        View detailsFrame = getActivity().findViewById(R.id.details);</span><br><span class="line">        dualPane = detailsFrame != <span class="keyword">null</span> &amp;&amp; detailsFrame.getVisibility() == View.VISIBLE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Restore last state for checked position.</span></span><br><span class="line">            curCheckPosition = savedInstanceState.getInt(<span class="string">"curChoice"</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dualPane) &#123;</span><br><span class="line">            <span class="comment">// In dual-pane mode, the list view highlights the selected item.</span></span><br><span class="line">            getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);</span><br><span class="line">            <span class="comment">// Make sure our UI is in the correct state.</span></span><br><span class="line">            showDetails(curCheckPosition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">        outState.putInt(<span class="string">"curChoice"</span>, curCheckPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView l, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        showDetails(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helper function to show the details of a selected item, either by</span></span><br><span class="line"><span class="comment">     * displaying a fragment in-place in the current UI, or starting a</span></span><br><span class="line"><span class="comment">     * whole new activity in which it is displayed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showDetails</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        curCheckPosition = index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dualPane) &#123;</span><br><span class="line">            <span class="comment">// We can display everything in-place with fragments, so update</span></span><br><span class="line">            <span class="comment">// the list to highlight the selected item and show the data.</span></span><br><span class="line">            getListView().setItemChecked(index, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check what fragment is currently shown, replace if needed.</span></span><br><span class="line">            DetailsFragment details = (DetailsFragment)</span><br><span class="line">                    getSupportFragmentManager().findFragmentById(R.id.details);</span><br><span class="line">            <span class="keyword">if</span> (details == <span class="keyword">null</span> || details.getShownIndex() != index) &#123;</span><br><span class="line">                <span class="comment">// Make new fragment to show this selection.</span></span><br><span class="line">                details = DetailsFragment.newInstance(index);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Execute a transaction, replacing any existing fragment</span></span><br><span class="line">                <span class="comment">// with this one inside the frame.</span></span><br><span class="line">                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();</span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                    ft.replace(R.id.details, details);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ft.replace(R.id.a_item, details);</span><br><span class="line">                &#125;</span><br><span class="line">                ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);</span><br><span class="line">                ft.commit();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Otherwise we need to launch a new activity to display</span></span><br><span class="line">            <span class="comment">// the dialog fragment with selected text.</span></span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.setClass(getActivity(), DetailsActivity.class);</span><br><span class="line">            intent.putExtra(<span class="string">"index"</span>, index);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The second fragment, DetailsFragment shows the play summary for the item selected from the list from TitlesFragment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailsFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new instance of DetailsFragment, initialized to</span></span><br><span class="line"><span class="comment">     * show the text at 'index'.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DetailsFragment <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        DetailsFragment f = <span class="keyword">new</span> DetailsFragment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Supply index input as an argument.</span></span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putInt(<span class="string">"index"</span>, index);</span><br><span class="line">        f.setArguments(args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getShownIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getArguments().getInt(<span class="string">"index"</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">            Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (container == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We have different layouts, and in one of them this</span></span><br><span class="line">            <span class="comment">// fragment's containing frame doesn't exist. The fragment</span></span><br><span class="line">            <span class="comment">// may still be created from its saved state, but there is</span></span><br><span class="line">            <span class="comment">// no reason to try to create its view hierarchy because it</span></span><br><span class="line">            <span class="comment">// isn't displayed. Note this isn't needed -- we could just</span></span><br><span class="line">            <span class="comment">// run the code below, where we would create and return the</span></span><br><span class="line">            <span class="comment">// view hierarchy; it would just never be used.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ScrollView scroller = <span class="keyword">new</span> ScrollView(getActivity());</span><br><span class="line">        TextView text = <span class="keyword">new</span> TextView(getActivity());</span><br><span class="line">        <span class="keyword">int</span> padding = (<span class="keyword">int</span>)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,</span><br><span class="line">                <span class="number">4</span>, getActivity().getResources().getDisplayMetrics());</span><br><span class="line">        text.setPadding(padding, padding, padding, padding);</span><br><span class="line">        scroller.addView(text);</span><br><span class="line">        text.setText(Shakespeare.DIALOGUE[getShownIndex()]);</span><br><span class="line">        <span class="keyword">return</span> scroller;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Recall from the TitlesFragment class, that, if the user clicks a list item and the current layout does not include the R.id.details view (which is where the DetailsFragment belongs), then the application starts the DetailsActivity activity to display the content of the item.</p>
<p>Here is the DetailsActivity, which simply embeds the DetailsFragment to display the selected play summary when the screen is in portrait orientation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailsActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getResources().getConfiguration().orientation</span><br><span class="line">                == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">            <span class="comment">// If the screen is now in landscape mode, we can show the</span></span><br><span class="line">            <span class="comment">// dialog in-line with the list so we don't need this activity.</span></span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// During initial setup, plug in the details fragment.</span></span><br><span class="line">            DetailsFragment details = <span class="keyword">new</span> DetailsFragment();</span><br><span class="line">            details.setArguments(getIntent().getExtras());</span><br><span class="line">            getSupportFragmentManager().beginTransaction().add(android.R.id.content, details).commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notice that this activity finishes itself if the configuration is landscape, so that the main activity can take over and display the DetailsFragment alongside the TitlesFragment. This can happen if the user begins the DetailsActivity while in portrait orientation, but then rotates to landscape (which restarts the current activity).</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidFragment</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Google Protocol Buffer Language Guide</title>
    <url>/posts/9f909ce9/</url>
    <content><![CDATA[<h1 id="Language-Guide"><a href="#Language-Guide" class="headerlink" title="Language Guide"></a>Language Guide</h1><p>This guide describes how to use the protocol buffer language to structure your protocol buffer data, including <code>.proto</code> file syntax and how to generate data access classes from your <code>.proto</code> files. It covers the <code>proto2</code> version of the protocol buffers language: for information on the newer <code>proto3</code> syntax, see the <a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">Proto3 Language Guide</a>.</p>
<p>This is a reference guide - for a step by step example that uses many of the featuers described in this document, see the <a href="https://developers.google.com/protocol-buffers/docs/tutorials" target="_blank" rel="noopener">tutorial</a> for your chosen language.</p>
<h2 id="Define-A-Message-Type"><a href="#Define-A-Message-Type" class="headerlink" title="Define A Message Type"></a>Define A Message Type</h2><p>First let’s look at a very simple example. Let’s say you want to define a search request message format, where each search request has a query string, the particular page of results you are interested in, and a number of results per page. Here’s the <code>.proto</code> file you use to define the message type.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">message SearchRequest &#123;</span><br><span class="line">    required string query = 1;</span><br><span class="line">    optional int32 page_number = 2;</span><br><span class="line">    optional int32 result_per_page = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>SearchResult</code> message definition specifies three fields(name/value pairs), one for each piece of data that you want to include in this type of message. Each field has a name and a type.</p>
<h3 id="Specifying-Field-Types"><a href="#Specifying-Field-Types" class="headerlink" title="Specifying Field Types"></a>Specifying Field Types</h3><p>In the above example, all the field are <a href="https://developers.google.com/protocol-buffers/docs/proto#scalar" target="_blank" rel="noopener">scalar types</a>: two integers(<code>page_number</code> and <code>result_per_page</code>) and a string (<code>query</code>). However, you can also specify composite types for your fields ,including <a href="https://developers.google.com/protocol-buffers/docs/proto#enum" target="_blank" rel="noopener">enumerations</a> and other message types.</p>
<h3 id="Assigning-Field-Numbers"><a href="#Assigning-Field-Numbers" class="headerlink" title="Assigning Field Numbers"></a>Assigning Field Numbers</h3><p>As you can see, each field in the message definition has <code>unique number</code>. These numbers are used to identify your fields in the <a href>message binary format</a>, and should not be changed once your message type is in use. Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field’s type(you can find out more about this in <a href="https://developers.google.com/protocol-buffers/docs/encoding.html#structure" target="_blank" rel="noopener">Protocol Buffer Encoding</a>). TODOOOOOOO…</p>
]]></content>
      <tags>
        <tag>AndroidCommunication</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Google Protocol Buffers</title>
    <url>/posts/cb9fd130/</url>
    <content><![CDATA[<h1 id="Developer-Guide"><a href="#Developer-Guide" class="headerlink" title="Developer Guide"></a>Developer Guide</h1><p>Welcome to the developer documentation for protocol buffers - a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more.</p>
<p>This documentation is aimed at Java, C++, or Python developers who want to use protocol buffers in their applications. This overview introduces protocol buffers and tells you what you need to do to get started - you can then go on to follow the <a href="https://developers.google.com/protocol-buffers/docs/tutorials" target="_blank" rel="noopener">tutorial</a> or delve deeper into <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener">protocol buffer encoding</a>. API <a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">reference documentation</a> is also provided for all three languages, as well as <a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="noopener">language</a> and <a href="https://developers.google.com/protocol-buffers/docs/style" target="_blank" rel="noopener">style</a> guides for writing <code>.proto</code> files.</p>
<h2 id="What-are-protocol-buffers"><a href="#What-are-protocol-buffers" class="headerlink" title="What are protocol buffers"></a>What are protocol buffers</h2><p>Protocol buffers are a flexible, efficient, automated mechanism for serializing structed data - think XML, but smaller, faster, and simpler. You define how you want your data to be structed once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the “old” format.</p>
<h2 id="How-do-they-work"><a href="#How-do-they-work" class="headerlink" title="How do they work?"></a>How do they work?</h2><p>You specify how you want the information you’re serializing to be structured by defining protocol buffer message types in <code>.proto</code> files. Each protocol buffer message is a small logical record of information, containing a series of name-value pairs. Here’s a very basic example of a <code>.proto</code> file that defines a message containing information about a person:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">message Person &#123;</span><br><span class="line">    required string name = 1;</span><br><span class="line">    required int32 id = 2;</span><br><span class="line">    optional string email = 3;</span><br><span class="line"></span><br><span class="line">    enum PhoneType &#123;</span><br><span class="line">        MOBILE = 0;</span><br><span class="line">        HOME = 1;</span><br><span class="line">        WORK = 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message PhoneNumber &#123;</span><br><span class="line">        required string number = 1;</span><br><span class="line">        optional PhoneType type = 2 [default = HOME];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeated PhoneNumber phone = 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As you can see, the message format is simple - each message type has one or more uniquely numbered fields, and each field has a name and a value type, where value types can be numbers(integer or floating-point), booleans, strings, raw bytes, or even(as in the example above) other protocol buffer message types, allowing you to structure your data hierarchically. You can speify optional field, <a href="https://developers.google.com/protocol-buffers/docs/proto#required_warning" target="_blank" rel="noopener">required fields</a>, and repeated fields. You can find more information about writing <code>.proto</code> files in the <a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="noopener">Protocol Buffer Language Guide</a>.</p>
<p>Once you’ve defined your messages, you run the protocol buffer compiler for your application’s language to your <code>.proto</code> file to generate data access cleasses. These provide simple accessors for each field(like <code>name()</code> and <code>set_name()</code>) as well as methods to serialize/parse the whole structure to/from raw bytes - so, for instance, if your chosen language is C++, running the compiler on the above example will generate a class called <code>Person</code>. You can then use this class in your application to populate, serialize, and retrieve <code>Person</code> protocol buffer messages. You might then write some code like this: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Person person;</span><br><span class="line">person.set_name("John Doe");</span><br><span class="line">person.set_id(1234);</span><br><span class="line">person.set_email("jdoe@exmaple.com")</span><br><span class="line">fstream output("myfile", ios::out | ios::binary);</span><br><span class="line">person.SerializeToOstream(&amp;output);</span><br></pre></td></tr></table></figure>

<p>Then later on, you could read your message back in :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fstream input("myfile", ios::in | ios::binary);</span><br><span class="line">Person person;</span><br><span class="line">person.ParseFromIstream(&amp;input);</span><br><span class="line">cout &lt;&lt; "Name: " &lt;&lt; person.name() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; "E-mail: " &lt;&lt; person.email() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>You can add new fields to your message formats without breaking backwards-compatibility; old binaries simply ignore the new field when parsing. So if you have a communications protocol that uses protocol buffers as its data format, you can extend your protocol without having worry about breaking existing code.</p>
<p>You’ll find a complete reference for using generated protocol buffer code in the <a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">API Reference section</a>, and you can find out more about how protocol buffer messages are encoded in <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener">Protocol Buffer Encoding</a>.</p>
<h2 id="Why-not-just-use-XML"><a href="#Why-not-just-use-XML" class="headerlink" title="Why not just use XML"></a>Why not just use XML</h2><p>Protocol buffers have many advantages over XML for serializing structureed data. Protocol buffers:</p>
<ul>
<li>are simpler</li>
<li>are 3 to 10 times smaller</li>
<li>are 20 to 100 times faster</li>
<li>are less ambiguous</li>
<li>generate data access classes that are easier to use programmatically</li>
</ul>
<p>For example, let’s say you want to model a <code>person</code> with a <code>name</code> and an <code>email</code>. In XML, you need to do: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;person&gt;</span><br><span class="line">    &lt;name&gt; John Doe &lt;/name&gt;</span><br><span class="line">    &lt;email&gt;jdoe@example.com&lt;/email&gt;</span><br><span class="line">&lt;/person&gt;</span><br></pre></td></tr></table></figure>

<p>while the corresponding protocol buffer message (in protocol buffer <a href="https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.text_format" target="_blank" rel="noopener">text format</a>) is :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Textual representation of a protocol buffer.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is *not* the binary format used on the wire.</span></span><br><span class="line">person &#123;</span><br><span class="line">    name: "John Doe"</span><br><span class="line">    email: "jode@example.com"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When this message is encoded to the protocol buffer <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener">binary format</a>(the text format above is just a convenient human-readable representation for debugging and editing), it would probably be 28 bytes long and take around 100-200 nanoseconds to parse. The XML version is at least 69 bytes if you remove whitespace, and would take around 5000-10000 nanoseconds to parse.</p>
<p>Also, manipulating a protocol buffer is much easier:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; "Name: " &lt;&lt; person.name() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; "E-mail: " &lt;&lt; person.email() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>whereas with XML you would have to do something like:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    cout &lt;&lt; "Name: "</span><br><span class="line">     &lt;&lt; person.getElementsByTagName("name")-&gt;item(0)-&gt;innerText()</span><br><span class="line">     &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; "E-mail: "</span><br><span class="line">     &lt;&lt; person.getElementsByTagName("email")-&gt;item(0)-&gt;innerText()</span><br><span class="line">     &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>However, protocol buffers are not always a better solution than XML - for instance, protobufs would not be a good way to model a text-based document with markup(e.g HTML) , since you cannot easily interleave structure with text. In addition, XML is human-readable and human-editable; protocol buffers, at least in their native format, are not. XML is also -to some extent - self-describing. A protocol buffer is only meaningful if you have the message definition(the <code>.proto</code> file).</p>
<h2 id="Sounds-like-the-solution-for-me-How-do-I-get-started"><a href="#Sounds-like-the-solution-for-me-How-do-I-get-started" class="headerlink" title="Sounds like the solution for me! How do I get started?"></a>Sounds like the solution for me! How do I get started?</h2><p><a href="https://developers.google.com/protocol-buffers/docs/downloads.html" target="_blank" rel="noopener">Download the package</a> - this contains the complete source code for the Java, Python, and C++ protocol buffer compilers, as well as the classes you need for I/O and testing. To build and install your compiler, follow the instructions in the README.</p>
<p>Once you’re all set, try following the <a href="https://developers.google.com/protocol-buffers/docs/tutorials" target="_blank" rel="noopener">tutorial</a> for your chosen language - this will step you through creating a simple appliation that uses protocol buffers.</p>
<h2 id="Introducing-proto3"><a href="#Introducing-proto3" class="headerlink" title="Introducing proto3"></a>Introducing proto3</h2><p>Our most recent version 3 release introduces a new language version - Protocol Buffers language version 3(aka proto3), as well as some new featuers in our existing language version(aka proto2). Proto3 simplifies the protocol buffer language, both for ease of use and to make it available in a wider range of programming language: our current release lets you generate protocol buffer code in Java, C++, Python, Java Lite, Ruby, Javascript, Object-C, and C#. In addition you can generate proto3 code for Go using the latest Go protoc plugin, available from the <a href="https://github.com/golang/protobuf" target="_blank" rel="noopener">golang/protobuf</a> Github repository. More language are in the pipeline.</p>
<p>Note that the two language version APIs are not completely compatible. To avoid inconvenience to existing users, we will continue to support the previous language version in new protocol buffers releases.</p>
<p>You can see the major differences from the current default version in the release notes and learn about proto3 syntax in the <a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">Proto3 Language Guide</a>. Full documentation for proto3 is coming soon!</p>
<p>(If the names proto2 and proto3 seem a little confusing, it’s because when we originally open-sourced protocol buffers it was actually Google’s second version of the language – also known as proto2. This is also why our open source version number started from v2.0.0).</p>
<h2 id="A-bit-of-history"><a href="#A-bit-of-history" class="headerlink" title="A bit of history"></a>A bit of history</h2><p>Protocol buffers were initially developed at Google to deal with an index server request/response protocol. Prior to protocol buffers, there was a format for requests and responses that used hand marshalling/unmarshalling of requests and responses, and that supported a number of versions of the protocol. This resulted in some very ugly code, like:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> if (version == 3) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; else if (version &gt; 4) &#123;</span><br><span class="line">    if (version == 5) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Explicitly formatted protocols also compilcated the rollout of new protocol versions, because developers had to make sure that all servers between the originator of the request and the actual server handling the request understood the new protocol before they could flip a switch to start using the new protocol.</p>
<p>Protocol buffers were designed to solve many of these problems:</p>
<ul>
<li>New fields could be easily introduced, and intermediate servers that didn’t need to inspect the data could simply parse it and pass through the data without needing to know about all the fields.</li>
<li>Formats were more self-describing, and could be dealt with from a variety of languages (C++, Java, etc.)</li>
</ul>
<p>However, users still needed to hand-write their own parsing code.</p>
<p>As the system evolved, it acquired a number of other features and uses: </p>
<ul>
<li>Automatically-generated serialization and deserialization code avoided the need for hand parsing.</li>
<li>In addition to being used for short-lived RPC (Remote Procedure Call) requests, people started to use protocol buffers as a handy self-describing format for storing data persistently (for example, in Bigtable).</li>
<li>Server RPC interfaces started to be declared as part of protocol files, with the protocol compiler generating stub classes that users could override with actual implementations of the server’s interface.</li>
</ul>
<p>Protocol buffers are now Google’s lingua franca for data – at time of writing, there are 306,747 different message types defined in the Google code tree across 348,952 .proto files. They’re used both in RPC systems and for persistent storage of data in a variety of storage systems.</p>
]]></content>
      <tags>
        <tag>AndroidCommunication</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-NDK遇到的坑</title>
    <url>/posts/b4be5f5e/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/b4431ac22ec2" target="_blank" rel="noopener">https://www.jianshu.com/p/b4431ac22ec2</a><br><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html</a><br><a href="https://www.cnblogs.com/aiguozhe/p/5355211.html" target="_blank" rel="noopener">https://www.cnblogs.com/aiguozhe/p/5355211.html</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"Store"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会去寻找<code>libs/armeabiXX/下的libStore.so</code>的库<br>而这个库的命名是在<code>Android.mk</code>中 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_MODULE := Store</span><br></pre></td></tr></table></figure>

<p>这里配置</p>
<p>同时<code>Application.mk</code>里也要配置相应的<code>APP_MODULE</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">APP_MODULES := Store</span><br><span class="line">APP_ABI := armeabi-v7a</span><br></pre></td></tr></table></figure>

<p>使用工具自动的去javah或者ndk-build的配置如下:</p>
<p><code>Preference &gt; Tools &gt; External Tools &gt; add</code></p>
<ul>
<li>javah :  <ul>
<li>$JDKPath$\bin\javah</li>
<li>$FileClass$ </li>
<li>$ModuleFileDir$/src/main/java/</li>
</ul>
</li>
<li>ndk-build <ul>
<li>/Users/scorpioneal/Documents/android-ndk-r12b/ndk-build </li>
<li>没东西</li>
<li>$ProjectFileDir$/app/src/main/jni/</li>
</ul>
</li>
</ul>
<p>app build.gradle的配置如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        ndkBuild &#123;</span><br><span class="line">            path "src/main/jni/Android.mk"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets.main&#123;</span><br><span class="line">        jni.srcDirs = ['src/main/jni']</span><br><span class="line">//        jniLibs.srcDir "src/main/libs" </span><br><span class="line">    // 这里需要把这个注释掉，不然会报错`More than one file was found with OS independent path lib/armeabi`</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-JNI tips</title>
    <url>/posts/f20ec14d/</url>
    <content><![CDATA[<h2 id="JNI-tips"><a href="#JNI-tips" class="headerlink" title="JNI tips"></a>JNI tips</h2><p>JNI is the Java Native Interface. It define a way for the bytecode that Android compiles from managed code(written in the Java or Kotlin programming language) to interact with native code(written in C/C++). JNI is vendor-neutral, has support for loading code from dynamic shared libraries, and while cumbersome at times is reasonably efficent.</p>
<p>If you’re not already familiar with it, read through the <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html" target="_blank" rel="noopener">Java Native Interface Specification</a> to get a sense for how JNI works and what features are available. Some aspects of the interface aren’t immediately obvious on first reading, so you may find the next few sections handy.</p>
<p>To browse global JNI references and see where global JNI references are created and deleted, see the JNI heap view in the <a href="https://developer.android.com/studio/profile/memory-profiler#jni-references" target="_blank" rel="noopener">Memory Profile</a> in ANdroid 3.2 and higher.</p>
<h3 id="General-tips"><a href="#General-tips" class="headerlink" title="General tips"></a>General tips</h3><p>Try to minimize the footprint of your JNI layer. There are several dimensions to consider here. Your JNI solution should try to follow these guidelines(listed below by order of importance, beginning with the most important): </p>
<ul>
<li><p>Minimize marshalling of resources across the JNI layer: </p>
<p>  Marshalling across the JNI layer has non-trivial costs. Try to design an interface that minimizes the amount of data you need to marshall and the the frequency with which you must marshall data.</p>
</li>
<li><p>Avoid asynchronous communication between code written in a managed programming language and code written in C++ when possible: </p>
<p>  This will keep your JNI interface easier to maintain. You can typically simplify asynchronous UI updates by keeping the async update in the same language as the UI.For example, instead of invoking a C++ function from the UI thread in the Java code via JNI, it’s better to do a callback between two threads in the Java programming language, with one of them making a blocking C++ call and then notifying the UI thread when the blocking call is complete.</p>
</li>
<li><p>Minimize the number of threads that need to touch or be touched by JNI</p>
<p>  If you do need to utilize thread pools in both the Java and C++ languages, try to keep JNI communication between the pool owners rather than between individual worker threads.</p>
</li>
<li><p>Keep your interface code in a low number of easily identified C++ and Java source locations to facillitate future refactors</p>
<p>  Consider using a JNI auto-generation library as appropriate.</p>
</li>
</ul>
<h3 id="JavaVM-and-JNIEnv"><a href="#JavaVM-and-JNIEnv" class="headerlink" title="JavaVM and JNIEnv"></a>JavaVM and JNIEnv</h3><p>JNI defines two key data structures, “JavaVM” and “JNIEnv”. Both of these are essentially pointers to pointers to function tables. (In the C++ version, they’re classes with a pointer to a function table and a member function for each JNI function that indirects through the table.) The JavaVM provides the “invocation interface” functions, which allow you to create and destroy a JavaVM. In theory you can have multiple JavaVMs per process, but Android only allows one.</p>
<p>The JNIEnv provides most of the JNI functions. You native functions all receive a JNIEnv as the first argument.</p>
<p>The JNIEnv is used for thread-local storage. For this reason, <code>you cannot share a JNIEnv between threads</code>. If a piece of code has no other way to get its JNIEnv, you should share the JavaVM, and use <code>GetEnv</code> to discover the thread’s JNIEnv. (Assuming it has one; see <code>AttachCurrentThread</code> below.)</p>
<p>The C declarations of JNIEnv and JavaVM are different from the C++ declarations. The <code>&quot;jni.h&quot;</code> include file provides different typedefs depending on whether it’s included into C or C++. For this reason it’s a bad idea to include JNIEnv arguments in header files included by both languages. (Put another way: if your header file requires <code>#ifdef __cplusplus</code>, you may have to do some extra work if anything in that header refers to JNIEnv.)</p>
<h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><p>All threads are Linux threads, scheduled by the kernel. They’re usually started from managed code(using <code>Thread.start</code>), but they can also be created elsewhere and then attached to the JavaVM. For example, a thread started with <code>pthread_create</code> can be attached with the JNI <code>AttachCurrentThread</code> or <code>AttachCurrentThreadAsDaemon</code> functions. Until a thread is attached, it has no JNIEnv, and <code>cannot make JNI calls</code>.</p>
<p>Attaching a natively-created thread causes a <code>java.lang.Thread</code> object to be constructed and added tothe “main” <code>ThreadGroup</code>, making it visible to debugger. Call <code>AttachCurrentThread</code> on an already-attached thread is a noop.</p>
<p>Android does not suspend threads executing native code. If garbage collection is in progress, or the debugger has issued a suspend request, Android will pause the thread the next time it makes a JNI call.</p>
<p>Threads attached through JNI <code>must call DetachCurrentThread before they exit</code>. If coding this directly is awkward, in Android 2.0 and higher you can use <code>pthread_key_create</code> to define a destructor function that will be called before the thread exits, and call <code>DetachCurrentThread</code> from there. (Use that key with <code>pthread_setspecific</code> to store the JNIEnv in thread-local-storage; that way it’ll be passed into your destructor as the argument.)</p>
<h3 id="jclass-jmethodID-and-jfieldID"><a href="#jclass-jmethodID-and-jfieldID" class="headerlink" title="jclass, jmethodID, and jfieldID"></a>jclass, jmethodID, and jfieldID</h3><p>If you want to access an object’s field from native code, you would do the following:</p>
<ul>
<li>Get the class object reference for the class with <code>FindClass</code></li>
<li>Get the field ID for the field with <code>GetFieldID</code></li>
<li>Get the contents of the field with something appropriate, such as <code>GetIntField</code></li>
</ul>
<p>Similarly, to call a method, you’d first get a class object reference and then a method ID. The IDs are often just pointers to internal runtime data structures. Looking them up may require several string comparisons, but once you have them the actual call to get the field or invoke the method is very quick.</p>
<p>If performance is important, it’s useful to look the values up once and cache the results in your native code. Because there is alimit of one JavaVM per process, it’s reasonable to store this data in a static local structure.</p>
<p>TODO…..看不懂</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Java中Exception, Error的区别</title>
    <url>/posts/789b713f/</url>
    <content><![CDATA[<p><code>Throwable</code>类是整个异常体系类的父级类。<code>Throwable</code>类实现了<code>Serializable</code>接口，表示<code>Throwable</code>可以进行序列化，继承自Object类，他的子类主要是<code>Error</code>和<code>Exception</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exception</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Error</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中只有<code>Throwable</code>类的实例才可以被抛出（<code>throw</code>）或者捕获（<code>catch</code>），它是异常处理机子的基本组成类型</p>
<p><code>Exception</code>和<code>Error</code>提现了Java平台对于不同未知情况的分类。</p>
<p><code>Exception</code>是程序正常运行中，<code>可以预料到的意外情况</code>，可能并且应该被捕获，进行相应处理。</p>
<p><code>Exception</code>分为两类，可检查（<code>checked</code>）异常和不检查（<code>unchecked</code>）异常，可检查异常是在源代码中必须显示地进行捕获处理，这<code>是编译期检查的一部分</code>。<code>不检查异常就是所谓的运行时异常</code>（<code>RuntimeException</code>），类似<code>NullPointerException</code>、ArrayIndexOutOfBoundsException等、通常是可以避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译期强制要求。</p>
<p><code>Error</code>是程序正常运行中，不大可能出现的情况，绝大部分的<code>Error</code>都会导致程序（比如JVM）处于非正常、不可恢复状态。<code>既然是非正常情况，所以不便于也不需要捕获</code>，常见的比如<code>OutOfMemoryError</code>之类，都是<code>Error</code>的子类。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/foreveyking/article/details/85683662" target="_blank" rel="noopener">https://blog.csdn.net/foreveyking/article/details/85683662</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Java的解释执行和编译执行</title>
    <url>/posts/8f460aa2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们平时写的代码，计算机是没法直接执行的，需要相应的编译器将其编译成机器代码</p>
<ul>
<li><p>编译执行: </p>
<p>  先编译，再执行。 这里需要一个编译器，把我们的代码全部编译成机器代码，然后执行。因为是整体编译，所以会生成编译后的机器代码</p>
</li>
<li><p>解释执行</p>
<p>  需要一个解释器，将我们代码逐句解释成机器代码来执行，可以理解为解释一句，执行一句，这个过程中不会生成中间文件</p>
</li>
</ul>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table>
<thead>
<tr>
<th>方式</th>
<th>编译执行</th>
<th>解释执行</th>
</tr>
</thead>
<tbody><tr>
<td>次数</td>
<td>编译一次，多次运行</td>
<td>每运行一次，都要经过解释器</td>
</tr>
<tr>
<td>启动效率</td>
<td>需要编译过程，慢</td>
<td>速度更快</td>
</tr>
<tr>
<td>运行效率</td>
<td>编译一次后续无需编译，效率高</td>
<td>每次都要解释，效率低</td>
</tr>
<tr>
<td>内存</td>
<td>生成编译后的机器码文件</td>
<td>不会生成中间文件，内存占用少</td>
</tr>
<tr>
<td>跨平台</td>
<td>在windows下编译的代码只能在windows下用</td>
<td>根据不同平台解释，可以跨平台, e.g js在linux和window下都可以运行</td>
</tr>
<tr>
<td>其他</td>
<td>大型项目注重效率，核心使用编译执行</td>
<td>简单操作可以混合解释执行</td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/hongsheng6353328/article/details/80463434" target="_blank" rel="noopener">https://blog.csdn.net/hongsheng6353328/article/details/80463434</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-NDK build Android.mk</title>
    <url>/posts/4c0a9dae/</url>
    <content><![CDATA[<h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><p><a href="https://developer.android.google.cn/ndk/guides/android_mk" target="_blank" rel="noopener">Reference</a></p>
<p>This page descriebs the syntax of the <code>Android.mk</code> build file used by <code>ndk-build</code>.</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The <code>Android.mk</code> file resides in a subdirectory of your project’s <code>jni/</code> directory, and describes your sources and shared libraries to the build system. It is really a tiny GNU makefile fragment that the build system parses once or more. The <code>Android.mk</code> file is useful for defining project-wide settings that <a href="https://developer.android.google.cn/ndk/guides/application_mk.html" target="_blank" rel="noopener">Application.mk</a>, the build system, and your environment variables leave undefined. It can also override project-wide settings for specific modules.</p>
<p>The syntax of the <code>Android.mk</code> allows you to group your sources into modules. A module is either a static library , a shared library, or a standalone executable. You can define one or more modules in each <code>Android.mk</code> file, and you can use the same source file in multiple modules. The build system only places shared libraries into your application package. In additional, static libraries can generate shared libraries.</p>
<p>In addition to packaging libraries, the build system handles a variety of other details for you. For example, you don’t need to list header files or explict dependencies between generated files in your <code>Android.mk</code> file. The NDK build system computes these relationships automatically for you. As a result, you should be able to benefit from new toolchain/platform support in future NDK release without having to touch your <code>Android.mk</code> file.</p>
<p>The syntax of this file is very close to that used in the <code>Android.mk</code> files distributed with the full <a href="https://source.android.google.cn/" target="_blank" rel="noopener">Android Open Source Project</a>. While the build system implementation that uses them is different, their similarity is an intentional design desicion aimed at making it  eaiser for application developers to reuse source code for external libraries.</p>
<h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><p>Before exploring the syntax in detail, it is useful to start by understanding the basics of what a <code>Android.mk</code> file contains. This section uses the <code>Android.mk</code> file in the Hello-JNI sample towards that end, explaining the role that each line in the file plays.</p>
<p>An <code>Android.mk</code> file must begin by defining the <code>LOCAL_PATH</code> variable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br></pre></td></tr></table></figure>

<p>This variable indicates the location of the source files in the development tree. Here, the macro function <code>my-dir</code>, provided by the build system, returns the path of the current directory(the directory containing the <code>Android.mk</code> file itself).</p>
<p>The next line declares the <code>CLEAR_VARS</code> variable, whose value the build system provides.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure>

<p>The <code>CLEAR_VARGS</code> variable points to a special GNU Makefile that clears many <code>LOCAL_XXX</code> variables for you, such as <code>LOCAL_MODULE</code>, <code>LOCAL_SRC_FILES</code>, and <code>LOCAL_STATIC_LIBRARIES</code>. Note that it does not clear <code>LOCAL_PATH</code>. This variable must retain its value because the system parses all build control files in a single GNU Make execution context where all variables are global. You must (re-)declare this variable before describing each module.</p>
<p>Next, the <code>LOCAL_MODULE</code> variable stores the name of the module that you wish to build. Use this variable once per module in your application.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_MODULE := hello-jni</span><br></pre></td></tr></table></figure>

<p>Each module name must be unique and not certain any spaces. The build system, when it generates the final shared library file, automatically adds the proper prefix and suffix to the name that you assign to <code>LOCAL_MODULE</code>. For example, the example that appears above results in generation of a library called <code>libhello-jni.so</code>.</p>
<p>The next line enumerates the source files, with space delimiting multiple files:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_SRC_FILES := hello-jni.c</span><br></pre></td></tr></table></figure>

<p>The <code>LOCAL_SRC_FILES</code> variable must contain a list of C and/or C++ source files to build into a module.</p>
<p>The last line helps the system tie everything together:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>

<p>The <code>BUILD_SHARED_LIBRARY</code> variable points to a GNU Makefile script that collects all the information you defined in <code>LOCAL_XXX</code> variable since the most recent <code>include</code>. This script determines what to build, and how to do it.</p>
<p>There are more complex examples in the sample directories, with commented <code>Android.mk</code> files that you can look at. In addition, <a href="https://developer.android.google.cn/ndk/samples/sample_na.html" target="_blank" rel="noopener">Sample: native-activity</a> provides a detailed explanation of that sample’s <code>Android.mk</code> file. Finally, <a href="https://developer.android.google.cn/ndk/guides/android_mk#var" target="_blank" rel="noopener">Variables and Macros</a> provides further information on the variables from this section.</p>
<h3 id="Variable-and-Macros"><a href="#Variable-and-Macros" class="headerlink" title="Variable and Macros"></a>Variable and Macros</h3><p>The build system provides many possible variables for use in the <code>Android.mk</code> file. Many of these variable come with preassigned values. Others, you assign.</p>
<p>In additional to these variables, you can also define your own arbitrary ones. If you do so, keep in mind that the ND build system reserves the following variable names:</p>
<ul>
<li>Names that begin with <code>LOCAL_</code>, such as <code>LOCAL_MODULE</code></li>
<li>Names that begin with <code>PRIVATE_</code>, <code>NDK_</code> or <code>APP</code>. The build system uses these internally</li>
<li>Lower-case names, such as <code>my-dir</code>. The build system uses these internally, as well</li>
</ul>
<p>If you need to define your own convenience variable in an <code>Android.mk</code> file, we recommend prepending <code>MY_</code> to their names.</p>
<h3 id="NDK-defined-include-variables"><a href="#NDK-defined-include-variables" class="headerlink" title="NDK-defined include variables"></a>NDK-defined include variables</h3><p>This section discusses the GNU Make variables that the build system defines before parsing your <code>Android.mk</code> file. Under certain circumstances, the NDK might parse your <code>Android.mk</code> file several times, using a different definition for some of these variables each time.</p>
<h4 id="CLEAR-VARS"><a href="#CLEAR-VARS" class="headerlink" title="CLEAR_VARS"></a>CLEAR_VARS</h4><p>This variable points to a build script that undefines nearly all <code>LOCAL_XXX</code> variables listed in the “Developer-defined variables” section below. Use this variable to include this script before describing a new module. The syntax for using it is:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure>

<h4 id="BUILD-EXECUTABLE"><a href="#BUILD-EXECUTABLE" class="headerlink" title="BUILD_EXECUTABLE"></a>BUILD_EXECUTABLE</h4><p>This variable points to a build script that collects all the information about the module you provided in your <code>LOCAL_XXX</code> variables, and determines how to build a target executable from the sources you listed. Note that using this script requires that you have already assigned values to <code>LOCAL_MODULE</code> and <code>LOCAL_SRC_FILES</code>, at a minimum(for more information about these variables, see <a href="https://developer.android.google.cn/ndk/guides/android_mk#mdv" target="_blank" rel="noopener">Module-Description Variables</a>)</p>
<p>The syntax for using this variable is :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure>

<h4 id="BUILD-SHARED-LIBRARY"><a href="#BUILD-SHARED-LIBRARY" class="headerlink" title="BUILD_SHARED_LIBRARY"></a>BUILD_SHARED_LIBRARY</h4><p>This variable points to a build script that collects all the information about the module  you provided in your <code>LOCAL_XXX</code> variables, and determines how to build a target shared library from the sources you listed. Note that using this script requires that you have already assigned values to <code>LOCAL_MODULE</code> and <code>LOCAL_SRC_FILES</code>, at a minimum(for more information about these variables, see <a href="https://developer.android.google.cn/ndk/guides/android_mk#mdv" target="_blank" rel="noopener">Module-Description Variables</a>).</p>
<p>The syntax for using this variable is:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>

<p>A shared-library variable causes the build system to generate a library file with a <code>.so</code> extension.</p>
<h4 id="BUILD-STATIC-LIBRARY"><a href="#BUILD-STATIC-LIBRARY" class="headerlink" title="BUILD_STATIC_LIBRARY"></a>BUILD_STATIC_LIBRARY</h4><p>A variant of <code>BUILD_SHARED_LIBRARY</code> that is used to build a static library. The build system does not copy static libraries into your <code>project/packages</code>, but it can use them to build shared libraries (see <code>LOCAL_STATIC_LIBRARIES</code> and <code>LOCAL_WHOLE_STATIC_LIBRARIES</code>, below). The syntax for using this variable is:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(BUILD_STATIC_LIBRARY)</span><br></pre></td></tr></table></figure>

<p>A static-library variable causes the build system to generate a library with a <code>.a</code> extension.</p>
<h4 id="PREBUILT-SHARED-LIBRARY"><a href="#PREBUILT-SHARED-LIBRARY" class="headerlink" title="PREBUILT_SHARED_LIBRARY"></a>PREBUILT_SHARED_LIBRARY</h4><p>Points to a build script used to specify a prebuilt shared library. Unlike in the case of <code>BUILD_SHARED_LIBRARY</code> and <code>BUILD_STATIC_LIBRARY</code>, here the value of <code>LOCAL_SRC_FILES</code> cannot be a source file. Instead, it must be a single path to a prebuilt shared library, such as `foo/libfoo.so’. The syntax for using this variable is :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>

<p>You can also reference a prebuilt library in another module by using the <code>LOCAL_PREBUILTS</code> variable. For more information about using prebuilts, see <a href="https://developer.android.google.cn/ndk/guides/prebuilts.html" target="_blank" rel="noopener">Using Prebuilt Libraries</a>.</p>
<h4 id="PREBUILT-STATIC-LIBRARY"><a href="#PREBUILT-STATIC-LIBRARY" class="headerlink" title="PREBUILT_STATIC_LIBRARY"></a>PREBUILT_STATIC_LIBRARY</h4><p>The same as <code>PREBUILT_SHARED_LIBRARY</code>, but for a prebuilt static library. For more information about using prebuilts, see <a href="https://developer.android.google.cn/ndk/guides/prebuilts.html" target="_blank" rel="noopener">Using Prebuilt Libraries</a>.</p>
<h3 id="Target-information-variables"><a href="#Target-information-variables" class="headerlink" title="Target information variables"></a>Target information variables</h3><p>The build system parses <code>Android.mk</code> once per ABI specified by the <code>APP_ABI</code> variable, which is typically defined in your <code>Application.mk</code> file. If <code>APP_ABI</code> is <code>all</code>, then the build system parses <code>Android.mk</code> once per ABI the NDK supports. This section describes variable the build system defines each time it parses <code>Android.mk</code>.</p>
<h4 id="TARGET-ARCH"><a href="#TARGET-ARCH" class="headerlink" title="TARGET_ARCH"></a>TARGET_ARCH</h4><p>The CPU family the build system is targeting as it parses this <code>Android.mk</code> file. This variable will be one of: <code>arm</code>, <code>arm64</code>, <code>x86</code>, or <code>x86_64</code>.</p>
<h4 id="TARGET-PLATFORM"><a href="#TARGET-PLATFORM" class="headerlink" title="TARGET_PLATFORM"></a>TARGET_PLATFORM</h4><p>The Android API level number the build system is targeting as it parses this <code>Android.mk</code> file. For example, the Android 5.1 system images correspond to Android API level 22: <code>android-22</code>. For a complete list of platform names and corresponding Android system images, see <a href="https://developer.android.google.cn/ndk/guides/stable_apis.html" target="_blank" rel="noopener">Android NDK Native APIs</a>. The following example shows the syntax for using this variable:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">ifeq($</span><span class="bash">(TARGET_PLATFORM), android-22)</span></span><br><span class="line">    # ... do something ....</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>

<h4 id="TARGET-ARCH-ABI"><a href="#TARGET-ARCH-ABI" class="headerlink" title="TARGET_ARCH_ABI"></a>TARGET_ARCH_ABI</h4><p>The ABI the build system is targeting as it parses this <code>Android.mk</code> file. Table 1 shows the ABI setting used for each supported CPU and architecture.</p>
<p>Table 1. ABI settings for different CPUs and architectures.</p>
<p>//TODO table</p>
<p>The following example shows how to check for ARMv8 AArch64 as the target CPU-and-ABI combination:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifeq ($(TARGET_ARCH_ABI),arm64-v8a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="keyword">do</span> something ...</span></span><br><span class="line">endif</span><br></pre></td></tr></table></figure>

<p>For more details about architecture ABIs and associated compatibility issues, refer to <a href="https://developer.android.google.cn/ndk/guides/abis.html" target="_blank" rel="noopener">ABI Management</a>.</p>
<p>New target ABIs in the future will have differrnt values.</p>
<h4 id="TARGET-ABI"><a href="#TARGET-ABI" class="headerlink" title="TARGET_ABI"></a>TARGET_ABI</h4><p>A concatenation of target Android API level and ABI. It is especially useful when you want to test against a specific target system image for a real device. For example, to check for a 64-bit ARM device running on Android API level 22:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifeq ($(TARGET_ABI),android-22-arm64-v8a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="keyword">do</span> something ...</span></span><br><span class="line">endif</span><br></pre></td></tr></table></figure>

<h3 id="Module-Description-Variables"><a href="#Module-Description-Variables" class="headerlink" title="Module-Description Variables"></a>Module-Description Variables</h3><p>The variables in this section describe your module to the build system. Each module description should follow this basic flow:</p>
<ol>
<li>Initialize or undefine the variables associated with the module, using the <code>CLEAR_VARS</code> variable</li>
<li>Assign values to the variables used to describe the module</li>
<li>Set the NDK build system to use the appropriate build script for the module, using the <code>BUILD_XXX</code> variable.</li>
</ol>
<h4 id="LOCAL-PATH"><a href="#LOCAL-PATH" class="headerlink" title="LOCAL_PATH"></a>LOCAL_PATH</h4><p>This variable is used to give the path to the current file. You must define it at the start of your <code>Android.mk</code> file. The following example shows how to do so: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br></pre></td></tr></table></figure>

<p>The script to which <code>CLEAR_VARS</code> points does not clear this variable. Therefore, you only need to define it a single time, even if your <code>Android.mk</code> file describes multiple modules.</p>
<h4 id="LOCAL-MODULE"><a href="#LOCAL-MODULE" class="headerlink" title="LOCAL_MODULE"></a>LOCAL_MODULE</h4><p>This variable stores the name of your module. It must be unique among all modules names, and must not contain any spaces. You must define it before including any scripts(other than the one for <code>CLEAR_VARS</code>). You need not add either the <code>lib</code> prefix or the <code>.so</code> or <code>.a</code> file extension; the build system makes these modification automatically. Throughout your <code>Android.mk</code> and <a href>Application.mk</a> files, refer to your module by its unmodified name. For example, the following line results in the generation of a shared library module called <code>libfoo.so</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_MODULE := "foo"</span><br></pre></td></tr></table></figure>

<p>If you want the generated module to have a name other than <code>lib</code> + the value of <code>LOCAL_MODULE</code>, you can use the <code>LOCAL_MODULE_FILENAME</code> variable to give the generated module a name of your own choosing, instead.</p>
<h4 id="LOCAL-MODULE-FILENAME"><a href="#LOCAL-MODULE-FILENAME" class="headerlink" title="LOCAL_MODULE_FILENAME"></a>LOCAL_MODULE_FILENAME</h4><p>This optional variable allows you to override the names that the build system uses by default for files that it generates. For example, if the name of your <code>LOCAL_MODULE</code> is <code>foo</code>, you can force the system to call the file it generates <code>libnewfoo</code>. The following example shows how to accomplish this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_MODULE := foo</span><br><span class="line">LOCAL_MODULE_FILENAME := libnewfoo</span><br></pre></td></tr></table></figure>

<p>For a shared library module, this example would generate a file called <code>libnewfoo.so</code>.</p>
<h4 id="LOCAL-SRC-FILES"><a href="#LOCAL-SRC-FILES" class="headerlink" title="LOCAL_SRC_FILES"></a>LOCAL_SRC_FILES</h4><p>This variable contains the list of source files that the build system uses to generate the module. Only list the files that the build system actually passes to the compiler, since the build system automatically computes any associated depencies. Note that you can use both relative(to <code>LOCAL_PATH</code>) and absolute file paths.</p>
<p>We recommend avoiding absolute file paths; relative paths make your <code>Android.mk</code> file more portable.</p>
<h4 id="LOCAL-CPP-EXTENSION"><a href="#LOCAL-CPP-EXTENSION" class="headerlink" title="LOCAL_CPP_EXTENSION"></a>LOCAL_CPP_EXTENSION</h4><p>You can use this optional variable to indicate a file extension other than <code>.cpp</code> for your C++ source files. For example, the following line changes the extension to <code>.cxx</code> (The setting must include the dot)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_CPP_EXTENSION := .cxx</span><br></pre></td></tr></table></figure>

<p>You can use this variable to specify multiple extensions. For instance:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_CPP_EXTENSION := .cxx .cpp .cc</span><br></pre></td></tr></table></figure>

<h4 id="LOCAL-CPP-FEATURES"><a href="#LOCAL-CPP-FEATURES" class="headerlink" title="LOCAL_CPP_FEATURES"></a>LOCAL_CPP_FEATURES</h4><p>You can use this optional variable to indicate that your code relies on specific C++ features. It enables the right compiler and linker flags during the build process. For prebuilt binaries, this variable also declares which features the binary depends on, thus helping ensure the final linking works correctly. We recommend that you use this variable instead of enabling <code>-frtti</code> and <code>-fexceptions</code> directly in your <code>LOCAL_CPPFLAGS</code> definition.</p>
<p>Using this variable allows the build system to use the appropriate flags for each module. Using <code>LOCAL_CPPFLAGS</code> causes the compiler to use all  specified flag for all module, regardless of actual need.</p>
<p>For example, to indicate that your code uses RTTI(RunTime Type Information), write: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := rtti</span><br></pre></td></tr></table></figure>

<p>To indicate that your code uses C++ exceptions, write:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := exceptions</span><br></pre></td></tr></table></figure>

<p>You can also specify multiple values for this variable. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := rtti features</span><br></pre></td></tr></table></figure>

<p>The order in which you describe the values does not matter.</p>
<h4 id="LOCAL-C-INCLUDES"><a href="#LOCAL-C-INCLUDES" class="headerlink" title="LOCAL_C_INCLUDES"></a>LOCAL_C_INCLUDES</h4><p>You can use this optional variable to specifya list of paths, relative to the NDK <code>root</code> directory, to add to the include search path when compiling all sources (C, C++ and Assembly). For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_C_INCLUDES := sources/foo</span><br></pre></td></tr></table></figure>

<p>Or even: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_C_INCLUDES := $(LOCAL_PATH)/&lt;subdirectory&gt;/foo</span><br></pre></td></tr></table></figure>

<p>Define this variable before setting any corresponding inclusion flags via <code>LOCAL_CFLAGS</code> or <code>LOCAL_CPPFLAGS</code>.</p>
<p>The build system also uses <code>LOCAL_C_INCLUDES</code> paths automatically when launching native debugging with ndk-gdb.</p>
<h4 id="LOCAL-CFLAGS"><a href="#LOCAL-CFLAGS" class="headerlink" title="LOCAL_CFLAGS"></a>LOCAL_CFLAGS</h4><p>This optional variable sets compiler flags for the build system to pass when building C and C++ source files. The ability to do so can be useful for specifying additional macro definitions or compile options. Use <code>LOCAL_CPP_FLAGS</code> to specify flags for C++ only.</p>
<p>Try not to change the optimization/debugging level in your <code>Android.mk</code> file. The build system can handle this setting automatically for you, using the relevant information in the <a href="https://developer.android.google.cn/ndk/guides/application_mk.html" target="_blank" rel="noopener">Application.mk</a> file. Doing it this way allows the build system to generate useful data files used during debugging.</p>
<p>It is possible to specify additional include paths by writing: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_CFLAGS += -I&lt;path&gt;,</span><br></pre></td></tr></table></figure>

<p>It is better, however, to use <code>LOCAL_C_INCLUDES</code> for this purpose, since doing so also makes it possible to use the paths available for native debugging with ndk-gdb.</p>
<h4 id="LOCAL-CPPFLAGS"><a href="#LOCAL-CPPFLAGS" class="headerlink" title="LOCAL_CPPFLAGS"></a>LOCAL_CPPFLAGS</h4><p>An optional set of compiler flags that will be passed when building C++ source files only. They will appear after the <code>LOCAL_CFLAGS</code> on the compiler’s command-line. Use <code>LOCAL_CFLAGS</code> to specify flags for both C and C++.</p>
<h4 id="LOCAL-STATIC-LIBRARIES"><a href="#LOCAL-STATIC-LIBRARIES" class="headerlink" title="LOCAL_STATIC_LIBRARIES"></a>LOCAL_STATIC_LIBRARIES</h4><p>This variable stores the list of static libraries modules on which the current module depends.</p>
<p>If the current module is a shared library or an executable, this variable will force these libraries to be linked into the resulting binary.</p>
<p>If the current module is a static library, this variable simply indicates that other module depending on the current one will also depend on the listed libraries.</p>
<h4 id="LOCAL-SHARED-LIBRARIES"><a href="#LOCAL-SHARED-LIBRARIES" class="headerlink" title="LOCAL_SHARED_LIBRARIES"></a>LOCAL_SHARED_LIBRARIES</h4><p>This variable is the list of shared libraries modules on which this module depends at runtime. This information is necessary at link time, and to embed the corresponding information in the generated file.</p>
<h4 id="LOCAL-WHOLE-STATIC-LIBRARIES"><a href="#LOCAL-WHOLE-STATIC-LIBRARIES" class="headerlink" title="LOCAL_WHOLE_STATIC_LIBRARIES"></a>LOCAL_WHOLE_STATIC_LIBRARIES</h4><p>This variable is a variant of <code>LOCAL_STATIC_LIBRARIES</code>, and expresses that the linker should treat the associated library modules as whole archives. For more information on whole archives, see the <a href="http://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html" target="_blank" rel="noopener">GNU Id Documentation</a> for the <code>--whole-archive</code> flag</p>
<p>This variable is useful when there are circular dependencies among several static libraries. When you use this variable to build a shared library, it will force the build system to add all object files from your static libraries to the final binary. The same is not true, however, when generating executables.</p>
<h4 id="LOCAL-LDLIBS"><a href="#LOCAL-LDLIBS" class="headerlink" title="LOCAL_LDLIBS"></a>LOCAL_LDLIBS</h4><p>This variable contains the list of additional linker flags for use in building your shared library or executable. It enables you to use the <code>-l</code> prefix to pass the name of specifyc system libraries. For example, the following example tells the linker to generate a module that links to <code>/system/lib/libz.so</code> at load time:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_LDLIB := -lz</span><br></pre></td></tr></table></figure>

<p>For the list of exposed system libraries against which you can link in this NDK release, see <a href="https://developer.android.google.cn/ndk/guides/stable_apis.html" target="_blank" rel="noopener">Android NDK Native APIs</a>.</p>
<h4 id="LOCAL-LDFLAGS"><a href="#LOCAL-LDFLAGS" class="headerlink" title="LOCAL_LDFLAGS"></a>LOCAL_LDFLAGS</h4><p>The list of other linker flags for the build system to use when building your shared library or executable. For example, to use the <code>ld.bfd</code> linker on ARM/X86:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_LDFLAGS += -fuse-ld=bfd</span><br></pre></td></tr></table></figure>

<h4 id="LOCAL-ALLOW-UNDEFINED-SYMBOLS"><a href="#LOCAL-ALLOW-UNDEFINED-SYMBOLS" class="headerlink" title="LOCAL_ALLOW_UNDEFINED_SYMBOLS"></a>LOCAL_ALLOW_UNDEFINED_SYMBOLS</h4><p>By default, when the build system encounters an undefined reference encountered while trying to build a shared, it will throw an undefined symbol error. This error can help you catch bugs in your source code.</p>
<p>To disable this check, set this variable to <code>true</code>. Note that this setting may cause the shared library to load at runtime.</p>
<h4 id="LOCAL-ARM-MODE"><a href="#LOCAL-ARM-MODE" class="headerlink" title="LOCAL_ARM_MODE"></a>LOCAL_ARM_MODE</h4><p>// TODO</p>
<h4 id="LOCAL-ARM-NEON"><a href="#LOCAL-ARM-NEON" class="headerlink" title="LOCAL_ARM_NEON"></a>LOCAL_ARM_NEON</h4><p>//TODO</p>
<h4 id="LOCAL-DISABLE-FORMAT-STRING-CHECKS"><a href="#LOCAL-DISABLE-FORMAT-STRING-CHECKS" class="headerlink" title="LOCAL_DISABLE_FORMAT_STRING_CHECKS"></a>LOCAL_DISABLE_FORMAT_STRING_CHECKS</h4><p>// TODO</p>
<h4 id="LOCAL-EXPORT-CFLAGS"><a href="#LOCAL-EXPORT-CFLAGS" class="headerlink" title="LOCAL_EXPORT_CFLAGS"></a>LOCAL_EXPORT_CFLAGS</h4><p>// TODO</p>
<h4 id="LOCAL-EXPORT-CPPFLAGS"><a href="#LOCAL-EXPORT-CPPFLAGS" class="headerlink" title="LOCAL_EXPORT_CPPFLAGS"></a>LOCAL_EXPORT_CPPFLAGS</h4><p>// TODO</p>
<h4 id="LOCAL-EXPORT-C-INCLUDES"><a href="#LOCAL-EXPORT-C-INCLUDES" class="headerlink" title="LOCAL_EXPORT_C_INCLUDES"></a>LOCAL_EXPORT_C_INCLUDES</h4><p>// TODO</p>
<h4 id="LOCAL-EXPORT-C-INCLUDES-1"><a href="#LOCAL-EXPORT-C-INCLUDES-1" class="headerlink" title="LOCAL_EXPORT_C_INCLUDES"></a>LOCAL_EXPORT_C_INCLUDES</h4><p>//TODO</p>
<h4 id="LOCAL-EXPORT-LDFLAGS"><a href="#LOCAL-EXPORT-LDFLAGS" class="headerlink" title="LOCAL_EXPORT_LDFLAGS"></a>LOCAL_EXPORT_LDFLAGS</h4><p>//TODO</p>
<h4 id="LOCAL-EXPORT-LDLIBS"><a href="#LOCAL-EXPORT-LDLIBS" class="headerlink" title="LOCAL_EXPORT_LDLIBS"></a>LOCAL_EXPORT_LDLIBS</h4><p>// TODO</p>
<h4 id="LOCAL-SHORT-COMMANDS"><a href="#LOCAL-SHORT-COMMANDS" class="headerlink" title="LOCAL_SHORT_COMMANDS"></a>LOCAL_SHORT_COMMANDS</h4><p>// TODO</p>
<h4 id="LOCAL-THIN-ARCHIVE"><a href="#LOCAL-THIN-ARCHIVE" class="headerlink" title="LOCAL_THIN_ARCHIVE"></a>LOCAL_THIN_ARCHIVE</h4><p>// TODO</p>
<h4 id="LOCAL-FILTER-ASM"><a href="#LOCAL-FILTER-ASM" class="headerlink" title="LOCAL_FILTER_ASM"></a>LOCAL_FILTER_ASM</h4><p>// TODO</p>
<h3 id="NDK-provided-function-macros"><a href="#NDK-provided-function-macros" class="headerlink" title="NDK-provided function macros"></a>NDK-provided function macros</h3><p>This section explains GNU Make function macros that the NDK provides. Use <code>$(call &lt;function&gt;)</code> to evaluate them; they return textural information.</p>
<h4 id="my-dir"><a href="#my-dir" class="headerlink" title="my-dir"></a>my-dir</h4><p>This macro returns the path of the last included makefile, which typically is the current <code>Android.mk</code>‘s directory. <code>my-dir</code> is useful for defining <code>LOCAL_PATH</code> at the start of your <code>Android.mk</code> file. For example: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br></pre></td></tr></table></figure>

<p>Due to the way GNU Make works, what this macro really returns is the path of the last makefile that the build system included when parsing the build scripts. For this reason, you should not call <code>my-dir</code> after including another file.</p>
<p>For example, consider the following example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="built_in">declare</span> one module</span></span><br><span class="line"></span><br><span class="line">include $(LOCAL_PATH)/foo/`Android.mk`</span><br><span class="line"></span><br><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="built_in">declare</span> another module</span></span><br></pre></td></tr></table></figure>

<p>The problem here is that the second call to <code>my-dir</code> defines <code>LOCAL_PATH</code> as <code>$PATH/foo</code> instead of <code>$PATH</code>, because that was where its most recent include pointed.</p>
<p>You can avoid this problem by putting additional includes after everything else in the <code>Android.mk</code> file. For example: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="built_in">declare</span> one module</span></span><br><span class="line"></span><br><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="built_in">declare</span> another module</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> extra includes at the end of the Android.mk file</span></span><br><span class="line">include $(LOCAL_PATH)/foo/Android.mk</span><br></pre></td></tr></table></figure>

<p>If it is not feasible to structure the file in this way, save the value of the first <code>my-dir</code> call into another variable. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MY_LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">LOCAL_PATH := $(MY_LOCAL_PATH)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="built_in">declare</span> one module</span></span><br><span class="line"></span><br><span class="line">include $(LOCAL_PATH)/foo/`Android.mk`</span><br><span class="line"></span><br><span class="line">LOCAL_PATH := $(MY_LOCAL_PATH)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... <span class="built_in">declare</span> another module</span></span><br></pre></td></tr></table></figure>

<h4 id="all-subdir-makefiles"><a href="#all-subdir-makefiles" class="headerlink" title="all-subdir-makefiles"></a>all-subdir-makefiles</h4><p>Returns the list of <code>Android.mk</code> files located in all subdirectories of the current <code>my-dir</code> path.</p>
<p>You can use this fuction to provide deep-nested source directory hierarchies to the build system. By default, the NDK only looks for files in the directory containing the <code>Android.mk</code> file.</p>
<h4 id="this-makefile"><a href="#this-makefile" class="headerlink" title="this-makefile"></a>this-makefile</h4><p>Returns the path of the current makefile(from which the build system called the function)</p>
<h4 id="parent-makefile"><a href="#parent-makefile" class="headerlink" title="parent-makefile"></a>parent-makefile</h4><p>Returns the path of the parent makefile in the inclusion tree(the path of the makefile that included the current one)</p>
<h4 id="grand-parent-makefile"><a href="#grand-parent-makefile" class="headerlink" title="grand-parent-makefile"></a>grand-parent-makefile</h4><p>Returns the path of the grandparent makefile in the inclusion tree (the path of the makefile that included the current one).</p>
<h4 id="import-module"><a href="#import-module" class="headerlink" title="import-module"></a>import-module</h4><p>A function that allows you to find and include a module’s <code>Android.mk</code> file by the name of the module. A typical example is as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(call import-module,&lt;name&gt;)</span></span><br></pre></td></tr></table></figure>

<p>In this example, the build system looks for the module tagged <code>&lt;name&gt;</code> in the list of directories referenced that your <code>NDK_MODULE_PATH</code> environment variable references, and includes its <code>Android.mk</code> file automatically for you.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-NDK build Application.mk</title>
    <url>/posts/9bbc0cee/</url>
    <content><![CDATA[<h2 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h2><p><a href="https://developer.android.google.cn/ndk/guides/application_mk" target="_blank" rel="noopener">Reference</a></p>
<p>This document explains the <code>Application.mk</code> build file used by the <code>ndk-build</code></p>
<p>We recommend that you read the <a href="https://developer.android.google.cn/ndk/guides/concepts" target="_blank" rel="noopener">Concepts</a> page before this one.</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The <code>Application.mk</code> specifies project-wide settings for ndk-build. By default, it is located at <code>jni/Application.mk</code> in your application’s project directory.</p>
<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><ul>
<li><p>APP_ABI</p>
<p>  By default, the NDK build system generates code for all non-deprecated ABIs. You can use the <code>APP_ABI</code> settings to generate code for specific ABIs. Table 1 shows the <code>APP_ABI</code> settings for different instruction sets.</p>
<p>  Table 1. <code>APP_ABI</code> settinsg for different instruction sets.</p>
<p>  // TODO table</p>
<p>  You can also specify multiple values by placing them on the same line, delimited by spaces. For example: </p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">APP_ABI := armeabi-v7a arm64-v8a x86</span><br></pre></td></tr></table></figure>

<p>  For the list of all supported ABIs and details about their usage and limitations, refer to <a href="https://developer.android.google.cn/ndk/guides/abis" target="_blank" rel="noopener">ABI Management</a></p>
</li>
<li><p>APP_ASFLAGS</p>
<p>  Flags to be passed to the assmebler for every assembly source file(<code>.a</code> and <code>.S</code> files) in the project</p>
</li>
<li><p>APP_ASMFLAGS</p>
<p>  Flags to be passed to YASM when for all YASM source files(<code>.asm</code>, x86/x86_64 only)</p>
</li>
<li><p>APP_BUILD_SCRIPT</p>
<p>  By default, ndk-build assumes that the <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> file is located at <code>jni/Android.mk</code> relative to the project root. </p>
<p>  To load an <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> file from a different location, set <code>APP_BUILD_SCRIPT</code> to the absolute path of the Android.mk file</p>
</li>
<li><p>APP_CFLAGS</p>
<p>  Flags to be passed for all C/C++ compiles in the project.</p>
<p>  See also: <a href="https://developer.android.google.cn/ndk/guides/application_mk#app-conlyflags" target="_blank" rel="noopener">APP_CONLYFLAGS</a>, <a href="https://developer.android.google.cn/ndk/guides/application_mk#app-cppflags" target="_blank" rel="noopener">APP_CPPFLAGS</a>.</p>
</li>
<li><p>APP_CLANG_TIDY</p>
<p>  Set to true to enable clang-tidy for all modules in the project. Disabled by default.</p>
</li>
<li><p>APP_CLANG_TIDY_FLAGS</p>
<p>  Flags to pass for all clang-tidy executions in the project.</p>
</li>
<li><p>APP_CONLYFLAGS</p>
<p>  Flags to be passed for all C compiles in the project. These flags will not be used for C++ code.</p>
<p>  See also: <a href="https://developer.android.google.cn/ndk/guides/application_mk#app-cflags" target="_blank" rel="noopener">APP_CFLAGS</a>, <a href="https://developer.android.google.cn/ndk/guides/application_mk#app-cppflags" target="_blank" rel="noopener">APP_CPPFLAGS</a>.</p>
</li>
<li><p>APP_CPPFLAGS</p>
<p>  Flags to be passed for all C++ compiles in the project. These flags will not be used for C code.</p>
<p>  See also: <a href="https://developer.android.google.cn/ndk/guides/application_mk#app-cflags" target="_blank" rel="noopener">APP_CFLAGS</a>, <a href="https://developer.android.google.cn/ndk/guides/application_mk#app-conlyflags" target="_blank" rel="noopener">APP_CONLYFLAGS</a>.</p>
</li>
<li><p>APP_CXXFLAGS</p>
<p>  Identical to <code>APP_CPPFLAGS</code>, but will appear after <code>APP_CPPFLAGS</code> in the compile command. For example:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">APP_CPPFLAGS := -DFOO</span><br><span class="line">APP_CXXFLAGS := -DBAR</span><br></pre></td></tr></table></figure>

<p>  The above configuration will result in a compilation command similar to <code>clang++ -DFOO -DBAR</code> rather than <code>clang++ -DBAR -DFOO</code>.</p>
</li>
<li><p>APP_DEBUG</p>
<p>  Set to true to build a debuggable application.</p>
</li>
<li><p>APP_LDFLAGS</p>
<p>  Flags to be passed when linking executables and shared libraries.</p>
</li>
<li><p>APP_MANIFEST</p>
<p>  Absolute path to an AndroidManifest.xml file.</p>
<p>  By default, <code>$(APP_PROJECT_PATH)/AndroidManifest.xml)</code> will be used if it exists.</p>
</li>
<li><p>APP_MODULES</p>
<p>  An explicit list of modules to build. The elements of this list are the names of the modules as they appear in <code>LOCAL_MODULE</code> within the <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> file.</p>
<p>  By default, ndk-build will build all shared libraires, executables, and their dependencies. Static libraries will be built only if they are used by the project, the project contains only static libraries, or they are named in <code>APP_MODULE</code>. (Note: Imported modules (those defined in build scripts imported with $(call import-module) will not be built unless depended on by a module to be built or listed in APP_MODULES)</p>
</li>
<li><p>APP_OPTIM</p>
<p>  Define this optional variable as either <code>release</code> or <code>debug</code>. Release binaries will be built by default.</p>
<p>  Release mode enables optimizations and may produce binaries that are not usable with a debugger. Debug mode disables optimizations so that debuggers may be used.</p>
<p>  Note that you can debug either release or debug binaries. Releasee binaries, however, provide less information during debugging. For example, variables may be optimized out, preventing inspection. Also, code re-ordering can make it more difficult to step through the code; stack traces may not be reliable.</p>
<p>  Declaring <code>android:debuggable</code> in your application manifest’s <code>&lt;application&gt;</code> tag will cause this variable to default to <code>debug</code> instead of <code>release</code>. Override this default value by setting <code>APP_OPTIM</code> to <code>release</code>.</p>
</li>
<li><p>APP_PLATFORM</p>
<p>  <code>APP_PLATFORM</code> declares the Android API level this application is built against and corresponds to the application’s <code>minSdkVersion</code>.</p>
<p>  If not specified, ndk-build will target the minimumAPI level supported by the NDK. The minimum API level supported by the latest NDK will always be low enough to support nearly all active devices.</p>
<p>  For example, a value of `android-16’ specifies that your library uses APIs that are not available below Android 4.1 (API level 16) and can’t be used on devices running a lower platform version. For a complete list of platform names and corresponding Android system images, see <a href="https://developer.android.google.cn/ndk/guides/stable_apis.html" target="_blank" rel="noopener">Android NDK Native APIs</a>.</p>
<p>  When using Gradle and <code>externalNativeBuild</code>, this parameter should not be set directly. Instead, set the <code>minSdkVersion</code> property in the <code>defaultConfig</code> or <code>productFlavors</code> blocks of your <a href="https://developer.android.google.cn/studio/build/index.html#module-level" target="_blank" rel="noopener">module-level</a> <code>build.gradle</code> file. This makes sure your library is used only by apps installed on devices running an adequate version of Android.</p>
<p>  Note that the NDK does not contain libraries for every API level of Android. Versions that did not include new native APIs are omitted to save space in the NDK. ndk-build uses, in descending order of preference:</p>
<ol>
<li>The platform version matching <code>APP_PLATFORM</code>.</li>
<li>The next available API level below <code>APP_PLATFORM</code>. For example, <code>android-19</code> will be used when <code>APP_PLATFORM</code> is <code>android-20</code>, since there were no new native APIs in <code>android-20</code>.</li>
<li>The minimum API level supported by the NDK.</li>
</ol>
</li>
<li><p>APP_PROJECT_PATH</p>
<p>  The absolute path of the project’s root directory</p>
</li>
<li><p>APP_SHORT_COMMANDS<br>  The project-wide equivalent of <code>LOCAL_SHORT_COMMANDS</code>. For more information, see the documentation for <code>LOCAL_SHORT_COMMANDS</code> in <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a>.</p>
</li>
<li><p>APP_STL</p>
<p>  The C++ standard library to use fo this application.</p>
<p>  The <code>system</code> STL is used by default. Other choices are <code>c++_shared</code>, <code>c++_static</code>, and <code>none</code>. See <a href="https://developer.android.google.cn/ndk/guides/cpp-support.html#runtimes" target="_blank" rel="noopener">NDK Runtimes and Features</a>.</p>
</li>
<li><p>APP_STRIP_MODE</p>
<p>  The argument to be passed to <code>strip</code> for modules in this application. Defaults to <code>--strip-unneeded</code>. To avoid stripping all binaries in the module, set to <code>none</code>. For other strip modes, see the <a href="https://sourceware.org/binutils/docs/binutils/strip.html" target="_blank" rel="noopener">strip documentation</a>.</p>
</li>
<li><p>APP_THIN_ARCHIVE</p>
<p>  Set to true to use thin archives for all static libraries in the project. For more information, see the documentation for <code>LOCAL_THIN_ARCHIVE</code> in <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a>.</p>
</li>
<li><p>APP_WRAP_SH</p>
<p>  Path to the <a href="https://developer.android.google.cn/ndk/guides/wrap-script" target="_blank" rel="noopener">wrap.sh</a> file to be included with this application.</p>
<p>  A variant of this variable exists for each ABI, as does an ABI-generic variant:</p>
<ul>
<li>APP_WRAP_SH</li>
<li>APP_WRAP_SH_armeabi-v7a</li>
<li>APP_WRAP_SH_arm64-v8a</li>
<li>APP_WRAP_SH_x86</li>
<li>APP_WRAP_SH_x86_64</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-NDK build</title>
    <url>/posts/e03339a9/</url>
    <content><![CDATA[<h2 id="ndk-build"><a href="#ndk-build" class="headerlink" title="ndk-build"></a>ndk-build</h2><p><a href="https://developer.android.google.cn/ndk/guides/ndk-build" target="_blank" rel="noopener">Reference</a></p>
<p>The <code>ndk-build</code> script builds projects that use the NDK’s Make-based build system. There is more sepcific documentation for the <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> and <a href="https://developer.android.google.cn/ndk/guides/application_mk.html" target="_blank" rel="noopener">Application.mk</a> configuration used by <code>ndk-build</code>.</p>
<h3 id="Internals"><a href="#Internals" class="headerlink" title="Internals"></a>Internals</h3><p>Running the <code>ndk-build</code> script is equivalent to running the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">GNUMAKE -f &lt;ndk&gt;/build/core/build-local.mk</span></span><br><span class="line">&lt;parameters&gt;</span><br></pre></td></tr></table></figure>

<p><code>$GNUMAKE</code> points to GNU Make 3.81 or later, and <code>&lt;ndk&gt;</code> points to your NDK installation directory. You can use this information to invoke ndk-build from other shell scripts, or even your own make files.</p>
<h3 id="Invoking-from-the-Command-Line"><a href="#Invoking-from-the-Command-Line" class="headerlink" title="Invoking from the Command Line"></a>Invoking from the Command Line</h3><p>The <code>ndk-build</code> script lives in the top level NDK install directory. To run it from the command line, invoke it while in or under your application project directory. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;project&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> &lt;ndk&gt;/ndk-build</span></span><br></pre></td></tr></table></figure>

<p>In this example, <code>&lt;project&gt;</code> points to your project’s root directory, and <code>&lt;ndk&gt;</code> is the directory where you installed the NDK.</p>
<h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><p>All parameters to ndk-build are passed directly to the underlying GNU <code>make</code> command that runs the NDK build scripts. Combine <code>ndk-build</code> and options in the form <code>ndk-build</code> <code>&lt;option&gt;</code>. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ndk-build clean</span></span><br></pre></td></tr></table></figure>

<p>The following options are available:</p>
<ul>
<li>clean<br>  Remove any previously generated binaries. (On Mac OS X, running ndk-build clean with a high number of parallel executions may result in a build error that includes the following message: “rm: fts_read: No such file or directory” To avoid this issue, consider not using the -jN modifier or selecting a smaller value for N, such as 2.)</li>
<li>V=1<br>  Launch build, and display build commands.</li>
<li>-B<br>  Force a complete rebuild</li>
<li>-B V=1<br>  Force a complete rebuild, and display build commands</li>
<li>NDK_LOG=1<br>  Display internal NDK log messages(used for debugging the NDK iteself)</li>
<li>NDK_DEBUG=1<br>  Force a debuggable build(see <a href="https://developer.android.google.cn/ndk/guides/ndk-build#dvr" target="_blank" rel="noopener">table1</a>)</li>
<li>NDK_DEBUG=0<br>  Force a release build(see <a href="https://developer.android.google.cn/ndk/guides/ndk-build#dvr" target="_blank" rel="noopener">table1</a>)</li>
<li>NDK_HOST_32BIT=1<br>  Always use the toolchain in 32-bit mode(see <a href="https://developer.android.google.cn/ndk/guides/ndk-build#6432" target="_blank" rel="noopener">64-bit and 32-bit Toolchains</a>)</li>
<li>NDK_APPLICATION_MK=<file><br>  Build, using a specific <code>Application.mk</code> file pointed to by the <code>NDK_APPLICATION_MK</code> variable</file></li>
<li>-C <project><br>  Build the native code for the project path located at <project>. Useful if you don’t want to <code>cd</code> to it in your terminal</project></project></li>
</ul>
<h4 id="Debuggable-versus-Release-builds"><a href="#Debuggable-versus-Release-builds" class="headerlink" title="Debuggable versus Release builds"></a>Debuggable versus Release builds</h4><p>//TODO</p>
<h3 id="64-Bit-and-32-Bit-Toolchains"><a href="#64-Bit-and-32-Bit-Toolchains" class="headerlink" title="64-Bit and 32-Bit Toolchains"></a>64-Bit and 32-Bit Toolchains</h3><p>Some toolchains come with both 64-bit and 32-bit versions. For example, directories <code>&lt;ndk&gt;/toolchain/&lt;name&gt;/prebuilt/</code> and <code>&lt;ndk&gt;/prebuilt/</code> may contain both <code>linux-x86</code> and <code>linux-x86_64</code> folders for Linux tools in 32-bit and 64-bit modes, respectively. The ndk-build script automatically chooses a 64-bit version of the toolchain if the host OS supports. You can force the use of a 32-bit toolchain by using <code>NDK_HOST_32BIT=1</code> either in your environment or on the ndk-build command line.</p>
<p>Note that 64-bit tools utilize host resources better (for instance, they are faster, and handle larger programs), and they can still generate 32-bit binaries for Android.</p>
<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You need GNU Make 3.81 or later to use ndk-build or the NDK in general. The build scripts will detect a non-compliant Make tool, and generate an error message.</p>
<p>If you have GNU Make 3.81 installed, but the default <code>make</code> command doesn’t launch it, define <code>GNUMAKE</code> in your environment to point to it before launching ndk-build. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> GNUMAKE=/usr/<span class="built_in">local</span>/bin/gmake</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ndk-build</span></span><br></pre></td></tr></table></figure>

<p>You can override other host prebuilt tools in <code>$NDK/prebuilt/&lt;OS&gt;/bin/</code> with the following environment variables:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> NDK_HOST_AWK=&lt;path-to-awk&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> NDK_HOST_ECHO=&lt;path-to-echo&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> NDK_HOST_CMP=&lt;path-to-cmp&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-NDK Concepts</title>
    <url>/posts/9f89c6d1/</url>
    <content><![CDATA[<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p><a href="https://developer.android.google.cn/ndk/guides/concepts" target="_blank" rel="noopener">Reference</a></p>
<h3 id="Before-Beginning"><a href="#Before-Beginning" class="headerlink" title="Before Beginning"></a>Before Beginning</h3><p>This guide assumes that you are already familiar with concepts inherent in native programming and in <a href="https://developer.android.google.cn/develop/index.html" target="_blank" rel="noopener">Android development</a>.</p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This section provides a high-level explanation of how the NDK works. The Android NDK is a set of tools allowing you to embed C or C++(“native code”) into your Android apps. The ability to use native code in Android apps can be particularly useful to developers who wish to do one or more of the following: </p>
<ul>
<li>Port their apps between platforms.</li>
<li>Reuse existing libraries, or provide their own libraries for reuse.</li>
<li>Increase performance in certain cases, particularly computationally intensive onses like games</li>
</ul>
<h3 id="How-it-Works"><a href="#How-it-Works" class="headerlink" title="How it Works"></a>How it Works</h3><p>This section introduces the main components used in building a native application for Android, and goes on to describe the process of building and packaging.</p>
<h4 id="Main-components"><a href="#Main-components" class="headerlink" title="Main components"></a>Main components</h4><p>You should have an understanding of the following components as you build your app: </p>
<ul>
<li>Native shared libraries: The NDK builds these libraries, or <code>.so</code> files, from the your C/C++ source code.</li>
<li>Native static libraries: The NDK can also build static libraries, or <code>.a</code> files, which you can link into other libraries</li>
<li>Java Native Interface(JNI): The JNI is the interface via which the Java and C++ components talk to on another. This guide assumes knowledge of the JNI; for information about it , consult the <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html" target="_blank" rel="noopener">Java Native Interface Specification</a></li>
<li>Application Binary Interface(ABI): The ABI defines exactly how your app’s machine code is expected to interact with the system at runtime. The NDK build <code>.so</code> files against these definitions. Different ABIs correspond to different architectures: The NDK includes ABI support for 32-bit ARM, AARch64, x86 and x86-64. For more information, see <a href="https://developer.android.google.cn/ndk/guides/abis.html" target="_blank" rel="noopener">ABI Management</a>.</li>
<li>Manifest: If you are writing an app with no Java component to it, you must declare the <a href="https://developer.android.google.cn/reference/android/app/NativeActivity.html" target="_blank" rel="noopener">NativeActivity</a> class in the <a href="https://developer.android.google.cn/guide/topics/manifest/manifest-intro.html" target="_blank" rel="noopener">manifest</a>. <a href="https://developer.android.google.cn/ndk/guides/concepts#naa" target="_blank" rel="noopener">Native Activities and Applications</a> provides more detail on how to do this, under “Using the <code>native_activity.h</code> interface.”</li>
</ul>
<h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p>The general flow for devleoping a native app for Android is as follows:</p>
<ol>
<li>Design your app, deciding which parts to implement in Java, and which parts to implement as native code.</li>
<li>Create an Android app Project as you would for any other Android project.</li>
<li>If you are writing a native-only app, declare the <a href="https://developer.android.google.cn/reference/android/app/NativeActivity.html" target="_blank" rel="noopener">NativeActivity</a> class in <code>AndroidManifest.xml</code>. For more information, see the <a href="https://developer.android.google.cn/ndk/guides/concepts#naa" target="_blank" rel="noopener">Native Activities and Applications</a>.</li>
<li>Create an <code>Android.mk</code> file describing the native library, including name, flags, linked libraires, and source files to be compiled in the “JNI” directory.</li>
<li>Optionally, you can create an <code>Application.mk</code> file configuring the target ABIs, toolchain, release/debug mode, and STL. For any for these that you do not specify, the following default values are used, respectively:<ul>
<li>ABI: all non-deprecated ABIs</li>
<li>Toolchain: Clang</li>
<li>Mode: Release</li>
<li>STL: system</li>
</ul>
</li>
<li>Place your native source under the project’s <code>jni</code> directory</li>
<li>Use nd-build to compile the native(<code>.so</code>, <code>.a</code>) libraires</li>
<li>Build the Java component, producing the executable <code>.dex</code> file.</li>
<li>Package everything into an APK file, containing <code>.so</code>, <code>.dex</code> and other files needed for your app to run</li>
</ol>
<h3 id="Native-Activities-and-Applications"><a href="#Native-Activities-and-Applications" class="headerlink" title="Native Activities and Applications"></a>Native Activities and Applications</h3><p>// TODO not needed now </p>
<h3 id="Additional-sample-code"><a href="#Additional-sample-code" class="headerlink" title="Additional sample code"></a>Additional sample code</h3><p>To download NDK samples, see <a href="https://github.com/googlesamples/android-ndk/" target="_blank" rel="noopener">NDK Samples</a>.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Getting Started with the NDK</title>
    <url>/posts/516f7653/</url>
    <content><![CDATA[<h2 id="Getting-Started-with-the-NDK"><a href="#Getting-Started-with-the-NDK" class="headerlink" title="Getting Started with the NDK"></a>Getting Started with the NDK</h2><p><a href="https://developer.android.google.cn/ndk/guides" target="_blank" rel="noopener">Reference</a></p>
<p>The Native Development Kit(NDK) is a set of tools that allows you to use C and C++ code with Android, and provides <a href="https://developer.android.google.cn/ndk/guides/stable_apis.html" target="_blank" rel="noopener">platform libraries</a> you can use to manage native activities and access physical device components, such as sensors and touch input. The NDK may not be appropriate for most novice Android programmers who need to use only Java code and framework APIs to develop their apps. However, the NDK can be useful for cases in which you need to do one or more of the following:</p>
<ul>
<li>Squeeze extra performance out of a device to archive low latency or run computationally intensive applications, such as games or physics simulations.</li>
<li>Reuse your own or other developers’ C or C++ libraries</li>
</ul>
<p>Using <a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="noopener">Android Studio 2.2 and higher</a>, you can use the NDK to compile C and C++ code into a native library and package it into your APK using Gradle, the IDE’s integrated build system. Your Java code can then call functions in your native library through the <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html" target="_blank" rel="noopener">Java Native Interface (JNI)</a> framework. To learn more about Gradle and the Android build system, read <a href="https://developer.android.google.cn/studio/build/index.html" target="_blank" rel="noopener">Configure Your Build</a>.</p>
<p>Android Studio’s default build tool to compile native library is <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a>. Android Studio also supports <a href="https://developer.android.google.cn/ndk/guides/ndk-build.html" target="_blank" rel="noopener">ndk-build</a> due to the large number of existing projects that use the build toolkit. However, if you are creating a new native library, you should use CMake.</p>
<p>This guide gives you the information you need to get up and running with the NDK on Android Studio. If you don’t have the latest version of Android Studio, <a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="noopener">download and install it now</a>.</p>
<h3 id="Download-the-NDK-and-Tools"><a href="#Download-the-NDK-and-Tools" class="headerlink" title="Download the NDK and Tools"></a>Download the NDK and Tools</h3><p>To complile and debug native code for your app, you need the following components:</p>
<ul>
<li>The Android Native Development Kit(NDK): a set of tools that allows you to use C and C++ code with Android.</li>
<li>CMake: an external build tool that works alongside Gradle to build your native library. You do not need this component if you only plan to use ndk-build.</li>
<li>LLDB: the debugger Android Studio uses to debug native code.</li>
</ul>
<p>For information on installing these components, see <a href="https://developer.android.google.cn/studio/projects/install-ndk.md" target="_blank" rel="noopener">install and configure the NDK, CMake, and LLDB</a>.</p>
<h3 id="Create-or-import-a-Native-Project"><a href="#Create-or-import-a-Native-Project" class="headerlink" title="Create or import a Native Project"></a>Create or import a Native Project</h3><p>Once you set up Android Studio, you can simply <a href="https://developer.android.google.cn/studio/projects/add-native-code.html#new-project" target="_blank" rel="noopener">Create a New Project with C/C++ Support</a>. However , if you want to add or import native code to an existing Android Studio project, you need to follow this basic process: </p>
<ol>
<li><a href>Create new native source files</a> and add them to your Android Studio project.<ul>
<li>You can skip this step if you already have native code or want to import a prebuilt native library</li>
</ul>
</li>
<li><a href="https://developer.android.google.cn/studio/projects/add-native-code.html#create-cmake-script" target="_blank" rel="noopener">Create a CMake build script</a> to tell CMake how to build your native sources into a library. You also require this build script if you are importing and linking against prebuilt or platform libraries.<ul>
<li>You can skip this step if you existing native library already has a <code>CMakeList.txt</code> build script, or uses ndk-build and includes an <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> build script.</li>
</ul>
</li>
<li><a href="https://developer.android.google.cn/studio/projects/add-native-code.html#link-gradle" target="_blank" rel="noopener">Link Gradle to your native library</a> by providing a path to your CMake or ndk-build script file. Gradle uses the build script to import source code into your Android Studio project and package your native library(the SO file) into the APK.</li>
<li><a href="https://developer.android.google.cn/studio/run/index.html" target="_blank" rel="noopener">Build and run your app</a> by clicking <code>Run</code>. Gradle adds your CMake or ndk-build process as a dependency to compile, build, and package your native library with your APK.</li>
</ol>
<p>Once your app is running on a physical device or the emulator, you can use Android Studio to <a href="https://developer.android.google.cn/studio/debug/index.html" target="_blank" rel="noopener">Debug Your App</a>. Otherwise, to learn more about the NDK and its components, read the <a href="https://developer.android.google.cn/ndk/guides/concepts.html" target="_blank" rel="noopener">Concetps</a> page.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidNDK</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Build your app from the command line</title>
    <url>/posts/70d0c793/</url>
    <content><![CDATA[<h2 id="Build-your-app-from-the-command-line"><a href="#Build-your-app-from-the-command-line" class="headerlink" title="Build your app from the command line"></a>Build your app from the command line</h2><p><a href="https://developer.android.com/studio/build/building-cmdline" target="_blank" rel="noopener">Reference</a></p>
<p>You can execute all the build tasks available to your Android project using the <a href>Gradle wrapper</a> command line tool. It’s available as a batch file for Windows(<code>gradlew.bat</code>) and a shell script for Linux and Mac(<code>gradlew.sh</code>), and it’s accessible from the root of each project you create with Android Studio.</p>
<p>To run a task with the wrapper, use one of the following commands from a Terminal window(from Android Studio, select <code>View &gt; Tool Windows &gt; Terminal</code>):</p>
<ul>
<li><p>On Windows:</p>
<p>  gradlew task-name</p>
</li>
<li><p>on Mac or Linux:</p>
<p>  ./gradlew task-name</p>
</li>
</ul>
<p>To see a list of all available build tasks for your project, execute <code>tasks</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gradlew tasks</span><br></pre></td></tr></table></figure>

<p>The rest of this page describes the basics to build and run your app with the Gradle wrapper. For more information about how to set up your Android build, see <a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="noopener">Configure your build</a>.</p>
<p>If you’d prefer to use the Android Studio tools instead of the command line tools, see <a href="https://developer.android.com/studio/run/index.html" target="_blank" rel="noopener">Build and run your app</a></p>
<h3 id="About-build-types"><a href="#About-build-types" class="headerlink" title="About build types"></a>About build types</h3><p>By default, there are two build types avaiable for every Android app: one for debugging your app-the <code>debug</code> build - and one for releasing your app to users-the <code>release</code> build. The resulting output from each build must be signed with a certificate before you can deploy your app to a device. The debug build is automatically signed with a debug key provided by the SDK tools(it’s insecure and you connot publish with it into the Google Play Store), and the release build must be signed with your own private key.</p>
<p>If you want to build your app for release, it’s important that you also <a href="https://developer.android.com/studio/build/building-cmdline#sign_cmdline" target="_blank" rel="noopener">sign your app</a> with the appropriate signing key. If you’re just getting started, however, you can quickly run your apps on an emulator or a connected device by <a href="https://developer.android.com/studio/build/building-cmdline#DebugMode" target="_blank" rel="noopener">building a debug APK</a>.</p>
<p>You can also define a custom build type in your <code>build.gradle</code> file and configure it to be signed as a debug build by including <code>debuggable true</code>. For more information, see <a href="https://developer.android.com/studio/build/build-variants.html" target="_blank" rel="noopener">Configure Build Variants</a>.</p>
<h3 id="Build-and-deploy-an-APK"><a href="#Build-and-deploy-an-APK" class="headerlink" title="Build and deploy an APK"></a>Build and deploy an APK</h3><p>Although <a href="https://developer.android.com/studio/build/building-cmdline#build_bundle" target="_blank" rel="noopener">build an app bundles</a> is the best way to package your app and upload it to the Play Console, building an APK is better suited for when you want to quickly test a debug build or share your app as a deployable artifact with others.</p>
<h4 id="Build-a-debug-APK"><a href="#Build-a-debug-APK" class="headerlink" title="Build a debug APK"></a>Build a debug APK</h4><p>For immediate app testing and debugging, you can build a debug APK. The debug APK is signed with a debug key provided by the SDK tools and allows debugging throught <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">adb</a>.</p>
<p>To build a debug APK, open a command line and navigate to the root of your project directory. To initiate a debug build, invoke the <code>assembleDebug</code> task:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gradlew assembleDebug</span><br></pre></td></tr></table></figure>

<p>This creates an APK named <code>module_name-debug.apk</code> in <code>project_name/module_name/build/outputs/apk/</code>. The file is already signed with the debug key and aligned with <a href="https://developer.android.com/tools/help/zipalign.html" target="_blank" rel="noopener">zipalign</a> so you can immediately install it on a device.</p>
<p>Or to build the APK and immediately install it on a running emulator or connected device, instead invoke <code>installDebug</code>: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gradlew installDebug</span><br></pre></td></tr></table></figure>

<p>The “Debug” part in the above task names is just a camel-case version of the <a href="https://developer.android.com/studio/build/build-variants.html" target="_blank" rel="noopener">build variant</a> name, so it can be replaced with whichever build type or vairant you want to assemble or install. For example, if you have a “demo” product flavor, then you can build the debug version with the <code>assembleDemoDebug</code> task.</p>
<p>To see all the build and install tasks available for each variant(including uninstall tasks), run the <code>tasks</code> task.</p>
<p>Also see the section about how to <a href="https://developer.android.com/studio/build/building-cmdline#RunningOnEmulator" target="_blank" rel="noopener">run your app on the emulator</a> and <a href="https://developer.android.com/studio/build/building-cmdline#RunningOnDevice" target="_blank" rel="noopener">run your app on a device</a>.</p>
<h4 id="Build-a-release-APK"><a href="#Build-a-release-APK" class="headerlink" title="Build a release APK"></a>Build a release APK</h4><p>When you’re ready to release and distribute your app, you must build a release APK that is signed with your private key. For more information, go to section about how to [sign your app from the command line].(<a href="https://developer.android.com/studio/build/building-cmdline#sign_cmdline" target="_blank" rel="noopener">https://developer.android.com/studio/build/building-cmdline#sign_cmdline</a>)</p>
<h4 id="Deploy-your-app-to-the-emulator"><a href="#Deploy-your-app-to-the-emulator" class="headerlink" title="Deploy your app to the emulator"></a>Deploy your app to the emulator</h4><p>To use the Android Emulator, you must <a href="https://developer.android.com/studio/run/managing-avds.html#createavd" target="_blank" rel="noopener">create an Android Virtual Device (AVD)</a> using Android Studio.</p>
<p>Once you have an AVD, start the Android Emulator and install your app as follows:</p>
<ol>
<li>In a command line, navigate to <code>android_sdk/tools/</code> and start the emulator by specifying your AVD:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">emulator -avd avd_name</span><br></pre></td></tr></table></figure>

<p>If you’re unsure of the AVD name, execute `emulator -list-avds’</p>
<ol start="2">
<li>Now you can install your app using either one of the Gradle install tasks mentioned in the section about how to <a href="https://developer.android.com/studio/build/building-cmdline#DebugMode" target="_blank" rel="noopener">build a debug APK</a> or the <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">adb</a> tool.</li>
</ol>
<p>If the APK is built using a developer preview SDK (if the <code>targetSdkVersion</code> is letter instead of a number), you must include the <a href="https://developer.android.com/studio/command-line/adb.html#-t-option" target="_blank" rel="noopener">-t option</a> with the <code>install</code> command to install a test APK.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb install path/to/your_app.apk</span><br></pre></td></tr></table></figure>

<p>All APKs you build are saved in <code>project_name/module_name/build/outputs/apk/</code>.</p>
<p>For more information, see <a href="https://developer.android.com/studio/run/emulator.html" target="_blank" rel="noopener">Run Apps on the Android Emulator</a>.</p>
<h4 id="Deploy-your-app-to-a-physical-device"><a href="#Deploy-your-app-to-a-physical-device" class="headerlink" title="Deploy your app to a physical device"></a>Deploy your app to a physical device</h4><p>Before you can run your app on a device, you must enable <code>USB debugging</code> on your device. You can find the option under <code>Settings &gt; Developer options</code>.</p>
<p>Once your device is set up and connected via USB, you can install your app using either the Gradle install tasks mentioned in the section about how to <a href="https://developer.android.com/studio/build/building-cmdline#DebugMode" target="_blank" rel="noopener">build a debug APK</a> or the <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">adb</a> tool:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb -d install path/to/your_app.apk</span><br></pre></td></tr></table></figure>

<p>All APKs you build are saved in <code>project_name/module_name/build/outputs/apk/</code></p>
<p>For more information, see <a href="https://developer.android.com/studio/run/device.html" target="_blank" rel="noopener">Run Apps on a Hardware Device</a>.</p>
<h3 id="Build-an-app-bundle"><a href="#Build-an-app-bundle" class="headerlink" title="Build an app bundle"></a>Build an app bundle</h3><p><a href>Android App Bundles</a> include all your app’s compiled code and resources, but defer APK generation and signing to Google Play. Unlike an APK, you can’t deploy an app bundle directly to a device. So, if you want to quickly test or share an APK with someone else, you should instead <a href="https://developer.android.com/studio/build/building-cmdline#build_apk" target="_blank" rel="noopener">build an APK</a>.</p>
<p>The easiest way to build an app bundle is by <a href="https://developer.android.com/studio/run/#reference" target="_blank" rel="noopener">using Android Studio</a>. However, if you need to build an app bundle from the command line, you can do so by using either Gradle or <code>bundletool</code>, as described in the section below.</p>
<h4 id="Build-an-app-bundle-with-Gradle"><a href="#Build-an-app-bundle-with-Gradle" class="headerlink" title="Build an app bundle with Gradle"></a>Build an app bundle with Gradle</h4><p>If you’d rather generate an app bundle from the command line, run the <code>buildVariant</code> Gradle task on your app’s base module. For example, the following command builds an app bundle for the debug version of the base module:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew :base:bundleDebug</span><br></pre></td></tr></table></figure>

<p>If you want to build a signed bundle for upload to the Play Console, you need to first configure the base module’s <code>build.gradle</code> file with your app’s signing information. To learn more, go to the section about how to <a href="https://developer.android.com/studio/build/building-cmdline#gradle_signing" target="_blank" rel="noopener">Configure Gradle to sign your app</a>. You can then, for example, build the release version of your app, and Gradle automatically generates an app bundle and signs it with the signing information you provide in the <code>build.gradle</code> file.</p>
<p>If you instead want to sign an app bundle as a separate step, you can use <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jarsigner.html" target="_blank" rel="noopener">jarsigner</a> to sign your app bundle from the command line.</p>
<h4 id="Build-an-app-bundle-using-bundletool"><a href="#Build-an-app-bundle-using-bundletool" class="headerlink" title="Build an app bundle using bundletool"></a>Build an app bundle using bundletool</h4><p><code>bundletool</code> is a command line tool that Android Studio, the Android Gradle plugin, and Google Play use to convert your app’s compiled code and resources into app bundles, and generate deployable APKs from those bundles.</p>
<p>So, while it’s useful to <a href>test app bundles with bundletool</a> and locally recreate how Google Play generates APKs, you typically won’t need to invoke <code>bundletool</code> to build the app bundle itself-you should instead use Android Studio or Gradle tasks, as described in previous sections.</p>
<p>However, if you don’t want to use Android Studio or Gradle tasks to build bundles-for example, if you use a custom build toolchain-you can use <code>bundletool</code> from the command line to build an app bundle from pre-compiled code and resources. If you haven’t already done so, download <a href="https://github.com/google/bundletool/releases" target="_blank" rel="noopener">bundletool</a> from the GitHub repository.</p>
<p>This section describes how to package your app’s compiled code and resources, and how to use <code>bundletool</code> from the command line to convert them into an Android App Bundle.</p>
<ul>
<li>Generate the manifest and resources in proto format</li>
</ul>
<p><code>bundletool</code> requries certain information about your app project, such as the app’s manifest and resources, to be in <a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">Google’s Protocal Buffer format</a>-which is also known as “protobuf” and uses the <code>*.pb</code> file extendsion. Protobufs provides a language-neutral, platform-neutral, and extensible mechanism for serializing structured data-it’s similiar to XML, but smaller, faster, and simpler.</p>
<ul>
<li>Download AAPT2</li>
</ul>
<p>You can generate your app’s manifest file and resource table in protobuf format using the latest version of AAPT2 from the <a href="https://developer.android.com/studio/build/dependencies#google-maven" target="_blank" rel="noopener">Google Maven Repository</a></p>
<p>To download AAPT2 from Google’s Maven repository, proceed as follows:</p>
<ol>
<li>Navigate to <code>com.android.tools.build &gt; aapt2</code> in the <a href="https://maven.google.com/" target="_blank" rel="noopener">repository index</a>.</li>
<li>Copy the name of the latest version of AAPT2.</li>
<li>Insert the version name you copied into the following URL and specify your target operating system: <a href="https://dl.google.com/dl/android/maven2/com/android/tools/build/aapt2/aapt2-version/aapt2-aapt2-version-[windows" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/com/android/tools/build/aapt2/aapt2-version/aapt2-aapt2-version-[windows</a> | linux | osx].jar  </li>
</ol>
<p>For example, to download version 3.2.0-alpha18-4804415 for Windows, you would use: <a href="https://dl.google.com/dl/android/maven2/com/android/tools/build/aapt2/3.2.0-alpha18-4804415/aapt2-3.2.0-alpha18-4804415-windows.jar" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/com/android/tools/build/aapt2/3.2.0-alpha18-4804415/aapt2-3.2.0-alpha18-4804415-windows.jar</a></p>
<ol start="4">
<li>Navigate to the URL in a browser—AAPT2 should begin downloading shortly.</li>
<li>Unpackage the JAR file you just downloaded.</li>
</ol>
<ul>
<li>Compile and link your app’s resources</li>
</ul>
<p>Use AAPT2 to compile your app’s resources with the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aapt2 compile \</span><br><span class="line">project_root/module_root/src/main/res/drawable/Image1.png \</span><br><span class="line">project_root/module_root/src/main/res/drawable/Image2.png \</span><br><span class="line">-o compiled_resources/</span><br></pre></td></tr></table></figure>

<p>During the link phase, where AAPT2 links your various compiled resources into a single APK, instruct AAPT2 to convert your app’s manifest and compiled resources into the protobuf format by including the <code>--proto-format</code> flag, as shown below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aapt2 link --proto-format -o output.apk \</span><br><span class="line">-I android_sdk/platforms/android_version/android.jar \</span><br><span class="line">--manifest project_root/module_root/src/main/AndroidManifest.xml \</span><br><span class="line">-R compiled_resources/*.flat \</span><br><span class="line">--auto-add-overlay</span><br></pre></td></tr></table></figure>

<p>You can then extract content from the output APK, such as your app’s AndroidManifest.xml, resources.pb, and other resource files—now in the protobuf format. You need these files when preparing the input bundletool requires to build your app bundle, as described in the following section.</p>
<ul>
<li>Package pre-compiled code and resources</li>
</ul>
<p>Before you use <code>bundletool</code> to generate an app bundle for your app, you must first provide ZIP files that each contain the compiled code and resources for a given app module. The content and organization of each module’s ZIP file is very similar to that of <a href="https://developer.android.com/guide/app-bundle#aab_format" target="_blank" rel="noopener">the Android App Bundle format</a>. For example, you should create a <code>base.zip</code> file for your app’s base module and organize its contents as follows:</p>
<p>// TODO table</p>
<p>After you prepare the ZIP file for each module of your app, you can pass them to <code>bundletool</code> to build your app bundle, as described in the following section.</p>
<ul>
<li>Build your app bundle using bundletool</li>
</ul>
<p>To build your app bundle, you use the <code>bundletool build-bundle</code> command, as shown below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bundletool build-bundle --modules=base.zip --output=mybundle.aab</span><br></pre></td></tr></table></figure>

<p>The following table describes flag for the <code>build-bundle</code> command in more detail:</p>
<p>//TODO table</p>
<ul>
<li>Customize downstream APK generation </li>
</ul>
<p>App bundles include a <code>BundleConfig.pb</code> file that provides metadata that app stores, such as Google Play, require when generating APKs from the bundle. Although <code>bundletool</code> create this file for you, you can configure some aspects of the metadata in a <code>BundleConfig.json</code> file and pass it to the <code>buldtool build-bundle</code> command -<code>buildtool</code> later converts and merges this file with the protobuf version included in each app bundle.</p>
<p>For example, you can control which categories of configuration APKs to enable or disable. The following example of an <code>BundleConfig.json</code> file disables configuration APKs that each target a different langauge(that is, resources for all languages are included in their respective base or dynamic feature APKs):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "optimizations": &#123;</span><br><span class="line">    "splitsConfig": &#123;</span><br><span class="line">      "splitDimension": [&#123;</span><br><span class="line">        "value": "LANGUAGE",</span><br><span class="line">        "negate": true</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In your <code>BundleConfig.json</code> file, you can also specify which file types to leave uncompressed when packaging APKs using <a href="https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob" target="_blank" rel="noopener">glob patterns</a>, as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "compression": &#123;</span><br><span class="line">    "uncompressedGlob": ["res/raw/**", "assets/**.uncompressed"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Keep in mind, by default, bundletool does not compress your app’s native libraries (on Android 6.0 or higher) and resource table (resources.arsc). For a full description of what you can configure in your BundleConfig.json, inspect the <a href="https://github.com/google/bundletool/blob/master/src/main/proto/config.proto" target="_blank" rel="noopener">bundletool config.proto file</a>, which is written using <a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">Proto3</a> syntax.</p>
<h4 id="Deploy-your-app-from-an-app-bundle"><a href="#Deploy-your-app-from-an-app-bundle" class="headerlink" title="Deploy your app from an app bundle"></a>Deploy your app from an app bundle</h4><p>If you’ve built and signed an app bundle, <a href="https://developer.android.com/studio/command-line/bundletool" target="_blank" rel="noopener">use bundletool</a> to generate APKs and deploy them to a device.</p>
<h3 id="Sign-your-app-from-command-line"><a href="#Sign-your-app-from-command-line" class="headerlink" title="Sign your app from command line"></a>Sign your app from command line</h3><p>You do not need Android Studio to sign your app. You can sign your app from  the command line, using <code>apksigner</code> for APKs or <code>jarsigner</code> for app undles, or configure Gradle to sign it for you during the build. Either way, you need to first generate a private key using <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="noopener">keytool</a> as shown below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -genkey -v -keystore my-release-key.jks</span><br><span class="line">-keyalg RSA -keysize 2048 -validity 10000 -alias my-alias</span><br></pre></td></tr></table></figure>

<p>The example above prompts you for passwords for the keystore and key, and for the “Distinguished Name” field for your key. It then generates the keystore as a file called <code>my-release-key.jks</code>, saving it in the current directory(you can move it wherever you’d like). The keystore contains a single key that is valid for 10000 days.</p>
<p>Now you can sign your APK or app bundle manually, or configure Gradle to sign your app during the build process, as described in the sections below.</p>
<h4 id="Sign-your-app-manually-from-the-command-line"><a href="#Sign-your-app-manually-from-the-command-line" class="headerlink" title="Sign your app manually from the command line"></a>Sign your app manually from the command line</h4><p>If you want to sign an app bundle from the command line, you can use <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jarsigner.html" target="_blank" rel="noopener">jarsigner</a>. If instead you want to sign an APK, you need to use <code>zipalign</code> and <code>apksigner</code> as described below.</p>
<ol>
<li>Open a command line-from Android Studio, select <code>View &gt; Tool Windows &gt; Terminal</code> - and navigate to the directory where your unsigned APK is located.</li>
<li>Align the unsigned APK using <a href="https://developer.android.com/studio/command-line/zipalign.html" target="_blank" rel="noopener">zipalign</a>:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zipalign -v -p 4 my-app-unsigned.apk my-app-unsigned-aligned.apk</span><br></pre></td></tr></table></figure>

<p><code>zipalign</code> ensures that all uncompressed data starts with a particular byte alignment relative to the start of the file, which may reduce the amount of RAM consumed by an app.</p>
<ol start="3">
<li>Sign your APK with your private key using <a href="https://developer.android.com/studio/command-line/apksigner.html" target="_blank" rel="noopener">apksigner</a>:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apksigner sign --ks my-release-key.jks --out my-app-release.apk my-app-unsigned-aligned.apk</span><br></pre></td></tr></table></figure>

<p>This example outputs the signed APK at <code>my-app-release.apk</code> after signing it with a private key and certificate that are stored in a single KeyStore file: <code>my-release-key.jks</code>.</p>
<p>The <code>apksigner</code> tool supports other signing options, including signing an APK file using separate private key and certificate files, and signing an APK using multiple signers. For more details, see the <a href="https://developer.android.com/studio/command-line/apksigner.html" target="_blank" rel="noopener">apksigner</a> reference.</p>
<ol start="4">
<li>Verify that your APK is signed:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apksigner verify my-app-release.apk</span><br></pre></td></tr></table></figure>

<h4 id="Configure-Gradle-to-sign-your-app"><a href="#Configure-Gradle-to-sign-your-app" class="headerlink" title="Configure Gradle to sign your app"></a>Configure Gradle to sign your app</h4><p>Open the module-level <code>build.gradle</code> file and add the <code>signingConfigs {}</code> block with entries for <code>storeFile</code>, <code>storePassword</code>, <code>keyAlias</code> and <code>keyPassword</code>, and then pass that object to the <code>signingConfig</code> property in your build type. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123; ... &#125;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            // You need to specify either an absolute path or include the</span><br><span class="line">            // keystore file in the same directory as the build.gradle file.</span><br><span class="line">            storeFile file("my-release-key.jks")</span><br><span class="line">            storePassword "password"</span><br><span class="line">            keyAlias "my-alias"</span><br><span class="line">            keyPassword "password"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now, when you build your app by invoking a Gradle task, Gradle signs your app (and runs zipalign) for you.</p>
<p>Additionally, because you’ve configured the release build with your signing key, the “install” task is available for that build type. So you can build, align, sign, and install the release APK on an emulator or device all with the <code>installRelease</code> task.</p>
<p>An app signed with your private key is ready for distribution, but you should first read more about how to <a href="https://developer.android.com/studio/publish/index.html" target="_blank" rel="noopener">publish your app</a> and review the <a href="https://developer.android.com/distribute/tools/launch-checklist.html" target="_blank" rel="noopener">Google Play launch checklist</a>.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidBuild</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-About Android App Bundles</title>
    <url>/posts/8ef0f2e5/</url>
    <content><![CDATA[<h2 id="About-Android-App-Bundles"><a href="#About-Android-App-Bundles" class="headerlink" title="About Android App Bundles"></a>About Android App Bundles</h2><p><a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noopener">Reference</a></p>
<p>An Android App Bundle is a new upload format that includes all your app’s compiled code and resources, but defers APK generation and signing to Google Play.</p>
<p>Google Play’s new app serving model, called Dynamic Delivery, then uses your app bundle to generate and serve optimized APKs for each user’s device configuration, so they download only the code and resources they need to run your app. You no longer have to build , sign, and manage multiple APKs to support different devices, and users get smaller, more optimized downloads.</p>
<p>Additionally, you can add dynamic feature modules to your app project and include them in your app bundle. These modules contain features and assets that you can decide not to include when users first download and install your app. <a href="https://developer.android.com/guide/app-bundle#playcore" target="_blank" rel="noopener">Using the Play Core Library</a>, your app can later request to download those modules as dynamic feature APKs, and, through Dynamic Delivery, Google Play serves only the code and resources for that module to the device.</p>
<p>Publishing with Android App Bundles also increases the app size limit to 150MB without having to use APK expansion files. Keep in mind, this limit applies only to the actual download size, not the publishing size. So, users can download apps as large as 150MB and , with dynamic delivery, all of that storage is used for only the code and resourcecs they need to run the app. When you combine this with support for <a href="https://developer.android.com/topic/performance/reduce-apk-size#reduce-binaries" target="_blank" rel="noopener">uncompressed native libraries</a>, larger apps ,such as games, can reduce disk usage and increase user retention.</p>
<p>If you are using Android Studio 3.2 or higher , most app projects require little effort to support Dynamic Delivery, and you can build an Android App Bundle in just a few clicks. However, adding dynamic feature modules requires a little more effort and possibly refactoring your app.</p>
<p>This page describes the steps to get started building Android App Bundles and describes some important concepts related to app bundles and Dynamic Delivery.</p>
<h3 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h3><p>To build app bundles and support Dynamic Delivery, follow these steps: </p>
<ol>
<li><a href="https://developer.android.com/studio" target="_blank" rel="noopener">Download Android Studio 3.2 or higher</a> - it’s the easiest way to add dyanmic feature modules and build app bundles.</li>
<li><a href="https://developer.android.com/studio/projects/dynamic-delivery" target="_blank" rel="noopener">Add support for Dynamic Delivery</a> by including a base module, organizing code and resources for configuration APKs, and, optionally, adding dynamic feature modules.</li>
<li><a href="https://developer.android.com/studio/run/#reference" target="_blank" rel="noopener">Build an Android App Bundle</a> using Android. If you’re not using the IDE, you can instead <a href="https://developer.android.com/studio/build/building-cmdline#build_bundle" target="_blank" rel="noopener">build an app bundle from the command line</a>.</li>
<li><a href="https://developer.android.com/guide/app-bundle#bundletool" target="_blank" rel="noopener">Test your Android App Bundle</a> by using it to generate APKs that you deploy to a device.</li>
<li><a href="https://support.google.com/googleplay/android-developer/answer/7384423" target="_blank" rel="noopener">Enroll into app signing by Google Play</a>. Otherwise, you can’t upload your app bundle to the Play Console.</li>
<li><a href="https://developer.android.com/studio/publish/upload-bundle" target="_blank" rel="noopener">Publishing your app bundle to Google Play</a>.</li>
</ol>
<h3 id="The-Android-App-Bundle-format"><a href="#The-Android-App-Bundle-format" class="headerlink" title="The Android App Bundle format"></a>The Android App Bundle format</h3><p>An Android APP Bundle is a file(with the <code>.aab</code> file extension) that you upload to Google Play to support Dynamic Delivery.</p>
<p>App bundles are signed binaries that organize your app’s code and resources into modules, as illustrated in figure 1.Code and resources for each module are organized similarly to what you would find in an APK-and that makes sense because each of these modules may be generated as separate APKs. Google Play then uses the app bundle to generate the various APKs that are served to users, such as the base APK, dynamic feature APKs, configuration APKs, and (for devices that do not support split APKs) multi-APKs. The directories that are colored in blue-such as the <code>drawable/</code>, <code>values/</code>, and <code>lib</code> directories-represent code and resources that Google Play uses to create configuration APKs for each module.</p>
<p><img src="https://developer.android.com/images/app-bundle/aab_format-2x.png" alt="The contents of an Android App Bundle with one base module and two dynamic feature modules."></p>
<p>The following list describes some of the app bundle’s files and directories in more detail:</p>
<ul>
<li>base/, feature1/, and feature2/: Each of these top-level directories represents a different module of your app. The base module for your app is always contained in a <code>base</code> directory of the app bundle. However, the directory for each dynamic feature module is given the name specified by the <code>split</code> attribute in the module’s manifest. To learn more, read about the <a href="https://developer.android.com/guide/app-bundle/configure#dynamic_feature_manifest" target="_blank" rel="noopener">Dynamic feature module manifest</a>.</li>
<li>BUNDLE-METADATA/: This directory includes metadata files that contain information useful for tools or app stores. Such metadata files may include ProGuard mappings and the complete list of your app’s DEX files. Files in this directory are not packaged into your app’s APKs.</li>
<li>Module Protocal Buffer(*.pb) files: These files provide metadata that helps describe the contents of each app module to app stores, such as Google Play. For example, <code>BundleConfig.pb</code> provides information about the bundle itself, such as which version of the build tools were used to build the app bundle, and <code>native.pb</code> and <code>resources.pb</code> describe the code and resources in each module, which is useful when Google Play optimizes APKs for different device configurations.</li>
<li>manifest/: Unlike APKs, app bundles store the <code>AndroidManifest.xml</code> file of each module in this separate directory.</li>
<li>dex/ : Unlike APKs, app bundles store the DEX files for each module in this separate directory</li>
<li>res/, lib/ and assets/: These directories are dientical to those in a typical APK. When you upload your app bundle, Google Play inspects these directories and packages only the files that satisfy the target device configuration, while preserving file paths.</li>
<li>root/: This directory stores files that are later relocated to the root of any APK that includes the module that this directory is located in. For example, the <code>base/root</code> directory of an app bundle may include Java-based resources that your app loads using <a href="https://developer.android.com/reference/java/lang/Class.html#getResource(java.lang.String)" target="_blank" rel="noopener">Class.getResource()</a>. Those files are later relocated to the root directory of your app’s base APK and every multi-APK that Google Play generates. Paths within this directory are also preserved. That is, directories(and their subdirectories) are also relocated to the root of the APk.</li>
</ul>
<h4 id="Build-and-deploy-Android-App-Bundles"><a href="#Build-and-deploy-Android-App-Bundles" class="headerlink" title="Build and deploy Android App Bundles"></a>Build and deploy Android App Bundles</h4><p>An app bundle is different from an APK in that you can’t deploy one to a device. Rather, it’s a upload format that includes all your app’s compiled code and resources in a single build artifact. So, after you upload your signed app bundle , Google Play has everything it needs to build and sign your app’s APKs, and serve them to users through Dynamic Delivery.</p>
<p>If you’re using Android Studio, you can <a href="https://developer.android.com/studio/run/#reference" target="_blank" rel="noopener">build your project</a> as a signed app bundle in just a few clicks. If you’re not using the IDE, you can instead <a href="https://developer.android.com/studio/build/building-cmdline#build_bundle" target="_blank" rel="noopener">build an app from the command line.</a> Then, simply <a href="https://developer.android.com/studio/publish/upload-bundle" target="_blank" rel="noopener">upload your app bundle</a> to the Play Console to test or publish your app with Dynamic Delivery.</p>
<h3 id="Test-your-app-bundle"><a href="#Test-your-app-bundle" class="headerlink" title="Test your app bundle"></a>Test your app bundle</h3><p>After you build your Android App Bundle, you should test how Google Play will use it to generate APKs and how those APKs will behave when deployed to a device.</p>
<p>To test your app bundle, use any of the following methods:</p>
<ul>
<li><a href="https://developer.android.com/studio/command-line/bundletool" target="_blank" rel="noopener">Test your Android App Bundle locally using bundletool</a> to generate APKs from your app bundle and deploy them to a connected device.</li>
<li><a href="https://support.google.com/googleplay/android-developer/answer/9303479" target="_blank" rel="noopener">Share your app with a URL</a>. This is the fastest way to upload your app bundle and share your app as a Google Play Store link with trusted tester. Additionally, this is the fastest way to test custom delivery options, such as dowloading features on demand.</li>
<li><a href="https://support.google.com/googleplay/android-developer/answer/3131213" target="_blank" rel="noopener">Set up an open, closed, or internal test.</a>. This is another method to test custom delivery options, such as dowloading features on demand.</li>
</ul>
<h3 id="Download-dynamic-feature-modules-with-the-Play-Core-Library"><a href="#Download-dynamic-feature-modules-with-the-Play-Core-Library" class="headerlink" title="Download dynamic feature modules with the Play Core Library"></a>Download dynamic feature modules with the Play Core Library</h3><p>If your app includes dynamic features, it needs to use the Play Core Library to request, monitor, and manage dynamic feature module downloads. To learn more, go to [Download modules with the Play Core Library].(<a href="https://developer.android.com/guide/app-bundle/playcore" target="_blank" rel="noopener">https://developer.android.com/guide/app-bundle/playcore</a>)</p>
<p>If you want to see the library in action, try the <a href="http://github.com/googlesamples/android-dynamic-features" target="_blank" rel="noopener">Play Core Library sample app</a>.</p>
<h3 id="A-note-about-instant-Apps"><a href="#A-note-about-instant-Apps" class="headerlink" title="A note about instant Apps"></a>A note about instant Apps</h3><p>In Android Studio 3.2 or higher, you can <a href="https://developer.android.com/topic/google-play-instant/getting-started/instant-enabled-app-bundle" target="_blank" rel="noopener">add an instant experience</a> to an app bundle , as long as your app’s size is smaller enough. For details on the size limits for the different types of instant experiences that you can create, see <a href="https://developer.android.com/topic/google-play-instant/overview#reduce-size" target="_blank" rel="noopener">Overview of Google Play Instant</a>.</p>
<h3 id="Compressed-download-size-restriction"><a href="#Compressed-download-size-restriction" class="headerlink" title="Compressed download size restriction"></a>Compressed download size restriction</h3><p>While publishing with Android App Bundles helps your users install your app with the smallest download possible, <code>compressed downloads are limited to 150MB</code>. That is , when a user downloads your app, the total size of the compressed APKs required to install your app(for example, the base APK + configuration APK(s)) must be no more than 150MB. Any subsequent downloads, such as downloading a dynamic feature (and its configuration APK(s)) on demand, must also meet this compressed download size restriction.</p>
<p>When you upload your app bundle, if the Play Console finds any of the possible downloads of your app or its on demand features to be more than 150MB, you get an error.</p>
<p>Keep in mind, <code>Android App Bundles do not support APK expansion(.obb) files</code>. So, if you encounter this error when publishing your app bundle, use one of the following resources to reduce compressed APK download size:</p>
<ul>
<li>Make sure you <a href="https://developer.android.com/studio/projects/dynamic-delivery#disable_config_apks" target="_blank" rel="noopener">enable all configuration APKs </a> by setting <code>enableSplit = true</code> for each type of configuration APK. This makes sure that users download only the code and resources they need to run your app on their device.</li>
<li>Make sure you <a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noopener">shrink your app</a> by removing unused code and resources.</li>
<li>Follow best practices to further [reduce app size].(<a href="https://developer.android.com/topic/performance/reduce-apk-size" target="_blank" rel="noopener">https://developer.android.com/topic/performance/reduce-apk-size</a>)</li>
<li>Consider converting features that are used by only some of your users into <a href="https://developer.android.com/studio/projects/dynamic-delivery#dynamic_feature_modules" target="_blank" rel="noopener">dynamic feature modules</a> that your app can download later, on demand. Keep in mind ,this may require some refactoring of your app, so make sure to first try the other suggestions described above.</li>
</ul>
<h3 id="Known-issues"><a href="#Known-issues" class="headerlink" title="Known issues"></a>Known issues</h3><p>The following are the currently known issues when building Android App Bundles or serving your app using Dynamic Delivery. If you experience issues that are not described below, please <a href="https://issuetracker.google.com/issues/new?component=398856&template=1084213" target="_blank" rel="noopener">report a bug</a>.</p>
<ul>
<li>If you use tools that dynamically modify resource tables, APKs generated from app bundles might behave unexpectedly. So, when building an app bundle, it is recommended taht you disable such tools.</li>
<li>In a dynamic feature module’s manifest, you should not reference resources that don’t exist in the base module. That’s because , when Google Play generates your app’s base APK, it merges manifests for all modules into that of the base APK. So, resource linking breaks if the base APK’s manifest references resources taht don’t exist in the base APK.</li>
<li>As of Android Studio 3.2 Canary 14, when your <a href>change the build variant</a> for your app’s base module, the same build variant is not automatically selected for dynamic feature modules that depand on the base module. So, you might receive an error when building your app. Simply make sure that you select the same build variant for the base module and other modules that depend on it.</li>
<li>It is currently possible to configure properties in a dynamic feature module’s build coniguration that conflict with those from the base(or other) modules. For example, you can set <code>buildTypes.release.debuggable = true</code> in the base module and set it to <code>false</code> in a dynamic feature module. Such conflicts might cause build and runtime issues. Keep in mind, by default, dynamic feature modules inherit some build configurations from the base module. So, make sure you understand which configurations you should keep, and which ones you should omit, in your <a href="https://developer.android.com/guide/app-bundle/configure#feature_build_config" target="_blank" rel="noopener">Dynamic feature module build configuration</a>.</li>
<li>Because app installs may require downloading more than onre APK(such the base APK and a few of its configuration APKs), you should be careful when manually transferring your app’s APKs onto a device(also known as sideloading). Otherwise, your app may experience runtime issues due to missing code and resources.</li>
<li>Currently, Google Play inclues all the code and resources for a dynamic feature module in a single APK. In the near future, for devices running Android 5.0 (API level 21) and higher, serving will be optimized to use configuration APKs.</li>
<li>Downloading dynamic feature modules requires devices to have a recent version of the Play Store app installed. So, if your app includes dynamic feature modules, downloads for a very small percentage of users may fall back to a single optimized multi-APK, which is the same download experience for devices running Android 4.4 (API level 20) and lower.</li>
</ul>
<h3 id="Additional-resources"><a href="#Additional-resources" class="headerlink" title="Additional resources"></a>Additional resources</h3><p>To learn more about Android App Bundles, consult the following resources.</p>
<ul>
<li>Samples  <ul>
<li><a href="http://github.com/googlesamples/android-dynamic-features" target="_blank" rel="noopener">PlayCore API sample</a>, which demonstrates usage of the PlayCore API to request and download dynamic features.</li>
<li><a href="https://github.com/googlesamples/android-dynamic-code-loading" target="_blank" rel="noopener">Dynamic code loading sample</a>, which demonstrates three different approaches to safely access code from an installed dynamic feature module.</li>
</ul>
</li>
<li>Codelabs<ul>
<li><a href="https://codelabs.developers.google.com/codelabs/your-first-dynamic-app/index.html" target="_blank" rel="noopener">Your First Android App Bundle</a>, a codelab that explores the basic principles of Android App Bundles and shows you how to quickly get started with building your own using Android Stuio. This codelab also explores how to test your app bundles <a href="https://developer.android.com/studio/command-line/bundletool" target="_blank" rel="noopener">using bundletool</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/on-demand-dynamic-delivery/index.html" target="_blank" rel="noopener">On demand modules</a>, which helps you create an app that downloads and installs dynamic features on demand.</li>
</ul>
</li>
<li>Blog posts<ul>
<li><a href="https://medium.com/googleplaydev/what-a-new-publishing-format-means-for-the-future-of-android-2e34981793a" target="_blank" rel="noopener">What a new publishing format means for the future of Android</a></li>
<li><a href="https://android-developers.googleblog.com/2019/05/whats-new-in-play.html" target="_blank" rel="noopener">New features to help you develop, release, and grow your business on Google Play</a></li>
<li><a href="https://android-developers.googleblog.com/2019/03/the-latest-android-app-bundle-updates.html" target="_blank" rel="noopener">The latest Android App Bundle updates including the additional languages API</a></li>
<li><a href="https://medium.com/androiddevelopers/a-patchwork-plaid-monolith-to-modularized-app-60235d9f212e" target="_blank" rel="noopener">Patchwork Plaid — A modularization story</a></li>
<li><a href="https://medium.com/androiddevelopers/google-santa-tracker-moving-to-an-android-app-bundle-dde180716096" target="_blank" rel="noopener">Google Santa Tracker — Moving to an Android App Bundle</a></li>
</ul>
</li>
<li>Videos<ul>
<li><a href="https://www.youtube.com/watch?v=flhib2krW7U" target="_blank" rel="noopener">Customizable Delivery with the App Bundle and Easy Sharing of Test Builds</a></li>
<li><a href="https://www.youtube.com/watch?v=rEuwVWpYBOY" target="_blank" rel="noopener">New Tools to Optimize Your App’s Size and Boost Installs on Google Play</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidBuild</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm-LeetCode-206 Reverse Linked List</title>
    <url>/posts/5f3606d7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Java静态代理&amp;动态代理</title>
    <url>/posts/a4209768/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/maohuidong/p/7992894.html" target="_blank" rel="noopener">https://www.cnblogs.com/maohuidong/p/7992894.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 插件化</title>
    <url>/posts/b26f467e/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidArchitecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Java GC原理</title>
    <url>/posts/b3e25f3f/</url>
    <content><![CDATA[<p>Reference:<br><a href="https://blog.csdn.net/future234/article/details/80677140" target="_blank" rel="noopener">https://blog.csdn.net/future234/article/details/80677140</a><br><a href="https://blog.csdn.net/mdxdjhpkpk/article/details/60141257" target="_blank" rel="noopener">https://blog.csdn.net/mdxdjhpkpk/article/details/60141257</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-类加载机制</title>
    <url>/posts/2776dc8a/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/m0_38075425/article/details/81627349" target="_blank" rel="noopener">https://blog.csdn.net/m0_38075425/article/details/81627349</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android ART和DALVIK的区别</title>
    <url>/posts/a540e7e6/</url>
    <content><![CDATA[<p>Dalvik与Art的区别：</p>
<p>Dalvik每次都要编译再运行，Art只会首次启动编译<br>Art占用空间比Dalvik大（原生代码占用的存储空间更大），就是用“空间换时间”<br>Art减少编译，减少了CPU使用频率，使用明显改善电池续航<br>Art应用启动更快、运行更快、体验更流畅、触感反馈更及时</p>
<p>在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（just in time ，JIT）转换为机器码，这会拖慢应用的运行效率，而在ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（AOT,Ahead-Of-Time）。这样的话，应用的启动(首次)和执行都会变得更加快速。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8669504-2ea1a7935df54a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/338/format/webp" alt></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidBuild</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Java中的几种引用</title>
    <url>/posts/48979ded/</url>
    <content><![CDATA[<ul>
<li>强引用(Strong Reference)</li>
<li>软引用(Soft Reference)</li>
<li>弱引用(Weak Reference)</li>
<li>虚引用(Phantom Reference)</li>
</ul>
<p>强引用:<br>    代码中普遍存在的, 类似<code>Object obj = new Object()</code>这类引用，只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象</p>
<p>软引用:<br>    软引用是用来描述一些还有用但并非必须的对象。对于软引用关联着的对象, 在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常.</p>
<p>弱引用:<br>    用来描述非必须的对象， 但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集之前。 当垃圾收集器工作的时候，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>
<p>虚引用:<br>    最弱的一种引用关系，一个对象是否有虚引用存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。唯一目的就是能在这个对象被收集器回收时收到一个系统通知.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>《深入理解Java虚拟机》</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android requestLayout()和invalidate()原理</title>
    <url>/posts/d718012c/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Fragment原理</title>
    <url>/posts/4dd850/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/d0c7ed3d05e9" target="_blank" rel="noopener">https://www.jianshu.com/p/d0c7ed3d05e9</a><br><a href="https://www.jianshu.com/p/78136d0d3501" target="_blank" rel="noopener">https://www.jianshu.com/p/78136d0d3501</a><br><a href="https://www.jianshu.com/p/f50a1d7ab161" target="_blank" rel="noopener">https://www.jianshu.com/p/f50a1d7ab161</a><br><a href="https://blog.csdn.net/gaugamela/article/details/56280384" target="_blank" rel="noopener">https://blog.csdn.net/gaugamela/article/details/56280384</a></p>
<p>每次beginTransaction都是新建了一个回退栈记录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FragmentTransaction <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BackStackRecord(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里也可以知道 <code>BackStackRecord</code> 跟 <code>FragmentTransaction</code>是继承关系.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Entry of an operation on the fragment back stack.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BackStackRecord</span> <span class="keyword">extends</span> <span class="title">FragmentTransaction</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">      <span class="title">FragmentManager</span>.<span class="title">BackStackEntry</span>, <span class="title">FragmentManagerImpl</span>.<span class="title">OpGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，使用过程中通过<code>FragmentTransaction</code>操作的<code>add</code>, <code>replace</code>, <code>hide</code>, <code>commit</code>等本质都是执行<code>BackStackRecord</code>中的方法</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidFragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Serializable和Parcelable性能差异</title>
    <url>/posts/6d7fb02e/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/yezhennan/p/5527506.html" target="_blank" rel="noopener">https://www.cnblogs.com/yezhennan/p/5527506.html</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidData</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Fragment生命周期</title>
    <url>/posts/b7f694e6/</url>
    <content><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/6433394-2905902a1331235f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/317/format/webp" alt></p>
<p>Fragment1切换到Fragment2时的生命周期变化</p>
<ol>
<li>add, hide, show方式切换<ol>
<li>Fragment1 : onCreate, onCreateView, onStart, onResume</li>
<li>Fragment2 : onCreate, onCreateView, onStart, onResume<br>返回到Fragment1</li>
<li>不走任何生命周期方法</li>
</ol>
</li>
</ol>
<p>所有的Fragment都保存在内存，Fragment的隐藏不走onDestroyView, 所有的显示也不走onCreateView</p>
<ol start="2">
<li>replace方式切换<ol>
<li>Fragment1: onCreate, onCreateView, onStart, onResume<br>切换到Fragment2</li>
<li>Fragment1: onPause(), onStop, onDestroyView, onDestroy</li>
<li>Fragment2: onCreate, onCreateView, onStart, onResume<br>返回到Fragment1</li>
<li>Fragment2: onPause, onStop, onDestroyView, onDestroy</li>
<li>Fragment1: onCreate, onCreateView, onStart, onResume</li>
</ol>
</li>
</ol>
<p>所有的Fragment都进行了销毁，会重新走一套生命周期</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidFragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 进程间通信</title>
    <url>/posts/4f81d6fa/</url>
    <content><![CDATA[<p>Reference: </p>
<ul>
<li><a href="https://blog.csdn.net/qian520ao/article/details/78089877" target="_blank" rel="noopener">https://blog.csdn.net/qian520ao/article/details/78089877</a></li>
<li><a href="https://blog.csdn.net/hzw2017/article/details/81275438" target="_blank" rel="noopener">https://blog.csdn.net/hzw2017/article/details/81275438</a></li>
<li><a href="https://juejin.im/post/5acccf845188255c3201100f" target="_blank" rel="noopener">https://juejin.im/post/5acccf845188255c3201100f</a></li>
</ul>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p><code>RPC(Remote Porcedure Call)</code> 远程过程调用, 是一种通过网络从远程计算机程序上请求服务，在不需要了解底层网络技术协议下，即可获取计算机进程中的数据。 RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p>
<p>RPC在OSI网络通信7层模型中，位于<code>会话层</code>: </p>
<p><img src="https://img-blog.csdn.net/2018072918504362?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6dzIwMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>
<p>RPC的实现模式, 也就是常说的C/S结构: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdn.net/20180729185637282?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6dzIwMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>
<p>简而言之：客户端能向服务端发送若干个进程请求，服务端根据发送的进程参数依次返回对应的计算结果。RPC可以说客户端调用服务端的接口的过程，是面向接口的编程。</p>
<p>RPC在Android中的体现:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Android 利用远程过程调用 (RPC) 提供了一种进程间通信 (IPC) 机制，通过这种机制，由 Activity 或其他应用组件调用的方法将（在其他进程中）远程执行，而所有结果将返回给调用方。 这就要求把方法调用及其数据分解至操作系统可以识别的程度，并将其从本地进程和地址空间传输至远程进程和地址空间，然后在远程进程中重新组装并执行该调用。 然后，返回值将沿相反方向传输回来。 Android 提供了执行这些 IPC 事务所需的全部代码，因此您只需集中精力定义和实现 RPC 编程接口即可。 </span><br><span class="line">要执行 IPC，必须使用 bindService() 将应用绑定到服务上。</span><br></pre></td></tr></table></figure>

<p>也就是说，RPC在的Android具体体现，是依赖 bindService()的方式，在onBind方法将服务端的计算结果返回给客户端（Activity等组件）的过程。</p>
<h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><p><code>IPC</code>是<code>Inter-Process communication</code> 进程间通信, 是指进程间数据交互的过程<br>Android底层是基于Linux, 而Linux基于安全考虑，是不允许两个进程直接操作对方数据, 这就是<code>进程隔离</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Linux系统中，虚拟内存机制为每个进程分配了线性连续的内存空间，操作系统将这种虚拟内存空间映射到物理内存空间，每个进程有自己的虚拟内存空间，进而不能操作其他进程的内存空间，每个进程只能操作自己的虚拟内存空间，只有操作系统才有权限操作物理内存空间.进程隔离保证了每个进程的内存安全，但是在大多数情形下，不同进程间的数据通讯是不可避免的，因此操作系统必须提供跨进程通信机制。</span><br></pre></td></tr></table></figure>

<p>虽然Android是基于Linux，但并不能继承Linux中的进程通信的方式，Android有着自己进程间通信方式。常用有如下几种：</p>
<ul>
<li>Bundle(四大组件之间)</li>
<li>文件共享<ul>
<li>可参考<a href="https://blog.csdn.net/hzw2017/article/details/80978663" target="_blank" rel="noopener">Android进程通信 - 序列化Serialzable与Parcelable</a>中的示例</li>
</ul>
</li>
<li>AIDL(基于Binder)<ul>
<li><a href="https://blog.csdn.net/hzw2017/article/details/81048650" target="_blank" rel="noopener">Android进程通信-AIDL的使用方法</a></li>
</ul>
</li>
<li>Messenger(基于Binder)<ul>
<li><a href="https://blog.csdn.net/hzw2017/article/details/81090319" target="_blank" rel="noopener">Android进程间通信-Messenger的使用和理解</a></li>
</ul>
</li>
<li>ContentProvider(基于Binder)<ul>
<li><a href="https://blog.csdn.net/hzw2017/article/details/81123791" target="_blank" rel="noopener">Android进程间通信-ContentProvider内容提供者</a></li>
</ul>
</li>
<li>Socket<ul>
<li><a href="https://blog.csdn.net/hzw2017/article/details/81210979" target="_blank" rel="noopener">Android进程间通信-Socket的使用</a></li>
</ul>
</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180729210742229?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6dzIwMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>
<p>既然AIDL, Messenger, ContentProvider都是基于Binder的, 我们就首先来看下Binder的原理</p>
<h2 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h2><p>Binder 是一种进程间通信机制，基于开源的 OpenBinder 实现. Android 应用程序是由 Activity、Service、Broadcast Receiver 和 Content Provide 四大组件中的一个或者多个组成的。有时这些组件运行在同一进程，有时运行在不同的进程。这些进程间的通信就依赖于 Binder IPC 机制。不仅如此，Android 系统对应用层提供的各种服务如：ActivityManagerService、PackageManagerService 等都是基于 Binder IPC 机制来实现的。Binder 机制在 Android 中的位置非常重要. </p>
<h3 id="Why-Binder"><a href="#Why-Binder" class="headerlink" title="Why Binder"></a>Why Binder</h3><p>Android 系统是基于 Linux 内核的，Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制。那为什么 Android 还要提供 Binder 来实现 IPC 呢？主要是基于性能、稳定性和安全性几方面的原因。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>Socket 作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程。共享内存虽然无需拷贝，但控制复杂，难以使用。Binder 只需要一次数据拷贝，性能上仅次于共享内存。</p>
<p>注：各种IPC方式数据拷贝次数，此表来源于<a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Funiversus%2Farticle%2Fdetails%2F6211589" target="_blank" rel="noopener">Android Binder 设计与实现 - 设计篇</a></p>
<table>
<thead>
<tr>
<th>IPC方式</th>
<th>数据拷贝次数</th>
</tr>
</thead>
<tbody><tr>
<td>共享内存</td>
<td>0</td>
</tr>
<tr>
<td>Binder</td>
<td>1</td>
</tr>
<tr>
<td>Socket/管道/消息队列</td>
<td>2</td>
</tr>
</tbody></table>
<h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>Binder 基于 C/S 架构，客户端（Client）有什么需求就丢给服务端（Server）去完成，架构清晰、职责明确又相互独立，自然稳定性更好。共享内存虽然无需拷贝，但是控制复杂，难以使用。从稳定性的角度讲，Binder 机制是优于内存共享的。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>另一方面就是安全性。Android 作为一个开放性的平台，市场上有各类海量的应用供用户选择安装，因此安全性对于 Android 平台而言极其重要。作为用户当然不希望我们下载的 APP 偷偷读取我的通信录，上传我的隐私数据，后台偷跑流量、消耗手机电量。传统的 IPC 没有任何安全措施，完全依赖上层协议来确保。首先传统的 IPC 接收方无法获得对方可靠的进程用户ID/进程ID（UID/PID），从而无法鉴别对方身份。Android 为每个安装好的 APP 分配了自己的 UID，故而进程的 UID 是鉴别进程身份的重要标志。传统的 IPC 只能由用户在数据包中填入 UID/PID，但这样不可靠，容易被恶意程序利用。可靠的身份标识只有由 IPC 机制在内核中添加。其次传统的 IPC 访问接入点是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。同时 Binder 既支持实名 Binder，又支持匿名 Binder，安全性高。<br>基于上述原因，Android 需要建立一套新的 IPC 机制来满足系统对稳定性、传输性能和安全性方面的要求，这就是 Binder。</p>
<h2 id="Linux下传统的进程间通信的原理"><a href="#Linux下传统的进程间通信的原理" class="headerlink" title="Linux下传统的进程间通信的原理"></a>Linux下传统的进程间通信的原理</h2><p>了解 Linux IPC 相关的概念和原理有助于我们理解 Binder 通信原理。因此，在介绍 Binder 跨进程通信原理之前，我们先聊聊 Linux 系统下传统的进程间通信是如何实现。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a94f6af409?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<p>上图展示了Linux中跨进程通信涉及到的一些基本概念</p>
<h4 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h4><p>简单的说就是操作系统中，进程与进程间内存是不共享的。两个进程就像两个平行的世界，A 进程没法直接访问 B 进程的数据，这就是进程隔离的通俗解释。A 进程和 B 进程之间要进行数据交互就得采用特殊的通信机制：进程间通信（IPC）。</p>
<h4 id="进程空间划分-用户空间-UserSpace-内核空间-Kernel-Space"><a href="#进程空间划分-用户空间-UserSpace-内核空间-Kernel-Space" class="headerlink" title="进程空间划分: 用户空间(UserSpace)/内核空间(Kernel Space)"></a>进程空间划分: 用户空间(UserSpace)/内核空间(Kernel Space)</h4><p>现在操作系统都是采用的虚拟存储器，对于 32 位系统而言，它的寻址空间（虚拟存储空间）就是 2 的 32 次方，也就是 4GB。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也可以访问底层硬件设备的权限。为了保护用户进程不能直接操作内核，保证内核的安全，操作系统从逻辑上将虚拟空间划分为用户空间（User Space）和内核空间（Kernel Space）。针对 Linux 操作系统而言，将最高的 1GB 字节供内核使用，称为内核空间；较低的 3GB 字节供各进程使用，称为用户空间。</p>
<p>简单的说就是，内核空间（Kernel）是系统内核运行的空间，用户空间（User Space）是用户程序运行的空间。为了保证安全性，它们之间是隔离的。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a94fa38f32?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<h4 id="系统调用-用户态-内核态"><a href="#系统调用-用户态-内核态" class="headerlink" title="系统调用: 用户态/内核态"></a>系统调用: 用户态/内核态</h4><p>虽然从逻辑上进行了用户空间和内核空间的划分，但不可避免的用户空间需要访问内核资源，比如文件操作、访问网络等等。为了突破隔离限制，就需要借助系统调用来实现。系统调用是用户空间访问内核空间的唯一方式，保证了所有的资源访问都是在内核的控制下进行的，避免了用户程序对系统资源的越权访问，提升了系统安全性和稳定性。</p>
<p>Linux 使用两级保护机制：0 级供系统内核使用，3 级供用户程序使用。</p>
<p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）。此时处理器处于特权级最高的（0级）内核代码中执行。当进程处于内核态时，执行的内核代码会使用当前进程的内核栈。每个进程都有自己的内核栈。<br>当进程在执行用户自己的代码的时候，我们称其处于用户运行态（用户态）。此时处理器在特权级最低的（3级）用户代码中运行。<br>系统调用主要通过如下两个函数来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy_from_user() //将数据从用户空间拷贝到内核空间</span><br><span class="line">copy_to_user() //将数据从内核空间拷贝到用户空间</span><br></pre></td></tr></table></figure>

<h3 id="Linux下传统IPC通信原理"><a href="#Linux下传统IPC通信原理" class="headerlink" title="Linux下传统IPC通信原理"></a>Linux下传统IPC通信原理</h3><p>理解了上面的几个概念，我们再来看看传统的 IPC 方式中，进程之间是如何实现通信的。</p>
<p>通常的做法是消息发送方将要发送的数据存放在内存缓存区中，通过系统调用进入内核态。然后内核程序在内核空间分配内存，开辟一块内核缓存区，调用 copy_from_user() 函数将数据从用户空间的内存缓存区拷贝到内核空间的内核缓存区中。同样的，接收方进程在接收数据时在自己的用户空间开辟一块内存缓存区，然后内核程序调用 copy_to_user() 函数将数据从内核缓存区拷贝到接收进程的内存缓存区。这样数据发送方进程和数据接收方进程就完成了一次数据传输，我们称完成了一次进程间通信。如下图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a954b2c791?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<p>传统的IPC通信方式有2个问题:</p>
<ol>
<li>性能地下, 一次数据传输需要经历: 内存缓存区 -&gt; 内核缓存区 -&gt; 内存缓存区, 需要2次数据拷贝</li>
<li>接受数据的缓存区由数据接收进程提供, 但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能大的内存空间或者先调用 API 接收消息头来获取消息体的大小，这两种做法不是浪费空间就是浪费时间。</li>
</ol>
<h3 id="Binder跨进程通信原理"><a href="#Binder跨进程通信原理" class="headerlink" title="Binder跨进程通信原理"></a>Binder跨进程通信原理</h3><p>理解了 Linux IPC 相关概念和通信原理，接下来我们正式介绍下 Binder IPC 的原理。</p>
<h4 id="动态内核可加载模块-amp-amp-内存映射"><a href="#动态内核可加载模块-amp-amp-内存映射" class="headerlink" title="动态内核可加载模块 &amp;&amp; 内存映射"></a>动态内核可加载模块 &amp;&amp; 内存映射</h4><p>正如前文所说，跨进程通信需要内核空间做支持的。传统的IPC机制如管道, Socket都是内核的一部分，因此通过内核支持来实现进程间通信自然是没问题的。但是Binder并不是内核的一部分， 这就需要Linux的<code>动态内核可加载模块(Loadable Kernel Module, LKM)</code>机制，模块是具有独立功能的程序，可以单独编译，但不能独立运行。他在运行时被链接到内核作为内核的一部分运行. 这样，Android系统就可以通过动态添加一个内核模块运行在内核空间，用户进程之间通过这个内核模块作为桥梁来实现通信.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 Android 系统中，这个运行在内核空间，负责各个用户进程通过 Binder 实现通信的内核模块就叫 Binder 驱动（Binder Dirver）。</span><br></pre></td></tr></table></figure>

<p>那么在 Android 系统中用户进程之间是如何通过这个内核模块（Binder 驱动）来实现通信的呢？难道是和前面说的传统 IPC 机制一样，先将数据从发送方进程拷贝到内核缓存区，然后再将数据从内核缓存区拷贝到接收方进程，通过两次拷贝来实现吗？显然不是，否则也不会有开篇所说的 Binder 在性能方面的优势了。</p>
<p>这就不得不通道 Linux 下的另一个概念：<code>内存映射</code>:</p>
<p>Binder IPC 机制中涉及到的内存映射通过 <code>mmap()</code> 来实现，mmap() 是操作系统中一种内存映射的方法。内存映射简单的讲就是将用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</p>
<p>内存映射能减少数据拷贝次数，实现用户空间和内核空间的高效互动。两个空间各自的修改能直接反映在映射的内存区域，从而被对方空间及时感知。也正因为如此，内存映射能够提供对进程间通信的支持。</p>
<h4 id="Binder-IPC实现原理"><a href="#Binder-IPC实现原理" class="headerlink" title="Binder IPC实现原理"></a>Binder IPC实现原理</h4><p>Binder IPC 正是基于内存映射（mmap）来实现的，但是 mmap() 通常是用在有物理介质的文件系统上的。</p>
<p>比如进程中的用户区域是不能直接和物理设备打交道的，如果想要把磁盘上的数据读取到进程的用户区域，需要两次拷贝（磁盘–&gt;内核空间–&gt;用户空间）；通常在这种场景下 mmap() 就能发挥作用，通过在物理介质和用户空间之间建立映射，减少数据的拷贝次数，用内存读写取代I/O读写，提高文件读取效率。</p>
<p>而 Binder 并不存在物理介质，因此 Binder 驱动使用 mmap() 并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p>
<p>一次完整的 Binder IPC 通信过程通常是这样：</p>
<ol>
<li>首先Binder驱动在内核空间创建一个数据接收缓存区</li>
<li>接着在内核空间开辟一块内核缓存区, 建立内核缓存区和内核中数据接收缓存区之间的映射关系，以及内核中数据接收缓存区和接受进程用户空间地址的映射关系</li>
<li>发送方进程通过系统调用<code>copy_from_user()</code>将数据<code>copy</code>到内核中的内核缓存区, 由于内核缓存区和接收进程的用户空间存在内存映射, 因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间通信. </li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a9557158d0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<h3 id="Binder通信模型"><a href="#Binder通信模型" class="headerlink" title="Binder通信模型"></a>Binder通信模型</h3><p>介绍完 Binder IPC 的底层通信原理，接下来我们看看实现层面是如何设计的。</p>
<p>一次完整的进程间通信必然至少包含两个进程，通常我们称通信的双方分别为客户端进程（Client）和服务端进程（Server），由于进程隔离机制的存在，通信双方必然需要借助 Binder 来实现。</p>
<h4 id="Client-Server-ServiceManager-驱动"><a href="#Client-Server-ServiceManager-驱动" class="headerlink" title="Client/Server/ServiceManager/驱动"></a>Client/Server/ServiceManager/驱动</h4><p>前面我们介绍过，Binder 是基于 <code>C/S 架构</code>的。由一系列的组件组成，包括 Client、Server、ServiceManager、Binder 驱动。其中 Client、Server、Service Manager 运行在用户空间，Binder 驱动运行在内核空间。其中 Service Manager 和 Binder 驱动由系统提供，而 Client、Server 由应用程序来实现。Client、Server 和 ServiceManager 均是通过系统调用 open、mmap 和 ioctl 来访问设备文件 /dev/binder，从而实现与 Binder 驱动的交互来间接的实现跨进程通信。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a955f25e1c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<p>Client、Server、ServiceManager、Binder 驱动这几个组件在通信过程中扮演的角色就如同互联网中服务器（Server）、客户端（Client）、DNS域名服务器（ServiceManager）以及路由器（Binder 驱动）之前的关系。</p>
<p>通常我们访问一个网页的步骤是这样的：首先在浏览器输入一个地址，如 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 然后按下回车键。但是并没有办法通过域名地址直接找到我们要访问的服务器，因此需要首先访问 DNS 域名服务器，域名服务器中保存了 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 对应的 ip 地址 10.249.23.13，然后通过这个 ip 地址才能放到到 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 对应的服务器。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a979646aee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<p><a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Funiversus%2Farticle%2Fdetails%2F6211589" target="_blank" rel="noopener">Android Binder 设计与实现</a>一文中对 Client、Server、ServiceManager、Binder 驱动有很详细的描述，以下是部分摘录：</p>
<p>Binder驱动:</p>
<p>Binder驱动就如同路由器一样，使整个通信的核心; 驱动负责进程之间Binder通信的建立， Binder在进程之间的传递, Binder引用计数管理，数据包在进程之间的传递和交互等一系列底层支持。</p>
<p>ServiceManager 与实名 Binder</p>
<p>ServiceManager 和 DNS 类似，作用是将字符形式的 Binder 名字转化成 Client 中对该 Binder 的引用，使得 Client 能够通过 Binder 的名字获得对 Binder 实体的引用。注册了名字的 Binder 叫实名 Binder，就像网站一样除了除了有 IP 地址意外还有自己的网址。Server 创建了 Binder，并为它起一个字符形式，可读易记得名字，将这个 Binder 实体连同名字一起以数据包的形式通过 Binder 驱动发送给 ServiceManager ，通知 ServiceManager 注册一个名为“张三”的 Binder，它位于某个 Server 中。驱动为这个穿越进程边界的 Binder 创建位于内核中的实体节点以及 ServiceManager 对实体的引用，将名字以及新建的引用打包传给 ServiceManager。ServiceManger 收到数据后从中取出名字和引用填入查找表。</p>
<p>细心的读者可能会发现，ServierManager 是一个进程，Server 是另一个进程，Server 向 ServiceManager 中注册 Binder 必然涉及到进程间通信。当前实现进程间通信又要用到进程间通信，这就好像蛋可以孵出鸡的前提却是要先找只鸡下蛋！Binder 的实现比较巧妙，就是预先创造一只鸡来下蛋。ServiceManager 和其他进程同样采用 Binder 通信，ServiceManager 是 Server 端，有自己的 Binder 实体，其他进程都是 Client，需要通过这个 Binder 的引用来实现 Binder 的注册，查询和获取。ServiceManager 提供的 Binder 比较特殊，它没有名字也不需要注册。当一个进程使用 BINDER_SET_CONTEXT_MGR 命令将自己注册成 ServiceManager 时 Binder 驱动会自动为它创建 Binder 实体（这就是那只预先造好的那只鸡）。其次这个 Binder 实体的引用在所有 Client 中都固定为 0 而无需通过其它手段获得。也就是说，一个 Server 想要向 ServiceManager 注册自己的 Binder 就必须通过这个 0 号引用和 ServiceManager 的 Binder 通信。类比互联网，0 号引用就好比是域名服务器的地址，你必须预先动态或者手工配置好。要注意的是，这里说的 Client 是相对于 ServiceManager 而言的，一个进程或者应用程序可能是提供服务的 Server，但对于 ServiceManager 来说它仍然是个 Client。</p>
<p>Client 获得实名 Binder 的引用</p>
<p>Server 向 ServiceManager 中注册了 Binder 以后， Client 就能通过名字获得 Binder 的引用了。Client 也利用保留的 0 号引用向 ServiceManager 请求访问某个 Binder: 我申请访问名字叫张三的 Binder 引用。ServiceManager 收到这个请求后从请求数据包中取出 Binder 名称，在查找表里找到对应的条目，取出对应的 Binder 引用作为回复发送给发起请求的 Client。从面向对象的角度看，Server 中的 Binder 实体现在有两个引用：一个位于 ServiceManager 中，一个位于发起请求的 Client 中。如果接下来有更多的 Client 请求该 Binder，系统中就会有更多的引用指向该 Binder ，就像 Java 中一个对象有多个引用一样。</p>
<h4 id="Binder通信过程"><a href="#Binder通信过程" class="headerlink" title="Binder通信过程"></a>Binder通信过程</h4><ol>
<li>首先，一个进程使用BINDER_SET_CONTEXT_MGR命令通过Binder驱动将自己注册为ServiceManager</li>
<li>Server通过驱动向ServiceManager中注册Binder(Server中的Binder实体), 表明可以对外提供服务. 驱动为这个Binder创建位于内核中的实体节点以及ServiceManager对实体的引用, 将名字以及新建的引用打包传给 ServiceManager，ServiceManger 将其填入查找表。</li>
<li>Client 通过名字，在 Binder 驱动的帮助下从 ServiceManager 中获取到对 Binder 实体的引用，通过这个引用就能实现和 Server 进程的通信。</li>
</ol>
<p>我们看到整个通信过程都需要 Binder 驱动的接入。下图能更加直观的展现整个通信过程(为了进一步抽象通信过程以及呈现上的方便，下图我们忽略了 Binder 实体及其引用的概念)：</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a98173c4c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<h4 id="Binder通信中的代理模式"><a href="#Binder通信中的代理模式" class="headerlink" title="Binder通信中的代理模式"></a>Binder通信中的代理模式</h4><p>我们已经解释清楚 Client、Server 借助 Binder 驱动完成跨进程通信的实现机制了，但是还有个问题会让我们困惑。A 进程想要 B 进程中某个对象（object）是如何实现的呢？毕竟它们分属不同的进程，A 进程 没法直接使用 B 进程中的 object。</p>
<p>前面我们介绍过跨进程通信的过程都有 Binder 驱动的参与，因此在数据流经 Binder 驱动的时候驱动会对数据做一层转换。当 A 进程想要获取 B 进程中的 object 时，驱动并不会真的把 object 返回给 A，而是返回了一个跟 object 看起来一模一样的代理对象 objectProxy，这个 objectProxy 具有和 object 一摸一样的方法，但是这些方法并没有 B 进程中 object 对象那些方法的能力，这些方法只需要把把请求参数交给驱动即可。对于 A 进程来说和直接调用 object 中的方法是一样的。</p>
<p>当 Binder 驱动接收到 A 进程的消息后，发现这是个 objectProxy 就去查询自己维护的表单，一查发现这是 B 进程 object 的代理对象。于是就会去通知 B 进程调用 object 的方法，并要求 B 进程把返回结果发给自己。当驱动拿到 B 进程的返回结果后就会转发给 A 进程，一次通信就完成了。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162b00a98198b306?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>
<h4 id="Binder的完整定义"><a href="#Binder的完整定义" class="headerlink" title="Binder的完整定义"></a>Binder的完整定义</h4><p>现在我们可以对 Binder 做个更加全面的定义了：</p>
<ul>
<li>从进程间通信的角度来看, Binder是一种进程间通信的机制</li>
<li>从Server进程的角度看, Binder指的是Server中的Binder实体对象</li>
<li>从Server进程的角度看,  Binder指的是Binder代理对象，是Binder实体对象的一个远程代理</li>
<li>从传输过程的角度来看, Binder是一个可以跨进程传输的对象; Binder 驱动会对这个跨越进程边界的对象对一点点特殊处理，自动完成代理对象和本地对象之间的转换。</li>
</ul>
<h3 id="手动编码实现跨进程调用"><a href="#手动编码实现跨进程调用" class="headerlink" title="手动编码实现跨进程调用"></a>手动编码实现跨进程调用</h3><ul>
<li>IBinder : IBinder 是一个接口，代表了一种跨进程通信的能力。只要实现了这个借口，这个对象就能跨进程传输。</li>
<li>IInterface : IInterface 代表的就是 Server 进程对象具备什么样的能力（能提供哪些方法，其实对应的就是 AIDL 文件中定义的接口）</li>
<li>Binder : Java 层的 Binder 类，代表的其实就是 Binder 本地对象。BinderProxy 类是 Binder 类的一个内部类，它代表远程进程的 Binder 对象的本地代理；这两个类都继承自 IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder 驱动会自动完成这两个对象的转换。</li>
<li>Stub : AIDL 的时候，编译工具会给我们生成一个名为 Stub 的静态内部类；这个类继承了 Binder, 说明它是一个 Binder 本地对象，它实现了 IInterface 接口，表明它具有 Server 承诺给 Client 的能力；Stub 是一个抽象类，具体的 IInterface 的相关实现需要开发者自己实现。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 无埋点监控</title>
    <url>/posts/1ada89fb/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5aa0e7eff265da2395308f48#heading-0" target="_blank" rel="noopener">https://juejin.im/post/5aa0e7eff265da2395308f48#heading-0</a><br><a href="https://blog.csdn.net/jhyshenyu/article/details/87633652" target="_blank" rel="noopener">https://blog.csdn.net/jhyshenyu/article/details/87633652</a><br><a href="https://blog.csdn.net/wangkai0681080/article/details/82659516" target="_blank" rel="noopener">https://blog.csdn.net/wangkai0681080/article/details/82659516</a><br><a href="https://blog.csdn.net/qian520ao/article/details/85308948" target="_blank" rel="noopener">https://blog.csdn.net/qian520ao/article/details/85308948</a><br><a href="https://juejin.im/post/5da6d99b6fb9a04e0855bfe3" target="_blank" rel="noopener">https://juejin.im/post/5da6d99b6fb9a04e0855bfe3</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Java内部类</title>
    <url>/posts/e058f543/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/u011240877/article/details/78682097" target="_blank" rel="noopener">https://blog.csdn.net/u011240877/article/details/78682097</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java finally, final, finalize</title>
    <url>/posts/cc9d9ab/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/smart-hwt/p/8257330.html" target="_blank" rel="noopener">https://www.cnblogs.com/smart-hwt/p/8257330.html</a></p>
<p>final: </p>
<p><code>final</code>修饰的类不能被继承<br><code>final</code>修饰的方法不能被重写<br><code>final</code>修饰的变量叫常量，常量必须初始化, 初始化之后值就不能更改</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-ANR原理分析与解决</title>
    <url>/posts/2c4d5f81/</url>
    <content><![CDATA[<p>ANR: Application Not Responding</p>
<ul>
<li>KeyDispatchTimeout(5s)</li>
<li>BroadcastTimeout(10s) BroadcastReceiver特定时间内无法完成</li>
<li>ServiceTimeout(20s) Service特定时间内无法处理完成</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s/4w202K0WnNrazmEHd6grQA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/4w202K0WnNrazmEHd6grQA</a></p>
<p><a href="https://juejin.im/post/5cb45bb35188251b2c3982bf" target="_blank" rel="noopener">https://juejin.im/post/5cb45bb35188251b2c3982bf</a></p>
<h2 id="ANR概述"><a href="#ANR概述" class="headerlink" title="ANR概述"></a>ANR概述</h2><p>首先，ANR(Application Not responding)是指应用程序未响应，Android系统对于一些事件需要在一定的时间范围内完成，如果超过预定时间能未能得到有效响应或者响应时间过长，都会造成ANR。ANR由消息处理机制保证，Android在系统层实现了一套精密的机制来发现ANR，核心原理是<code>消息调度</code>和<code>超时处理</code>。</p>
<p>其次，ANR机制主体实现在系统层。所有与ANR相关的消息，都会经过系统进程(system_server)调度，然后派发到应用进程完成对消息的实际处理，同时，系统进程设计了不同的超时限制来跟踪消息的处理。 一旦应用程序处理消息不当，超时限制就起作用了，它收集一些系统状态，譬如CPU/IO使用情况、进程函数调用栈，并且报告用户有进程无响应了(ANR对话框)。</p>
<p>然后，ANR问题本质是一个性能问题。ANR机制实际上对应用程序主线程的限制，要求主线程在限定的时间内处理完一些最常见的操作(启动服务、处理广播、处理输入)， 如果处理超时，则认为主线程已经失去了响应其他操作的能力。主线程中的耗时操作，譬如密集CPU运算、大量IO、复杂界面布局等，都会降低应用程序的响应能力。</p>
<h2 id="哪些场景会导致ANR"><a href="#哪些场景会导致ANR" class="headerlink" title="哪些场景会导致ANR"></a>哪些场景会导致ANR</h2><ol>
<li>发生ANR时会调用<code>AppNotRespondingDialog.show()</code>方法弹出对话框提示用户，该对话框的依次调用关系如下图所示：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AppErrors.java</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bring up the infamous App Not Responding dialog</span></span><br><span class="line">Message msg = Message.obtain();</span><br><span class="line">msg.what = ActivityManagerService.SHOW_NOT_RESPONDING_UI_MSG;</span><br><span class="line">msg.obj = <span class="keyword">new</span> AppNotRespondingDialog.Data(app, activity, aboveSystem);</span><br><span class="line"></span><br><span class="line">mService.mUiHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleShowAnrUi</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    Dialog dialogToShow = <span class="keyword">null</span>;</span><br><span class="line">    ....        </span><br><span class="line">    <span class="comment">// If we've created a crash dialog, show it without the lock held</span></span><br><span class="line">    <span class="keyword">if</span> (dialogToShow != <span class="keyword">null</span>) &#123;</span><br><span class="line">        dialogToShow.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>AppErrors.appNotResponding()，该方法是最终弹出ANR对话框的唯一入口，调用该方法的场景才会有ANR提示，也可以认为在主线程中执行无论再耗时的任务，只要最终不调用该方法，都不会有ANR提示，也不会有ANR相关日志及报告；通过调用关系可以看出哪些场景会导致ANR，有以下四种场景：<br> a. Service Timeout: Service在特定时间内没处理完成<br> b. BoradcastQueue Timeout: BroadcastReceiver在特定时间内无法处理完成<br> c. ContentProvider Timeout: 内容提供者执行超时<br> d. inputDispatching Timeout: 按键或触摸事件在特定时间内无响应</li>
</ol>
<h2 id="ANR机制"><a href="#ANR机制" class="headerlink" title="ANR机制"></a>ANR机制</h2><p>ANR机制可以分为两部分：</p>
<ul>
<li>ANR监测机制：Android对于不同的ANR类型(Broadcast, Service, InputEvent)都有一套监测机制。</li>
<li>ANR报告机制：在监测到ANR以后，需要显示ANR对话框、输出日志(发生ANR时的进程函数调用栈、CPU使用情况等)。</li>
</ul>
<p>整个ANR机制的代码也是横跨了Android的几个层：</p>
<ul>
<li>App层：应用主线程的处理逻辑；</li>
<li>Framework层：ANR机制的核心，主要有AMS、BroadcastQueue、ActiveServices、InputmanagerService、InputMonitor、InputChannel、ProcessCpuTracker等；</li>
<li>Native层：InputDispatcher.cpp；</li>
</ul>
<h2 id="Service超时监测机制"><a href="#Service超时监测机制" class="headerlink" title="Service超时监测机制"></a>Service超时监测机制</h2><p>Service运行在应用程序的主线程，如果Service的执行时间超过20秒，则会引发ANR。</p>
<p>当发生Service ANR时，一般可以先排查一下在Service的生命周期函数中(onCreate(), onStartCommand()等)有没有做耗时的操作，譬如复杂的运算、IO操作等。 如果应用程序的代码逻辑查不出问题，就需要深入检查当前系统的状态：CPU的使用情况、系统服务的状态等，判断当时发生ANR进程是否受到系统运行异常的影响。</p>
<p>如何检测Service超时呢？Android是通过设置定时消息实现的。定时消息是由AMS的消息队列处理的(system_server的ActivityManager线程)。 AMS有Service运行的上下文信息，所以在AMS中设置一套超时检测机制也是合情合理的。<br>我们先抛出两个问题</p>
<p>问题一：Service启动流程？<br>问题一：如何监测Service超时？</p>
<p>主要通过以上两个问题来说明Service监测机制，在知道Service启动流程之后，通过Service启动流程可以更容易分析Service超时监测机制。</p>
<ol>
<li>Service启动流程如下:</li>
</ol>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3WwSgQpdYibHPDEAF1AmWbpMOKW1B6jrhBxTT9OS5LfOqbn96PaIicaHm5WezLaOw23SqDypq1zpsttQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt></p>
<p>a. ActiveServices.realStartServiceLocked()在通过app.thread的scheduleCreateService()来创建Service对象并调用Service.onCreate()后，接着又调用sendServiceArgsLocked()方法来调用Service的其他方法，如onStartCommand。以上两步均是进程间通信，应用与AMS之间跨进程通信可以参考应用进程与系统进程通信<br>b. 以上只是列出Service启动流程的关键步骤，具体每个方法主要做哪些工作还需要查看具体的代码，暂时先忽略这些，感兴趣的可以参考Android开发艺术探索等其他相关资料</p>
<ol start="2">
<li>Service超时监测机制<br>// TODO……</li>
</ol>
<p>Service是由AMS调度，利用Handler和Looper，设计了一个TIMEOUT消息交由AMS线程来处理，整个超时机制的实现都是在Java层；以上就是Service超时监测的整体流程。</p>
<h2 id="输入事件超时监测"><a href="#输入事件超时监测" class="headerlink" title="输入事件超时监测"></a>输入事件超时监测</h2><p>应用程序可以接收输入事件(按键、触屏、轨迹球等)，当5秒内没有处理完毕时，则会引发ANR。</p>
<p>这里先把问题抛出来了：<br>输入事件经历了一些什么工序才能被派发到应用的界面？<br>如何检测到输入时间处理超时？</p>
<ol>
<li>Android 输入系统简介</li>
</ol>
<p>Android输入系统总体流程与参与者如下图所示。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3WwSgQpdYibHPDEAF1AmWbpMOtrM4NPTqqgBTibicpWfccd6wBgFhdcExNRdVZa1MyQiat8iaK2tRuaMshw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt></p>
<p>简单来说，内核将原始事件写入到设备节点中，InputReader在其线程循环中不断地从EventHub中抽取原始输入事件，进行加工处理后将加工所得的事件放入InputDispatcher的派发发队列中。InputDispatcher则在其线程循环中将派发队列中的事件取出，查找合适的窗口，将事件写入到窗口的事件接收管道中。窗口事件接收线程的Looper从管道中将事件取出，交由窗口事件处理函数进行事件响应。关键流程有：原始输入事件的读取与加工；输入事件的派发；输入事件的发送、接收与反馈。其中输入事件派发是指InputDispatcher不断的从派发队列取出事件、寻找合适的窗口进行发送的过程，输入事件的发送是InputDispatcher通过Connection对象将事件发送给窗口的过程。</p>
<p>InputDispatcher与窗口之间的跨进程通信主要通过InputChannel来完成。在InputDispatcher与窗口通过InputChannel建立连接之后，就可以进行事件的发送、接收与反馈；输入事件的发送和接收主要流程如图所示：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3WwSgQpdYibHPDEAF1AmWbpMOSkMp3HibHkSTRQm7Hza8XYpPJpGFC6B4PibboL7JiabCkc2YamDgkyZvQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt></p>
<p>其中，将输入事件注入派发队列后，会唤醒派发线程，派发线程循环由InputDispatcher.dispatchOnce函数完成；InputDispatcher将事件以InputMessage写入InputChannel之后，窗口端的looper被唤醒，进而执行NativeInputReceiver::handleEvent()开始输入事件的接收，从InputEventReceiver开始输入事件被派发到用户界面；以上只是输入事件的大致流程，更详细的流程可以参考相关资料；在了解输入系统的大致流程之后，我们来分析输入事件的超时监测机制。</p>
<ol start="2">
<li>输入事件超时监测</li>
</ol>
<p>按键事件超时监测整体流程如下图所示</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/zKFJDM5V3WwSgQpdYibHPDEAF1AmWbpMOvBTj1XwhT2q6p0wngUdZiaCCmpErHNCoUic0FMib2LJAichFjqtqRoKibnw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-BlockCanary源码分析</title>
    <url>/posts/ba081c48/</url>
    <content><![CDATA[<p>首先来看下<code>BlockCanary</code>的使用方法，一般是在程序<code>Application</code>里的<code>onCreate</code>方法中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlockCanary.install(<span class="keyword">this</span>, <span class="keyword">new</span> AppBlockCanaryContext()).start();</span><br></pre></td></tr></table></figure>

<p>这里有3点， 首先<code>install</code>方法，然后<code>start</code>方法， 传入的参数除了<code>this</code> 也就是ApplicationContext外，还有个<code>AppBlockCanaryContext</code> 这个类是继承<code>BlockCanaryContext</code>然后重写部分方法，也就是不同的配置。我们一步步看.</p>
<p>首先来看<code>install</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockCanary <span class="title">install</span><span class="params">(Context context, BlockCanaryContext blockCanaryContext)</span> </span>&#123;</span><br><span class="line">    BlockCanaryContext.init(context, blockCanaryContext);</span><br><span class="line">    setEnabled(context, DisplayActivity.class, BlockCanaryContext.get().displayNotification());</span><br><span class="line">    <span class="keyword">return</span> get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里首先初始化了<code>BlockCanaryContext</code>里的<code>applicationContext</code>, 并把<code>blockCanaryContext</code>对象指向外界传入的，也就是调用<code>install</code>方法传入的自定义的<code>BlockCanaryContext</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, BlockCanaryContext blockCanaryContext)</span> </span>&#123;</span><br><span class="line">    sApplicationContext = context;</span><br><span class="line">    sInstance = blockCanaryContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>setEnabled()</code>, 开启一个线程去执行<code>setEnabled</code>操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(Context context, <span class="keyword">final</span> Class&lt;?&gt; componentClass, <span class="keyword">final</span> <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context appContext = context.getApplicationContext();</span><br><span class="line">    executeOnFileIoThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            setEnabledBlocking(appContext, componentClass, enabled);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor fileIoExecutor = newSingleThreadExecutor(<span class="string">"File-IO"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Executor <span class="title">newSingleThreadExecutor</span><span class="params">(String threadName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Executors.newSingleThreadExecutor(<span class="keyword">new</span> SingleThreadFactory(threadName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeOnFileIoThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    fileIoExecutor.execute(runnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?? 不知道这里是干啥的</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setEnabledBlocking</span><span class="params">(Context appContext, Class&lt;?&gt; componentClass, <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    ComponentName component = <span class="keyword">new</span> ComponentName(appContext, componentClass);</span><br><span class="line">    PackageManager packageManager = appContext.getPackageManager();</span><br><span class="line">    <span class="keyword">int</span> newStat = enabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;</span><br><span class="line">    packageManager.setComponentEnabledSetting(component, newStat, PackageManager.DONT_KILL_APP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后返回<code>get()</code> 也就是返回<code>BlockCanary</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockCanary <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (BlockCanary.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sInstance = <span class="keyword">new</span> BlockCanary();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来看<code>BlockCanary</code>构造函数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BlockCanary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BlockCanaryInternals.setContext(BlockCanaryContext.get());</span><br><span class="line">    mBlockCanaryCore = BlockCanaryInternals.getInstance();</span><br><span class="line">    mBlockCanaryCore.addBlockInterceptor(BlockCanaryContext.get());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!BlockCanaryContext.get().displayNotification()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mBlockCanaryCore.addBlockInterceptor(<span class="keyword">new</span> DisplayService());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里初始化了<code>BlockCanaryInternals</code>这个对象，并给它传了<code>BlockCanaryContext</code>这个对象, 进入<code>BlockCanaryContext</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlockCanaryContext.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BlockCanaryContext sInstance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context sApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockCanaryContext <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == sInstance) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"BlockCanaryContext null"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockCanaryContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以知道，这个<code>BlockCanaryContext</code>里面只是持有了一个<code>ApplicationContext</code>，而且提供了很多配置类型的方法，结合上文的<code>BlockCanary的使用方法</code>, 我们可以把它理解为一个持有<code>ApplicationContext</code>的配置类。</p>
<p>回到<code>BlockCanary</code>构造函数, 这里初始化<code>BlockCanaryInternals</code> 而且，给它增加了2个回调<code>BlockCanaryContext</code>以及<code>DisplayService</code>，不过我没看出<code>BlockCanaryContext</code>增加的意义何在。 这个回调内容是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlockInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBlock</span><span class="params">(Context context, BlockInfo blockInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是，收到<code>blockInfo</code>的时候会触发.</p>
<p>最后是<code>start</code>方法, 也是<code>BlockCanary</code>的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!mMonitorStarted) &#123;</span><br><span class="line">        mMonitorStarted = <span class="keyword">true</span>;</span><br><span class="line">        Looper.getMainLooper().setMessageLogging(mBlockCanaryCore.monitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>Looper.getMainLooper().setMessageLogging</code>是SDK中提供的方法，传入的是一个<code>Printer</code>, 这里的<code>mBlockCanaryCore.monitor</code>就是这个<code>Printer</code>. </p>
<p>参考下官方提供的<code>BlockCanary</code>文章, 这个的核心原理就是在<code>Looper.java</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment"> * application's main looper. The main looper for your application</span></span><br><span class="line"><span class="comment"> * is created by the Android environment, so you should never need</span></span><br><span class="line"><span class="comment"> * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the application's main looper, which lives in the main thread of the application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> sMainLooper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即整个应用的主线程，只有这一个looper，不管有多少handler，最后都会回到这里。</p>
<p>如果再细心一点会发现在Looper的loop方法中有这么一段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        Printer logging = me.mLogging;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是的，就是这个Printer - mLogging，它在每个message处理的前后被调用，而如果主线程卡住了，不就是在dispatchMessage里卡住了吗？ </p>
<p>(<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="noopener">http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/</a>)</p>
<p>因此这个的主要核心原理就是自定义这个<code>Printer</code>， 在卡住的时候把更多的信息打印出来供分析</p>
<p><img src="http://blog.zhaiyifan.cn/images/blockcanary_flow.png" alt></p>
<p>我们接下来看下自定义的<code>Printer</code>里也就是<code>mBlockCanaryCore.monitor</code>究竟做了什么</p>
<p>我们记得在<code>BlockCanary</code>中初始化了<code>BlockCanaryInternals</code>， 而这个<code>BlockCanaryInternals</code>也就是<code>mBlockCanaryCore</code>，它的构造函数如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockCanaryInternals <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == sInstance) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (BlockCanaryInternals.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == sInstance) &#123;</span><br><span class="line">                sInstance = <span class="keyword">new</span> BlockCanaryInternals();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockCanaryInternals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stackSampler = <span class="keyword">new</span> StackSampler(Looper.getMainLooper().getThread(), sContext.provideDumpInterval());</span><br><span class="line">    cpuSampler = <span class="keyword">new</span> CpuSampler(sContext.provideDumpInterval());</span><br><span class="line">    setMonitor(<span class="keyword">new</span> LooperMonitor(<span class="keyword">new</span> LooperMonitor.BlockListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBlockEvent</span><span class="params">(<span class="keyword">long</span> realTimeStart, <span class="keyword">long</span> realTimeEnd, <span class="keyword">long</span> threadTimeStart, <span class="keyword">long</span> threadTimeEnd)</span> </span>&#123;</span><br><span class="line">            ArrayList&lt;String&gt; threadStackEntries = stackSampler.getThreadStackEntries(realTimeStart, realTimeEnd);</span><br><span class="line">            <span class="keyword">if</span>(!threadStackEntries.isEmpty()) &#123;</span><br><span class="line">                BlockInfo blockInfo = BlockInfo.newInstance()</span><br><span class="line">                        .setMainThreadTimeCost(realTimeStart, realTimeEnd, threadTimeStart, threadTimeEnd)</span><br><span class="line">                        .setCpuBusyFlag(cpuSampler.isCpuBusy(realTimeStart, realTimeEnd))</span><br><span class="line">                        .setRecentCpuRate(cpuSampler.getCpuRateInfo())</span><br><span class="line">                        .setThreadStackEntries(threadStackEntries)</span><br><span class="line">                        .flushString();</span><br><span class="line"></span><br><span class="line">                LogWriter.save(blockInfo.toString());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mInterceptorChain.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (BlockInterceptor interceptor : mInterceptorChain) &#123;</span><br><span class="line">                        interceptor.onBlock(getContext().provideContext(), blockInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, getContext().provideBlockThreshold(), getContext().stopWhenDebugging()));</span><br><span class="line"></span><br><span class="line">    LogWriter.cleanObsolete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里首先创建了<code>StackSampler</code>和<code>CpuSampler</code></p>
<p><code>StackSampler</code>是获取当前线程的栈的信息, 以时间戳/string 方式存入Map里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (StackTraceElement stackTraceElement : mCurrentThread.getStackTrace()) &#123;</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(stackTraceElement.toString())</span><br><span class="line">                .append(BlockInfo.SEPARATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (sStackMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sStackMap.size() == mMaxEntryCount &amp;&amp; mMaxEntryCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sStackMap.remove(sStackMap.keySet().iterator().next());</span><br><span class="line">        &#125;</span><br><span class="line">        sStackMap.put(System.currentTimeMillis(), stringBuilder.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>CpuSampler</code>是获取当前CPU相关信息, 主要通过读取系统文件获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cpuReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">              <span class="keyword">new</span> FileInputStream(<span class="string">"/proc/stat"</span>)), BUFFER_SIZE);</span><br><span class="line">      String cpuRate = cpuReader.readLine();</span><br><span class="line">      <span class="keyword">if</span> (cpuRate == <span class="keyword">null</span>) &#123;</span><br><span class="line">          cpuRate = <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (mPid == <span class="number">0</span>) &#123;</span><br><span class="line">          mPid = android.os.Process.myPid();</span><br><span class="line">      &#125;</span><br><span class="line">      pidReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">              <span class="keyword">new</span> FileInputStream(<span class="string">"/proc/"</span> + mPid + <span class="string">"/stat"</span>)), BUFFER_SIZE);</span><br><span class="line">      String pidCpuRate = pidReader.readLine();</span><br><span class="line">      <span class="keyword">if</span> (pidCpuRate == <span class="keyword">null</span>) &#123;</span><br><span class="line">          pidCpuRate = <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      parse(cpuRate, pidCpuRate);</span><br></pre></td></tr></table></figure>

<p>写入<code>private final LinkedHashMap&lt;Long, String&gt; mCpuInfoEntries = new LinkedHashMap&lt;&gt;();</code>里</p>
<p>他们的核心都是通过<code>HandlerThread</code>启动一个线程来执行这些信息抓取工作的</p>
<p>回到<code>BlockCanaryInternals</code>, 设置了一个<code>monitor</code>, 也就是<code>LoopMonitor</code>, 这里就是最核心的地方,<code>LooperMonitor implements Printer</code></p>
<p>进入<code>LooperMonitor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStopWhenDebugging &amp;&amp; Debug.isDebuggerConnected()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mPrintingStarted) &#123;</span><br><span class="line">        mStartTimestamp = System.currentTimeMillis();</span><br><span class="line">        mStartThreadTimestamp = SystemClock.currentThreadTimeMillis();</span><br><span class="line">        mPrintingStarted = <span class="keyword">true</span>;</span><br><span class="line">        startDump();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        mPrintingStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (isBlock(endTime)) &#123;</span><br><span class="line">            notifyBlockEvent(endTime);</span><br><span class="line">        &#125;</span><br><span class="line">        stopDump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前文可以知道，核心原理就是自定义printer, 系统Looper在dispatchMessage前后会用<code>printer.println</code>来打印，也就是最终会通过这个<code>LooperMonitor</code>的<code>println</code>来打印，也就是在这里在前和后分别执行了<code>startDump()</code>和<code>stopDump()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != BlockCanaryInternals.getInstance().stackSampler) &#123;</span><br><span class="line">        BlockCanaryInternals.getInstance().stackSampler.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != BlockCanaryInternals.getInstance().cpuSampler) &#123;</span><br><span class="line">        BlockCanaryInternals.getInstance().cpuSampler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopDump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != BlockCanaryInternals.getInstance().stackSampler) &#123;</span><br><span class="line">        BlockCanaryInternals.getInstance().stackSampler.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != BlockCanaryInternals.getInstance().cpuSampler) &#123;</span><br><span class="line">        BlockCanaryInternals.getInstance().cpuSampler.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是在前后之间过程中抓取<code>stackSampler</code>和<code>cpuSampler</code>.</p>
<p>这里还要注意一点，<code>isBlock</code>方法判断了，当前的过程是否被认定为block的, 如果是<code>block</code>的，那么就回调出来，写入文件以供后续的UI上的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlock</span><span class="params">(<span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> endTime - mStartTimestamp &gt; mBlockThresholdMillis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyBlockEvent</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> startTime = mStartTimestamp;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> startThreadTime = mStartThreadTimestamp;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> endThreadTime = SystemClock.currentThreadTimeMillis();</span><br><span class="line">    HandlerThreadFactory.getWriteLogThreadHandler().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mBlockListener.onBlockEvent(startTime, endTime, startThreadTime, endThreadTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的源码还是很简单的，但是提供了很好的思路， 我们也可以进一步的对这个机制做一些深入处理，比如做一套监控系统，后台上传用户的trace&amp;cpu和耗时过长的事件等等。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidArchitecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-LeakCanary源码分析</title>
    <url>/posts/91222177/</url>
    <content><![CDATA[<p><a href="https://square.github.io/leakcanary/" target="_blank" rel="noopener">https://square.github.io/leakcanary/</a><br><a href="https://mp.weixin.qq.com/s/idjFaJsLpVLw52RSYHA_Vg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/idjFaJsLpVLw52RSYHA_Vg</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidArchitecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-线程池相关</title>
    <url>/posts/a254a370/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3932921.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 界面适配</title>
    <url>/posts/77dbc89e/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5b7a29736fb9a019d53e7ee2" target="_blank" rel="noopener">https://juejin.im/post/5b7a29736fb9a019d53e7ee2</a></p>
<ol>
<li>dpi (dots per inch)<br> 根据屏幕的真实尺寸和分辨率计算出来, 每个设备都不一样<br> <img src="http://img-scions.test.upcdn.net/dpi.png" alt="sf"></li>
<li>density = dpi / 160</li>
<li>px = density * dp</li>
</ol>
<p>e.g 1920 * 1080屏幕尺寸为5寸，那么dpi大约为440</p>
<p>因为每个屏幕的dpi不同，所以会导致适配的问题。</p>
<p>比如UI设计图按照屏幕宽度为360dp的设计，但是在上述屏幕上, 宽度实际为1080/(440/160) = 392.7dp. 从而导致显示的效果与设计图的不一致</p>
<p>解决方法:<br>由于px = dp * density. 设计图为360dp, 要保证所有设备计算出来的px相同，我们更改density来保证. </p>
<p>density 是 DisplayMetrics中的成员变量<br>DisplayMetrics#density为上述的density<br>DisplayMetrics#densityDpi为上述dpi<br>DisplayMetrics#scaledDensity字体的缩放因子，正常情况下和density相同，但是调节系统字体大小会更改此值</p>
<p>更改后的density为 设备真实宽度(px) / 360</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> sNoncompatDensity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> sNoncompatScaledDensity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCustomDensity</span><span class="params">(@NonNull Activity activity, @NonNull <span class="keyword">final</span> Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics appDisplayMetrics = application.getResources().getDisplayMetrics();</span><br><span class="line">        <span class="keyword">if</span>(sNoncompatDensity == <span class="number">0</span>) &#123;</span><br><span class="line">            sNoncompatDensity = appDisplayMetrics.density;</span><br><span class="line">            sNoncompatScaledDensity = appDisplayMetrics.scaledDensity;</span><br><span class="line">            application.registerComponentCallbacks(<span class="keyword">new</span> ComponentCallbacks() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(newConfig != <span class="keyword">null</span> &amp;&amp; newConfig.fontScale &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        sNoncompatScaledDensity = application.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> targetDensity = appDisplayMetrics.widthPixels / <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> targetScaledDensity = targetDensity * (sNoncompatScaledDensity / sNoncompatDensity);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> targetDensityDpi = (<span class="keyword">int</span>)(<span class="number">160</span> * targetDensity);</span><br><span class="line"></span><br><span class="line">        appDisplayMetrics.density = targetDensity;</span><br><span class="line">        appDisplayMetrics.scaledDensity = targetScaledDensity;</span><br><span class="line">        appDisplayMetrics.densityDpi = targetDensityDpi;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics activityDisplayMetric = activity.getResources().getDisplayMetrics();</span><br><span class="line">        activityDisplayMetric.density = targetDensity;</span><br><span class="line">        activityDisplayMetric.scaledDensity = targetScaledDensity;</span><br><span class="line">        activityDisplayMetric.densityDpi = targetDensityDpi;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-事件分发机制</title>
    <url>/posts/23be93f7/</url>
    <content><![CDATA[<p><a href="https://tryenough.com/android-motionevent" target="_blank" rel="noopener">https://tryenough.com/android-motionevent</a><br><a href="https://blog.csdn.net/carson_ho/article/details/54136311" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/54136311</a><br><a href="https://www.jianshu.com/p/d3758eef1f72" target="_blank" rel="noopener">https://www.jianshu.com/p/d3758eef1f72</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Activity.java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里实际是调用的viewgroup的dispatchTouchEvent进行分发事件</span></span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ViewGroup.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!onInterruptedTouchEvent(ev)) &#123;</span><br><span class="line">        result = child.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果child的dispatchTouchEvent没有消耗这个事件, 就会viewgroup去onTouchEvent消耗</span></span><br><span class="line">    <span class="keyword">if</span>(!result) &#123;</span><br><span class="line">        result = onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">View.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是不是可以理解为如果被onTouch消耗了，就不会走到onTouchEvent进行消耗</span></span><br><span class="line">    <span class="keyword">if</span>(onTouch(<span class="keyword">this</span>, ev)) &#123;</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!result &amp;&amp; onTouchEvent(ev)) &#123;</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Java sleep和wait的区别</title>
    <url>/posts/6e02b883/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/zhangqunshuai/article/details/82455503" target="_blank" rel="noopener">https://blog.csdn.net/zhangqunshuai/article/details/82455503</a></p>
<p>类不同: <code>sleep</code>来自Thread方法， <code>wait</code>来自Object<br>释放锁: <code>sleep</code>不释放锁， <code>wait</code>释放锁<br>用法不同: <code>sleep</code>到时间会自动恢复, <code>wait</code>可以使用<code>notify/notifyAll</code>唤醒</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Bluetooth overview</title>
    <url>/posts/b6e3e565/</url>
    <content><![CDATA[<h1 id="Bluetooth-overview"><a href="#Bluetooth-overview" class="headerlink" title="Bluetooth overview"></a>Bluetooth overview</h1><p>The Android platform includes support for the Bluetooth network stack, which allows a device to wirelessly exchange data with other Bluetooth devices. The application framework provides access to the Bluetooth functionality through the Android Bluetooth APIs. These APIs let applications wirelessly connect to other Bluetooth devices, enabling point-to-point and multipoint wireless features.</p>
<p>Using the Bluetooth APIs, an Android application can perform the following:</p>
<ul>
<li>Scan for other Bluetooth devices</li>
<li>Query the local Bluetooth adapter for paired Bluetooth devices</li>
<li>Establish RFCOMM channels</li>
<li>Connect to other devices through service discovery</li>
<li>Transfer data to and from other devices</li>
<li>Manage multiple connections</li>
</ul>
<p>This page focuses on Classic Bluetooth. Classic Bluetooth is the right choice for more battery-intensive operations, which include streaming and communicating between Android devices. For Bluetooth devices with low power requirements, Android 4.3(API level 18) introduces API support for Bluetooth Low Energy. To learn more, see <a href="https://developer.android.com/guide/topics/connectivity/bluetooth-le.html" target="_blank" rel="noopener">Bluetooth Low Energy</a></p>
<p>This document describes different Bluetooth profiles, including the Health Device Profile. It then explains how to use the Android Bluetooth APIs to accomplish the four major tasks necessary to communicate using Bluetooth: setting up Bluetooth, finding devices that are either paired or available in the local area, connecting devices, and transferring data between devices.</p>
<h2 id="The-basics"><a href="#The-basics" class="headerlink" title="The basics"></a>The basics</h2><p>In order for Bluetooth-enabled devices to transmit data between each other, they must first from a channel of communication using a pairing process. One device, a discoverable device, makes itself available for incoming connection requests. Another device finds the discoverable device using a service discovery process. After the discoverable device accepts the paring request, the two devices complete a bonding process where they exchange security keys. The devices cache these keys for later use. After the pairing and bonding processes are complete, the two device exchange information. When the session is complete, the device that initiated the paring request releases the channel that had linked it to the discoverable device. The two devices remain bonded, however, so they can reconnect automatically during a future session as long as they’re in range of each other and neither device has removed the bond.</p>
<h3 id="Bluetooth-Permission"><a href="#Bluetooth-Permission" class="headerlink" title="Bluetooth Permission"></a>Bluetooth Permission</h3><p>In order to use Bluetooth features in your application, you must declare two permissions. The first of these is <code>BLUETOOTH</code>. You need this permission to perform any Bluetooth communication, such as requesting a connection, accepting a connection, and transferring data.</p>
<p>The other permission that you must declare is either <code>ACCESS_COARSE_LOCATION</code> or <code>ACCESS_FINE_LOCATION</code>. A location permission is required because Bluetooth scans can be used to gather infomation about the location of the user. This information may come from the user’s own devices, as well as Bluetooth beacons in use at locations such as shops and transit facilities.</p>
<p>If you want your app to initiate device discovery or manipulate Bluetooth settings, you must declare the <code>BLUETOOTH_ADMIN</code> permission in addition to the <code>BLUETOOTH</code> permission. Most applications need this permission solely for the ability to discover local Bluetooth devices. The other abilities granted by this permission should not be used, unless the application is a “power manager” that modifies Bluetooth settings upon user request.</p>
<p>Declare the Bluetooth permission(s) in your application manifest file. For example:</p>
<p>See the <uses-permission> reference for more information about declaring application permissions.</uses-permission></p>
<h2 id="Work-with-profiles"><a href="#Work-with-profiles" class="headerlink" title="Work with profiles"></a>Work with profiles</h2><p>Starting in Android 3.0, the Bluetooth API includes support for working with Bluetooth profiles. A Bluetooth profile is a wireless interface specification for Bluetooth-based communication between devices. An example is the Hands-Free profile. For a mobile phone to connect to a wireless headset, both devices must support the Hands-Free profile.</p>
<p>The Android Bluetooth API provides implementations for the following Bluetooth profiles:</p>
<ul>
<li>Headset. The Headset profile provides support for Bluetooth headsets to be used with mobile phones. Android provides the <code>BluetoothHeadset</code> class, which is a proxy for controlling the Bluetooth Headset Service. This includes both Bluetooth Headset and Hands-Free(v1.5) profiles. The <code>BluetoothHeadset</code> class includes support for AT command. For more discussion of this topic, see <a href="https://developer.android.com/guide/topics/connectivity/bluetooth#AT-Commands" target="_blank" rel="noopener">Vendor-specific AT commands</a>.</li>
<li>A2DP. The Advanced Audio Distribution Profile(A2DP) profile defines how high quality audio can be streamed from one device to another over a Bluetooth connection. Android provides the <code>BluetoothA2dp</code> class, which is a proxy for controlling the Bluetooth A2DP Service.</li>
<li>Health Device. Android 4.0(API level 14) introduces support for the Bluetooth Health Device Profile(HDP). This lets you create applications that use Bluetooth to communicates with health devices that support Bluetooth, such as heart-rate monitors, blood meters, thermometers, scales, and so on. For a list of supported devices and their corresponding device data specilization codes, refer to Bluetooth’s <a href="https://www.bluetooth.com/specifications/assigned-numbers/health-device-profile" target="_blank" rel="noopener">HDP Device Specializations</a>. These values are also referenced in the ISO/IEEE 11073-20601 specification as MDC_DEV_SPEC_PROFILE_* in the Nomenclature Codes Annex. For more discussion of HDP, see <a href="https://developer.android.com/guide/topics/connectivity/bluetooth#HDP" target="_blank" rel="noopener">Health Device Profile</a>.</li>
</ul>
<p>Here are the basic steps for working with a profile:</p>
<ol>
<li>Get the default adapter , as described in <a href="https://developer.android.com/guide/topics/connectivity/bluetooth.html#SettingUp" target="_blank" rel="noopener">Setting Up Bluetooth</a></li>
<li>Set up a <code>BluetoothProfile.ServiceListener</code>. This listener notifies <code>BluetoothProfile</code> clients when they have been connected to or disconnected from the service.</li>
<li>Use <code>getProfileProxy()</code> to establish a connection to the profile proxy object associated with the profile. In the example below ,the profile proxy object is an instance of <code>BluetoothHeadset</code></li>
<li>In <code>onServiceConnected()</code>, get a handle to the profile proxy object.</li>
<li>Once you have the profile proxy object, you can use it to monitor the state of the connection and perform other operations that are  relevant to that profile.</li>
</ol>
<p>For example, this code snippet shows how to connect to a <code>BluetoothHeadset</code> proxy object so that you can control the Headset profile: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BluetoothHeadset bluetoothHeadset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the default adapter</span></span><br><span class="line">BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BluetoothProfile.ServiceListener profileListener = <span class="keyword">new</span> BluetoothProfile.ServiceListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(<span class="keyword">int</span> profile, BluetoothProfile proxy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (profile == BluetoothProfile.HEADSET) &#123;</span><br><span class="line">            bluetoothHeadset = (BluetoothHeadset) proxy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(<span class="keyword">int</span> profile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (profile == BluetoothProfile.HEADSET) &#123;</span><br><span class="line">            bluetoothHeadset = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Establish connection to the proxy.</span></span><br><span class="line">bluetoothAdapter.getProfileProxy(context, profileListener, BluetoothProfile.HEADSET);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... call functions on bluetoothHeadset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Close proxy connection after use.</span></span><br><span class="line">bluetoothAdapter.closeProfileProxy(bluetoothHeadset);</span><br></pre></td></tr></table></figure>

<h3 id="Vendor-specific-AT-commands"><a href="#Vendor-specific-AT-commands" class="headerlink" title="Vendor-specific AT commands"></a>Vendor-specific AT commands</h3><p>Starting in Android 3.0 (API level 11), applications can register to receive system broadcasts of predefined vendor-specific AT commands sent by headsets (such as a Plantronics +XEVENT command). For example, an application could receive broadcasts that indicate a connected device’s battery level and could notify the user or take other action as needed. Create a broadcast receiver for the <code>ACTION_VENDOR_SPECIFIC_HEADSET_EVENT</code> intent to handle vendor-specific AT commands for the headset.</p>
<h2 id="Health-device-profile"><a href="#Health-device-profile" class="headerlink" title="Health device profile"></a>Health device profile</h2><p>Android 4.0 (API level 14) introduces support for the Bluetooth Health</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 关于onPause和onStop回调时机的问题</title>
    <url>/posts/eeb5a1cb/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我们知道一个<code>Activity</code>的启动会执行<code>onCreate</code> -&gt; <code>onStart</code> -&gt;  <code>onResume</code></p>
<p>一个<code>Activity</code>的停止会执行 <code>onPause</code> -&gt; <code>onStop</code> -&gt; <code>onDestroy</code></p>
<p>那么，<code>ActivityA</code>启动<code>ActivityB</code>的时候，<code>ActivityB</code>的<code>onCreate</code>与<code>ActivityA</code>的<code>onPause</code>还是<code>onStop</code>哪个在前呢?</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>先看下onPause和onStop官方文档的解释</p>
<ul>
<li><p>onPause</p>
<p>  Called when the activity loses foreground state, is no longer focusable or before transition to stopped/hidden or destroyed state. The activity is still visible to user, so it’s recommended to keep it visually active and continue updating the UI. <code>Implementations of this method must be very quick because the next activity will not be resumed until this method returns.</code> 也就是说这个onPause方法里不能执行太复杂的方法，因为另一个Activity的onResume要等这个Activity的onPause执行完才会执行，也就是如果这里做了大量的操作，启动下一个Activity就会被卡住</p>
</li>
<li><p>onStop</p>
<p>  Called when the activity is no longer visible to the user. This may happen either because a new activity is being started on top, an existing one is being brought in front of this one, or this one is being destroyed. <code>This is typically used to stop animations and refreshing the UI, etc.</code> 常在这里来停止动画和停止刷新UI.</p>
</li>
</ul>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>代码很简单.</p>
<p>结论是</p>
<p><code>ActivityA onPause</code> -&gt; <code>ActivityB onCreate</code> -&gt; <code>ActivityB onStart</code> -&gt; <code>ActivityB onResume</code> -&gt; <code>ActivityA onStop</code></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>其实从官方文档就可以看出, <code>ActivityB</code>会在<code>ActivityA</code>的<code>onPause</code>执行之后才会执行，所以文档里建议不要再<code>onPause</code>里做耗时操作，不然会影响<code>Activity</code>启动速度. 那为什么<code>onStop</code>会在<code>ActivityA</code>执行完<code>create, start, resume</code>之后才会执行呢？也是为了让画面更流畅，用户可以点击跳转后可以快速的切换到下一个<code>Activity</code>，体验更流畅些，在<code>ActivityA</code>看不到的时候，才去做一些A中的<code>onStop</code>里执行的方法.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/u014630987/article/details/82056501" target="_blank" rel="noopener">https://blog.csdn.net/u014630987/article/details/82056501</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidActivity</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-LruCache原理</title>
    <url>/posts/85c12fe4/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/b49a111147ee" target="_blank" rel="noopener">https://www.jianshu.com/p/b49a111147ee</a></p>
<p>首先来看下构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里构造了一个<code>LinkedHashMap</code>，也就是<code>LruCache</code>是通过<code>LinkedHashMap</code>实现的. </p>
<p>再看下类里的一些变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;K, V&gt; map; <span class="comment">//存放数据的主体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;   <span class="comment">//当前节点数 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//最大支持节点数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> putCount; <span class="comment">//put次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> createCount; <span class="comment">//create次数?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> evictionCount; <span class="comment">//被删除的次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hitCount; <span class="comment">//命中的次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> missCount; <span class="comment">//没命中的次数</span></span><br></pre></td></tr></table></figure>

<p>先有个大概印象，不理解没关系. 接着来看下常用的一些方法: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不支持key or value 为null</span></span><br><span class="line">    <span class="keyword">if</span>(key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null || value == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V previous;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        putCount++;</span><br><span class="line">        size += safeSizeOf(key, value);</span><br><span class="line">        <span class="comment">// 插入的key不为空, 也就是previous不为null, </span></span><br><span class="line">        <span class="comment">// 会插入后把原有key的位置删除, 所以size 先加后减不变, </span></span><br><span class="line">        <span class="comment">// 当前的key, value放在最上面</span></span><br><span class="line">        previous = map.put(key, value);</span><br><span class="line">        <span class="keyword">if</span>(previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size -= safeSizeOf(key, previous);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, previous, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果插入key时没有相同的key, 那么会增加一个K,V , 要判断跟maxSize大小关系，超过了会trim, 删除最后一个</span></span><br><span class="line">    trimToSize(maxSize);</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调，是因为size删除的，还是因为put相同key删除的</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">entryRemoved</span><span class="params">(<span class="keyword">boolean</span> evicted, K key, V oldValue, V newValue)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还不是很理解, 正常都是返回1</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">safeSizeOf</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = sizeOf(keysafeSizeOf, value);</span><br><span class="line">    <span class="keyword">if</span>(result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Negative size: "</span> + key + <span class="string">"="</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表，删除最后一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName()</span><br><span class="line">                        + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(size &lt;= maxSize) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历，找到最后一个节点, 删除</span></span><br><span class="line">            Map.Entry&lt;K, V&gt; toEvict = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;K, V&gt; entry : map.entrySet()) &#123;</span><br><span class="line">                toEvict = entry;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(toEvict == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            key = toEvict.getKey();</span><br><span class="line">            value = toEvict.getValue();</span><br><span class="line">            map.remove(key);</span><br><span class="line">            size -= (key, value);</span><br><span class="line">            evictionCount ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        entryRemoved(<span class="keyword">true</span>, key, value, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看下<code>get</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the value for &#123;<span class="doctag">@code</span> key&#125; if it exists in the cache or can be</span></span><br><span class="line"><span class="comment"> * created by &#123;<span class="doctag">@code</span> #create&#125;. If a value was returned, it is moved to the</span></span><br><span class="line"><span class="comment"> * head of the queue. This returns null if a value is not cached and cannot</span></span><br><span class="line"><span class="comment"> * be created.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V mapValue;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        mapValue = map.get(key);</span><br><span class="line">        <span class="comment">//找到了(K, V)对</span></span><br><span class="line">        <span class="keyword">if</span>(mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            hitCount++;</span><br><span class="line">            <span class="keyword">return</span> mapValue;</span><br><span class="line">        &#125;</span><br><span class="line">        missCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没找到， 但是create方法我不太理解</span></span><br><span class="line">    V createdValue = create(key);</span><br><span class="line">    <span class="keyword">if</span>(createdValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        createCount++;</span><br><span class="line">        mapValue = map.put(key, createdValue);</span><br><span class="line">        <span class="comment">//与put类似, 但我不太理解create方法</span></span><br><span class="line">        <span class="keyword">if</span>(mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(key, mapValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            size += safeSizeOf(key, createdValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, createdValue, mapValue);</span><br><span class="line">        <span class="keyword">return</span> mapValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        trimToSize(maxSize);</span><br><span class="line">        <span class="keyword">return</span> createdValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called after a cache miss to compute a value for the corresponding key.</span></span><br><span class="line"><span class="comment"> * Returns the computed value or null if no value can be computed. The</span></span><br><span class="line"><span class="comment"> * default implementation returns null.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The method is called without synchronization: other threads may</span></span><br><span class="line"><span class="comment"> * access the cache while this method is executing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If a value for &#123;<span class="doctag">@code</span> key&#125; exists in the cache when this method</span></span><br><span class="line"><span class="comment"> * returns, the created value will be released with &#123;<span class="doctag">@link</span> #entryRemoved&#125;</span></span><br><span class="line"><span class="comment"> * and discarded. This can occur when multiple threads request the same key</span></span><br><span class="line"><span class="comment"> * at the same time (causing multiple values to be created), or when one</span></span><br><span class="line"><span class="comment"> * thread calls &#123;<span class="doctag">@link</span> #put&#125; while another is creating a value for the same</span></span><br><span class="line"><span class="comment"> * key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> V <span class="title">create</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>剩下的就是一些简单的函数了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    V previous;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        previous = map.remove(key);</span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size -= safeSizeOf(key, previous);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entryRemoved(<span class="keyword">false</span>, key, previous, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    trimToSize(maxSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">evictAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    trimToSize(-<span class="number">1</span>); <span class="comment">// -1 will evict 0-sized elements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> Map&lt;K, V&gt; <span class="title">snapshot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> accesses = hitCount + missCount;</span><br><span class="line">    <span class="keyword">int</span> hitPercent = accesses != <span class="number">0</span> ? (<span class="number">100</span> * hitCount / accesses) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]"</span>,</span><br><span class="line">            maxSize, hitCount, missCount, hitPercent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">maxSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hitCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hitCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">missCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> missCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">createCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">putCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">evictionCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evictionCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个原理就是LinkedHashMap如果命中，就把原有位置的KV删除，重新的放在最上方，如果没命中就会在最上方增加一个，然后判断size是否超过，超过了会把最后的KV删除</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Managing Bitmap Memory</title>
    <url>/posts/77852a81/</url>
    <content><![CDATA[<h1 id="Managing-Bitmap-Memory"><a href="#Managing-Bitmap-Memory" class="headerlink" title="Managing Bitmap Memory"></a>Managing Bitmap Memory</h1><p>In addition to the steps described in <a href="https://developer.android.com/topic/performance/graphics/cache-bitmap.html" target="_blank" rel="noopener">Caching Bitmaps</a>, there are specific things you can do to facilitate garbage collection and bitmap reuse. The recommended strategy depends on which version(s) of Android you are targeting. The <code>BitmapFun</code> sample app included with this class shows you how to design your app to work efficiently across different versions of Android.</p>
<p>To set the stage of this lesson, here is how Android’s management of bitmap memory has evolved:</p>
<ul>
<li>On Android Android 2.2(API level 8) and lower, when garbage collection occurs, your app’s threads get stopped. This causes a lag that can degrade  performance. Android 2.3 adds concurrent garbage collection, which means that the memory is reclaimed soon after a bitmap is no longer referenced.</li>
<li>On Android 2.3.3(API level 10) and lower, the backing pixel data for a bitmap is stored in native memory. It is separate from the bitmap itself, which is stored in the Dalvik heap. The pixel data in native memory is not released in predictable manner,  potentially causing an application to briefly exceed its memory limits and crash. From Android 3.0(API level 11) through Android 7.1 (API level 25), the pixel data is stored on the Dalvik heap along with the associated bitmap. In Android 8.0 (API level 26), and higher , the bitmap pixel data is stored in the native heap.</li>
</ul>
<p>The following sections describe how to optimize bitmap memory management for different Android versions.</p>
<h2 id="Manage-Memory-on-Android-2-3-3-and-Lower"><a href="#Manage-Memory-on-Android-2-3-3-and-Lower" class="headerlink" title="Manage Memory on Android 2.3.3 and Lower"></a>Manage Memory on Android 2.3.3 and Lower</h2><p>On Android 2.3.3(API level 10) and lower, using <code>recycler()</code> is recommended. If you’re displaying large amounts of bitmap data in your app, you’re likely to run into <code>outOfMemoryError</code> erros. The <code>recycler()</code> method allows an app to reclaim memory as soon as possible.</p>
<p>// TODO……</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidView</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Caching Bitmaps</title>
    <url>/posts/a176b35b/</url>
    <content><![CDATA[<h1 id="Caching-Bitmaps"><a href="#Caching-Bitmaps" class="headerlink" title="Caching Bitmaps"></a>Caching Bitmaps</h1><p>Loading a single bitmap into your user interface(UI) is straightforward, however things get more complicated if you need to load a larger set of images at once. In many cases(such as with components like <code>ListView</code>, <code>GridView</code> or <code>ViewPager</code>), the total number of images on-screen combined with images that might soon scroll onto the screen are essentially unlimited.</p>
<p>(直接把图片加载进UI可能还比较容易，但是，如果一下加载很多图片到listview, gridview或viewpager里，可能就会出现问题.)</p>
<p>Memory usage is kept down with components like this by recycling the child views as they move off-screen. The garbage collector also frees up your loaded bitmaps, assuming you don’t keep any long lived references. This is all good and well but in order to keep a fluid and fast-loading UI you want to avoid continually processing these images each time they come back on-screen. A memory and disk cache can often help here, allowing componnets to quickly reload processed images.</p>
<p>(上述的一些控件，会把看不到的view移除来减少内存占用。 垃圾回收器会释放你加载进来的图片。 但是，为了视图的流畅，你不能每次都释放然后重新加载进来。 你应该使用内存和磁盘缓存来帮助控件快速的获取到需要加载的图片)</p>
<p>This lesson walks you through using a memory and disk bitmap cache to improve the responsiveness and fluidity of your UI when loading multiple bitmaps.<br>(本节课将带你走进如何使用内存和磁盘缓存来优化UI在加载很多图片时候的流畅性)</p>
<h2 id="Use-a-Memory-Cache"><a href="#Use-a-Memory-Cache" class="headerlink" title="Use a Memory Cache"></a>Use a Memory Cache</h2><p>A memory cache offers fast access to bitmaps as the cost of taking up valueable application memory. The <a href="https://developer.android.com/reference/android/util/LruCache.html" target="_blank" rel="noopener">LruCache</a> class(also available in the <code>Support Library</code> for use back to API Level 4) is particularly well suited to the task of caching bitmaps, keeping recently referenced objects in a strong referenced <a href="https://developer.android.com/reference/java/util/LinkedHashMap.html" target="_blank" rel="noopener">LinkedHashMap</a> and evicting the least recently used member before the cache exceeds its designated size.</p>
<p>(LruCache适合做内存缓存的工具, 把常用的对象存起来，把不常用的删掉,(不准确))</p>
<p>In order to choose a suitable size for a <code>LruCache</code>, a number of factors should be taken into consideration, for example:</p>
<p>(你需要考虑以下几点来选择合适的LruCache的大小)</p>
<ul>
<li>How memory f is the rest of your activity and/or application</li>
<li>How many images will be on-screen at once? How many need to be available ready to come on-screen?</li>
<li>What is the screen size and density of the device? An extra high density screen(xhdpi) device like <code>Galaxy Nexus</code> will need a larger cache to hold the same number of imagesin memory compared to a device like <code>Nexus S</code>(hdpi).</li>
<li>What dimensions and configuration are the bitmaps and therefore how much memory will each take up?</li>
<li>How frequently will the images be accessed? Will some be accessed more frequently than others? If so, perhaps you may want to keep certain items always in memory or even have multiple <code>LruCache</code> objects for different groups of bitmaps.</li>
<li>Can you balance quality against quantity? Sometims it can be more useful to store a larger number of lower quality bitmpas, potentially loading a higher quality version in another background task.</li>
</ul>
<p>There is no specific size or formula that suits all applications, it’s up to you to analyze your usage and come up with a suitable solution. A cache that is too small causes additional overhead with no benefit, a cache that is too large can once again cause <code>java.lang.OutOfMemory</code> exceptions and leaves the reset of your app little memory to work with.</p>
<p>(没有一个固定的缓存大小适配所有的程序， 这取决于你。 太小的缓存没有意义，太大的缓存可能自己会导致OOM。)</p>
<p>Here’s an example of setting up a <code>LruCache</code> for bitmaps.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; memoryCache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Get max available VM memory, exceeding this amount will throw an</span></span><br><span class="line">    <span class="comment">// OutOfMemory exception. Stored in kilobytes as LruCache takes an</span></span><br><span class="line">    <span class="comment">// int in its constructor.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use 1/8th of the available memory for this memory cache.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    memoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// The cache size will be measured in kilobytes rather than</span></span><br><span class="line">            <span class="comment">// number of items.</span></span><br><span class="line">            <span class="keyword">return</span> bitmap.getByteCount() / <span class="number">1024</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        memoryCache.put(key, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemCache</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memoryCache.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When loading a bitmap into an <code>ImageView</code>, the <code>LruCache</code> is checked first. If an entry is found, it is used immediately to update the <code>ImageView</code>, otherwise a background thread is spawned to process the image.</p>
<p>(加载图片时，先从LruCache里去找，找到后就直接展示，找不到再另起处理图片的线程)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBitmap</span><span class="params">(<span class="keyword">int</span> resId, ImageView imageView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String imageKey = String.valueOf(resId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey);</span><br><span class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mImageView.setImageBitmap(bitmap);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mImageView.setImageResource(R.drawable.image_placeholder);</span><br><span class="line">        BitmapWorkerTask task = <span class="keyword">new</span> BitmapWorkerTask(mImageView);</span><br><span class="line">        task.execute(resId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>BitmapWorkerTask</code> also needs to be updated to add entries to the memory cache:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Decode image in background.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</span><br><span class="line">                getResources(), params[<span class="number">0</span>], <span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">        addBitmapToMemoryCache(String.valueOf(params[<span class="number">0</span>]), bitmap);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Use-a-Disk-Cache"><a href="#Use-a-Disk-Cache" class="headerlink" title="Use a Disk Cache"></a>Use a Disk Cache</h2><p>A memory cache is useful in speeding up access to recently viewed bitmaps, however you cannot rely on images being available in this cache. components like <code>GridView</code> with larger datasets can easily fill up a memory cache. Your application could be interrupted by another task like a phone call, and while in the background it might be killed and the memory cache destroyed.  Once the user resumes, your application has to process each image again.</p>
<p>(内存缓存在快速的加载近期查看的图片很有用，但是你不能依赖内存缓存，因为比如像GridView这样，一次可能会需要加载多个，然后很容易会把缓存填满。 而且你的程序可能会被其他任务打断，比如来电话，这时程序在后台，可能内存会被回收， 用户重新进来的时候，你的程序需要重新处理这个过程一次)</p>
<p>A disk cache can be used in these cases to persist processed bitmaps and help decrease loading times where images are no longer avaibale in a memory cache. Of course, fetching images from disk is slower than loading from memory and should be done in a background thread, as disk read times can be unpredictable.</p>
<p>(磁盘缓存可以持久化图片。当然从磁盘加载图片比内存慢得多，而且不可预期，所以最好在后台加载.)</p>
<p>The sample code of this class uses a <code>DiskLruCache</code> implementation that is pulled from the <code>Android source</code>. Here’s updated example code that adds a disk cache in addition to the existing memory cache.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> DiskLruCache diskLruCache;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object diskCacheLock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> diskCacheStarting = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DISK_CACHE_SIZE = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>; <span class="comment">// 10MB</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DISK_CACHE_SUBDIR = <span class="string">"thumbnails"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Initialize memory cache</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Initialize disk cache on background thread</span></span><br><span class="line">    File cacheDir = getDiskCacheDir(<span class="keyword">this</span>, DISK_CACHE_SUBDIR);</span><br><span class="line">    <span class="keyword">new</span> InitDiskCacheTask().execute(cacheDir);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitDiskCacheTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">File</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(File... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (diskCacheLock) &#123;</span><br><span class="line">            File cacheDir = params[<span class="number">0</span>];</span><br><span class="line">            diskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);</span><br><span class="line">            diskCacheStarting = <span class="keyword">false</span>; <span class="comment">// Finished initialization</span></span><br><span class="line">            diskCacheLock.notifyAll(); <span class="comment">// Wake any waiting threads</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Decode image in background.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String imageKey = String.valueOf(params[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check disk cache in background thread</span></span><br><span class="line">        Bitmap bitmap = getBitmapFromDiskCache(imageKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123; <span class="comment">// Not found in disk cache</span></span><br><span class="line">            <span class="comment">// Process as normal</span></span><br><span class="line">            <span class="keyword">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</span><br><span class="line">                    getResources(), params[<span class="number">0</span>], <span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add final bitmap to caches</span></span><br><span class="line">        addBitmapToCache(imageKey, bitmap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Add to memory cache as before</span></span><br><span class="line">    <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        memoryCache.put(key, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Also add to disk cache</span></span><br><span class="line">    <span class="keyword">synchronized</span> (diskCacheLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (diskLruCache != <span class="keyword">null</span> &amp;&amp; diskLruCache.get(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            diskLruCache.put(key, bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromDiskCache</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (diskCacheLock) &#123;</span><br><span class="line">        <span class="comment">// Wait while disk cache is started from background thread</span></span><br><span class="line">        <span class="keyword">while</span> (diskCacheStarting) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                diskCacheLock.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (diskLruCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> diskLruCache.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a unique subdirectory of the designated app cache directory. Tries to use external</span></span><br><span class="line"><span class="comment">// but if not mounted, falls back on internal storage.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDiskCacheDir</span><span class="params">(Context context, String uniqueName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check if media is mounted or storage is built-in, if so, try and use external cache dir</span></span><br><span class="line">    <span class="comment">// otherwise use internal cache dir</span></span><br><span class="line">    <span class="keyword">final</span> String cachePath =</span><br><span class="line">            Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||</span><br><span class="line">                    !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :</span><br><span class="line">                            context.getCacheDir().getPath();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(cachePath + File.separator + uniqueName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>While the memory cache is checked in the UI thread, the disk cache is checked in the background thread. Disk operations should never take place on the UI thread. When image processing is complete, the final bitmap is added to both the memory and disk cache for future use.</p>
<h2 id="Handle-Configuration-Changes"><a href="#Handle-Configuration-Changes" class="headerlink" title="Handle Configuration Changes"></a>Handle Configuration Changes</h2><p>Runtime configuration changes, such as a screen orientation change, cause Android to destroy and restart the running activity with the new configuration (For more information about this behavior, see <a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="noopener">Handling Runtime Changes</a>). You want to avoid having to process all your images again so the user has a smooth and fast experience when a configuration change occurs.</p>
<p>Luckily, you have a nice memory cache of bitmaps that you built in the Use a Memory Cache section. This cache can be passed through to the new activity instance using a Fragment which is preserved by calling setRetainInstance(true). After the activity has been recreated, this retained Fragment is reattached and you gain access to the existing cache object, allowing images to be quickly fetched and re-populated into the ImageView objects.</p>
<p>Here’s an example of retaining a LruCache object across configuration changes using a Fragment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; memoryCache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    RetainFragment retainFragment =</span><br><span class="line">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</span><br><span class="line">    memoryCache = retainFragment.retainedCache;</span><br><span class="line">    <span class="keyword">if</span> (memoryCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">        memoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line">            ... <span class="comment">// Initialize cache here as usual</span></span><br><span class="line">        &#125;</span><br><span class="line">        retainFragment.retainedCache = memoryCache;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RetainFragment"</span>;</span><br><span class="line">    <span class="keyword">public</span> LruCache&lt;String, Bitmap&gt; retainedCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetainFragment</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RetainFragment <span class="title">findOrCreateRetainFragment</span><span class="params">(FragmentManager fm)</span> </span>&#123;</span><br><span class="line">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</span><br><span class="line">        <span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            fragment = <span class="keyword">new</span> RetainFragment();</span><br><span class="line">            fm.beginTransaction().add(fragment, TAG).commit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setRetainInstance(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To test this out, try rotating a device both with and without retaining the Fragment. You should notice little to no lag as the images populate the activity almost instantly from memory when you retain the cache. Any images not found in the memory cache are hopefully available in the disk cache, if not, they are processed as usual.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidView</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Loading Large Bitmaps Efficiently</title>
    <url>/posts/74f024ac/</url>
    <content><![CDATA[<h1 id="Loading-Large-Bitmaps-Efficiently"><a href="#Loading-Large-Bitmaps-Efficiently" class="headerlink" title="Loading Large Bitmaps Efficiently"></a>Loading Large Bitmaps Efficiently</h1><p>Images come in all shapes and sizes. In many cases they are larger than required for a typical application user interface (UI). For example, the system Gallery application displays photos taken using your Android devices’s camera which are typically much higher resolution than the screen density of your device.</p>
<p>Given that you are working with limited memory, ideally you only want to load a lower resolution version in memory. The lower resolution version should match the size of the UI component that displays it. An image with a higher resolution does not provide any visible benefit, but still takes up precious memory and incurs additional performance overhead due to additional on the flying scale.</p>
<p>This leason walks you through decoding large bitmaps without exceeding the per application memory limit by loading a smaller subsampled version in memory.</p>
<p>(图片有可能比你屏幕还大，比如拍照，拍出很大尺寸的照片，但是你可能不需要这么大尺寸的图片来展示， 因为这意味着占用更大的内存，而且可能会带来OOM, 本节课将带你了解如何解决这样的情况.)</p>
<h2 id="Reading-Bitmap-Dimensions-and-Type"><a href="#Reading-Bitmap-Dimensions-and-Type" class="headerlink" title="Reading Bitmap Dimensions and Type"></a>Reading Bitmap Dimensions and Type</h2><p>The <code>BitmapFactory</code> class provides serveral decoding methods (<code>decodeByteArray</code>, <code>decodeFile</code>, <code>decodeResource</code>, etc.) for creating a <code>Bitmap</code> from various soures. Choose the most appropriate decode method based on your image data source. These methods attempt to allocate memory for the constructed bitmap and therefore can easily result in an <code>OutOfMemory</code> exception. Each type of decode method has additional signatures that let you specify decoding options via the <code>BitmapFactory.Options</code> class. Setting the <code>inJustDecodeBounds</code> property to true while decoding avoid memory allocation, returning <code>null</code> for the bitmap object but setting <code>outWidth</code>, <code>outHeight</code> and <code>outMimeType</code>. This technique allows you to read the dimensions and type of the image data prior to construction(and memory allocation) of the bitmap.</p>
<p>(BitmapFactory提供了几种获取图片的方法， 你可以根据图片所在的位置来选择其中一种方法， 但是直接使用这样的方法可能会导致OOM。 因此，你可以在使用方法的时候通过传入<code>BitmapFaction.Options</code>这个属性, 把其<code>inJustDecodeBounds</code>设置为true, 这样，你虽然获取不到bitmap图片，但是可以获取到<code>outWidht</code>, <code>outHeight</code>, <code>outMimeType</code>这些属性。也就是说，这个参数就是假的加载图片，真的获取图片属性。)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">BitmapFactory.decodeResource(getResources(), R.id.myimage, options);</span><br><span class="line"><span class="keyword">int</span> imageHeight = options.outHeight;</span><br><span class="line"><span class="keyword">int</span> imageWidth = options.outWidth;</span><br><span class="line">String imageType = options.outMimeType;</span><br></pre></td></tr></table></figure>

<p>To avoid <code>java.lang.OutOfMemory</code> exceptions, check the dimensions of a bitmap before decoding it ,unless you absolutely trust the source to provide you with predictably sized image data that comfortablly fits within the available memory.<br>(为了避免OOM问题，你最好在decode图片的时候，检查图片的尺寸, 除非你能确定提供的图片尺寸不会导致OOM)</p>
<h2 id="Load-a-Scaled-Down-Version-into-Memory"><a href="#Load-a-Scaled-Down-Version-into-Memory" class="headerlink" title="Load a Scaled Down Version into Memory"></a>Load a Scaled Down Version into Memory</h2><p>Now that the image dimensions are known, they can be used to decide if the full image should be loaded into memory or if a subsampled version should be loaded instead. Here are some factors to consider:</p>
<p>(你知道图片尺寸后，你需要决定是把图片整个加载进来，还是加载采样图片, 你需要考虑以下几点)</p>
<ul>
<li>Estimated memory usage of loading the full image in memory. (是否有足够内存来加载整个图片)</li>
<li>Amount of memory you are willing to commit to loading this image given any other memory requirements of your application (你愿意用多少内存为了图片加载)</li>
<li>Dimensions of the target <code>ImageView</code> or UI component that the images is to be loaded into (ImageView或者其他放置图片的控件的大小)</li>
<li>Screen size and density of the current device (当前设备的屏幕尺寸)</li>
</ul>
<p>For example, it’s not worth loading a 1024 * 768 pixel image into memory if it will eventually be displayed in a 128<em>96 pixel thumbnail in an `ImageView.  (比如就不值得把1024</em>768的图片全加进来放到128*96大小的ImageView里)</p>
<p>To tell the decoder to subsample the image, loading a smaller version into memory , set <code>inSampleSize</code> to <code>true</code> in your <code>BitmapFactory.Options</code> object. For example, an image with resolution 2048 * 1536 that is decoded with an <code>inSampleSize</code> of 4 produces a bitmap of approximately 512 * 384. Loading this into memory uses 0.75MB rather than 12MB for the full image(assuming a bitmap configuration of ARGB_8888). Here’s a method to calculate a sample size value that is a power of two based on a target width and height:</p>
<p>(告诉decoder如何来获取采样图片， 设置<code>BitmapFactory.Options</code>里的<code>inSampleSize</code>. 比如一个2048*1536大小的图片，使用<code>inSampleSize=4</code>, 那么将获得<code>512 * 384</code>的采样图片，内存从12Mb变为0.75MB).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Raw height and width of image</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></span><br><span class="line">        <span class="comment">// height and width larger than the requested height and width.</span></span><br><span class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</span><br><span class="line">                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</span><br><span class="line">            inSampleSize *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To use this method, first decode with <code>inJustDecodeBounds</code> set to <code>true</code>, pass the options through and then decode again using the new <code>inSampleSize</code> value value and <code>inJustDecodeBounds</code> set to <code>false</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First decode with inJustDecodeBounds=true to check dimensions</span></span><br><span class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate inSampleSize</span></span><br><span class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decode bitmap with inSampleSize set</span></span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This methods makes it easy to load a bitmap of arbitrarily large size into an <code>ImageView</code> that displays a 100*100 pixel thumbnail, asshown in the following example code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">imageView.setImageBitmap(</span><br><span class="line">decodeSampledBitmapFromResource(getResources(), R.id.myimage, <span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<p>You can follow a similar process to decode bitmap from other sources, by substituting the appropriate <code>BitmapFactory.decode*</code> method as needed.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidView</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 常见内存泄漏</title>
    <url>/posts/a6157931/</url>
    <content><![CDATA[<p><a href="https://www.toptal.com/java/hunting-memory-leaks-in-java" target="_blank" rel="noopener">https://www.toptal.com/java/hunting-memory-leaks-in-java</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Android App启动过程和Activity启动过程</title>
    <url>/posts/b5608f0f/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qian520ao/article/details/78156214" target="_blank" rel="noopener">https://blog.csdn.net/qian520ao/article/details/78156214</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidActivity</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-RecyclerView与ListView的区别</title>
    <url>/posts/d2b4a3fc/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/guolin_blog/article/details/44996879" target="_blank" rel="noopener">https://blog.csdn.net/guolin_blog/article/details/44996879</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android StartService和bindService的区别</title>
    <url>/posts/72e1c46d/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SampleService"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Debug.i(TAG, <span class="string">"onCreate..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"onBind..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"onStartCommand"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Debug.i(TAG, <span class="string">"onDestroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>startService</code></p>
<p>第一次会走<code>onCreate</code>, <code>onStartCommand</code> (<code>onStart</code>已经<code>deprecated</code>了, 取而代之的是<code>onStartComand</code>), 之后每次在<code>start</code> 都只会走<code>onStartCommand</code>. 推出Activity, Service的<code>onDestroy</code>不会走到, 会一直在后台运行</p>
<p><code>bindService</code><br>第一次会走<code>onCreate</code>, <code>onBind</code>, 之后每次<code>bind</code>都只不触发<code>onBind</code>和<code>onCreate</code>， Activity推出后, 会执行<code>onDestroy</code></p>
<p><code>start()</code>方式，很难在Activity中对<code>Service</code>进行控制， 因此，会有<code>bindService</code>方式, 在Service里创建一个类继承Binder, 然后会回调会bindService的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Service.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LocalBinder binder = <span class="keyword">new</span> LocalBinder();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Debug.i(TAG, <span class="string">"test..."</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">     Debug.i(TAG, <span class="string">"onBind..."</span>);</span><br><span class="line">     <span class="keyword">return</span> binder;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> Activity.java</span><br><span class="line"> </span><br><span class="line"> bindService(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SampleService.class), <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">                     Debug.i(TAG, <span class="string">"onServiceConnected "</span>);</span><br><span class="line">                     SampleService.LocalBinder binder = (SampleService.LocalBinder)service;</span><br><span class="line">                     binder.test();</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">                     Debug.i(TAG, <span class="string">"onServiceDisconnected "</span>);</span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>

<h1 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h1><p>Android Interface Definition Language. 可以让某个Service与多个应用程序组件之间进行跨进程通讯, 从而实现多个应用程序共享一个Service的功能. 也是通过bindService来实现，流程与上述差不多。 具体细节有待分析.</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidService</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashMap &amp; HashTable, HashMap &amp; ConcurrentHashMap&#39;</title>
    <url>/posts/f7f3c028/</url>
    <content><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>惯例，先从构造函数开始看:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(initialCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(initialCapacity &gt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回大于输入参数且最近的2的整数次幂的数。比如10，则返回16</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里主要注意几个参数</p>
<ul>
<li>loadFactor </li>
<li>threshold // next size value at which to resize (capacity * load factor) 就是size超过多少时数组需要resize </li>
<li>capacity</li>
</ul>
<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>接下来看下重要的put方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>)  ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里核心就是<code>putVal</code>函数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="comment">// 记录数组的length</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">//记录存放node所在数组的index</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) &#123; <span class="comment">// hash通过与数组size做&amp;运算，找到对应到index</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>); <span class="comment">//当前数组i无节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        K k;</span><br><span class="line">        <span class="comment">// p 指向数组中index位置，第一个节点</span></span><br><span class="line">        <span class="keyword">if</span>(p.hash == hash &amp;&amp; ((k = p.key) == key) || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">            e = p; <span class="comment">//直接替换</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p <span class="keyword">instanceof</span> TreeNode) &#123;</span><br><span class="line">            e = ((TreeNode&lt;K, V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span>((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 查询到最后都没找到，就在链表的最后newNode一个</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//长度超过TREEIFY_THRESHOLD后就重新treeifyBin， 把链表改为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span>(binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) &#123;</span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                    <span class="comment">//因为前面e = p.next, 所以这里的e就是在链表里找到了一个相同的</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//p指向下一个</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span>(!onlyIfAbsent || oldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                e.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span>(++size &gt; threshold) &#123;</span><br><span class="line">        <span class="comment">//长度超过阈值，resize</span></span><br><span class="line">        resize();</span><br><span class="line">    &#125;</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是把Node放入hashmap里的过程，hashmap就是数组和链表的结合。有着2种数据结构的优势，首先选取数组位置的时候通过(hash &amp; capacity - 1)获取index, 然后在遍历单找到是直接替换还是放在最后, 如果链表长度超过<code>TREEIFY_THRESHOLD</code>就会转化为红黑树,  <code>treeifyBin</code>和<code>TreeNode</code>相关，后续再议。</p>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>然后我们看下比较重要的<code>resize</code>过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> newThr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) &#123; <span class="comment">//新的capacity也变为2倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">//变为2倍</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(oldThr &gt; <span class="number">0</span>) &#123; <span class="comment">// initial capacity was placed in threshold ??</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="keyword">int</span>)ft : Integer.MAX_VALUE); <span class="comment">//newThr = ft</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[newCap]; <span class="comment">//新建一个newCap容量的array</span></span><br><span class="line">    table = newTab;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K, V&gt; e;</span><br><span class="line">            <span class="keyword">if</span>((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(e.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e; <span class="comment">//重新计算hash并放置对应index位置</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span>  TreeNode) &#123;</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 比如oldCap=8,hash是3，11，19，27时，(e.hash &amp; oldCap)的结果是0，8，0，8，这样3，19组成新的链表，index为3；而11，27组成新的链表，新分配的index为3+8；</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * JDK1.7中重写hash是(e.hash &amp; newCap-1)，也就是3，11，19，27对16取余，也是3，11，3，11，和上面的结果一样，但是index为3的链表是19，3，index为3+8的链表是</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 27，11，也就是说1.7中经过resize后数据的顺序变成了倒叙，而1.8没有改变顺序。</span></span><br><span class="line"><span class="comment">                     * ---------------------</span></span><br><span class="line"><span class="comment">                     * 作者：bnmb888</span></span><br><span class="line"><span class="comment">                     * 来源：CSDN</span></span><br><span class="line"><span class="comment">                     * 原文：https://blog.csdn.net/bnmb888/article/details/77164485</span></span><br><span class="line"><span class="comment">                     * 版权声明：本文为博主原创文章，转载请附上博文链接！</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span>((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(loTail == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span>(hiTail == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>最后，经常用的还有<code>get</code>方法，理解了上述之后，这儿就很简单了， 遍历链表或者树，找到后就返回即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/xorxos/article/details/49781677" target="_blank" rel="noopener">https://blog.csdn.net/xorxos/article/details/49781677</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-对象池的使用</title>
    <url>/posts/d7e77019/</url>
    <content><![CDATA[<p>在Android中为了避免多次重复的创建对象，可以通过使用对象池技术来减少对象的创建，从而达到减少占用内存的效果。</p>
<p>Android源码里也有很多地方用到:</p>
<p>比如Handler的Message里，使用obtain()而不是每次new. </p>
<p>AsyncLayoutInflator中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Pools.SynchronizedPool&lt;InflateRequest&gt; mRequestPool = <span class="keyword">new</span> Pools.SynchronizedPool&lt;InflateRequest&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InflateRequest <span class="title">obtainRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InflateRequest obj = mRequestPool.acquire();</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        obj = <span class="keyword">new</span> InflateRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseRequest</span><span class="params">(InflateRequest obj)</span> </span>&#123;</span><br><span class="line">    obj.callback = <span class="keyword">null</span>;</span><br><span class="line">    obj.inflater = <span class="keyword">null</span>;</span><br><span class="line">    obj.parent = <span class="keyword">null</span>;</span><br><span class="line">    obj.resid = <span class="number">0</span>;</span><br><span class="line">    obj.view = <span class="keyword">null</span>;</span><br><span class="line">    mRequestPool.release(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，这里我们详细的分析下Android系统提供的支持对象池的工具<code>SynchronizedPool</code>的代码:</p>
<p>整体代码很简单。里面定义了一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">acquire</span><span class="params">()</span></span>; <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">release</span><span class="params">(T instance)</span></span>; <span class="comment">//释放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，构造函数为private, 因此只能通过内部两个类来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Pools</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Pool</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">SimplePool</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>其中SncrhonizedPool是继承自SimplePool, 我们先分析SimplePool:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Pool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//存放object的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] mPool;</span><br><span class="line">    <span class="comment">//记录当前释放或者获取的是哪个对象对应的index</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimplePool</span><span class="params">(<span class="keyword">int</span> maxPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxPoolSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The max pool size must be &gt; 0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPool = <span class="keyword">new</span> Object[maxPoolSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mPoolSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lastPooledIndex = mPoolSize - <span class="number">1</span>;</span><br><span class="line">            T instance = (T)mPool[lastPooledIndex];</span><br><span class="line">            mPool[lastPooledIndex] = <span class="keyword">null</span>;</span><br><span class="line">            mPoolSize--;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isInPool(instance)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already in the pool!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mPoolSize &lt; mPool.length) &#123;</span><br><span class="line">            mPool[mPoolSize] = instance;</span><br><span class="line">            mPoolSize++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInPool</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPoolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPool[i] == instance) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里定义了一个数组，用来存放最大放在池子里的对象的个数. 代码也很简单，实现了Pool接口，实现acquire和release方法。 相比着看SynchronizePool:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">SimplePool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object mLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedPool</span><span class="params">(<span class="keyword">int</span> maxPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(maxPoolSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.acquire();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.release(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只是多了个synchronized同步代码.</p>
<p>总结下，对象池对于多次的创建和销毁大对象的情景来说用处还是很大的，但是对于小对象，可能维护对象池的成本都大于创建对象的成本了。因此要看实际的情况而抉择。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Translatioin-Shrink, obfuscate, and optimize your app</title>
    <url>/posts/a692d70a/</url>
    <content><![CDATA[<h1 id="Shrink-Obfuscate-and-optimize-your-app"><a href="#Shrink-Obfuscate-and-optimize-your-app" class="headerlink" title="Shrink, Obfuscate, and optimize your app"></a>Shrink, Obfuscate, and optimize your app</h1><p>To make your app as small as possible, you should enable shrinking in your release build to remove unused code and resources. When enabling shrinking, you also benefit from obfuscation, which shortens the names of your app’s classes and members, and optimization, which applies more aggressive strategies for further reduce the size of your app. This page describes how R8 performs these compile-time tasks for your project and how you can customize them. (为了让减小你的app体积，你可以开启shrinking， 把app里没用到的代码和资源删除. 开启shrinking的同时，你也会从obfucsation中受益，因为obfuscation会把你的类和方法名缩短. 而且，optmizitaion里也有很多好策略可以进一步的减少app大小. 本文讲介绍R8是如何在编译时优化你的app的.)</p>
<p>When you build your project using <a href>Android Gradle plugin 3.4.0</a> or higher, the plugin no longer uses ProGuard to peform compile-time code optimization. Instead, the plugin works with the R8 compiler to handle the following compile-time tasks:  </p>
<p>(在Android Gradle Plugin 3.4.0以上， 使用R8编译器替代ProGuard来执行以下的优化: )</p>
<ul>
<li>Code shrinking(or tree-shrinking)<br>  detects and safely remove unused classes, fields, methods, and attributes from your app and its library dependencies(making it a valuable tool for working around the <a href="https://developer.android.com/studio/build/multidex.html" target="_blank" rel="noopener">64K reference limit</a>). For example, if you use only a few APIs of a library dependency, shrinking can identify library code that your app is not using and remove only that code from your app. To learn more ,go to teh section about how to <a href="https://developer.android.com/studio/build/shrink-code#shrink-code" target="_blank" rel="noopener">shrink yoru code</a>.  (检测代码里无用的类，方法，字段，属性等，以及依赖的库里的代码。 会把这些无用的全给删掉，这是个很有效的工具，应对64K的问题)</li>
<li>Resources shrinking:<br>  remove unused resources from your package app, including unused resources in your app’s library dependencies. It works in conjunction with code shrinking such that once unused code has been removed, any resources no longer referenced can be safely removed as well. To learn more, go to the section about how to <a href="https://developer.android.com/studio/build/shrink-code#shrink-resources" target="_blank" rel="noopener">shrink your resources</a>. (检测无用的资源，包含依赖中的。 这个与code shrinking配合使用，如果无用的代码删除了，那么这些代码里引用的资源如果没有其他引用的化，也会一起删除.)</li>
<li>Obfuscation:<br>  shortens the name of classes and members, which results in reduced DEX file size. To learn more , go to the section about how to <a href="https://developer.android.com/studio/build/shrink-code#obfuscate" target="_blank" rel="noopener">obfuscate your code</a>.  (通过缩短类和字段名来来减少dex大小)</li>
<li>Optimization:<br>  inspects and rewrites your code to further reduce the size of your app’s DEX files. For example, if R8 detects that <code>else{}</code> branch for a given if/else statement is never taken, R8 removes the code for the <code>else {}</code> branch. To learn more, go to the section about <a href="https://developer.android.com/studio/build/shrink-code#optimization" target="_blank" rel="noopener">code optimization</a>.  (Optimization, 会对你的代码进行深层次检查，比如如果R8检查到else块里永远不会执行，那么他会直接把这个分支删除.)</li>
</ul>
<p>When building the release version of your app, by default, R8 automatically performs the compile-time tasks described above for you. However, you can disable certain tasks or customize R8’s behavior through ProGuard rules files. In fact, R8 works with all of your existing ProGuard rules files, so updating the Android Gradle Plugin to use R8 should not require you to change your existing rules.   (当你构建release版本时, R8默认会执行上述的优化方案。当然你可以通过ProGuard文件来手动禁止某个task和更改它的配置. 实际上，R8对ProGurad是兼容的，因此你可以直接升级使用R8而不必更改你的ProGuard rules 文件)</p>
<h2 id="Enable-shrinking-obfuscation-and-optimization"><a href="#Enable-shrinking-obfuscation-and-optimization" class="headerlink" title="Enable shrinking, obfuscation, and optimization"></a>Enable shrinking, obfuscation, and optimization</h2><p>When you use Android Studio 3.4 or Android Gradle plugin 3.4.0 and higher, R8 is the default compiler that converts your project’s Java bytecode into the DEX format that runs on the Android platform. However, when you create a new project using Android Studio, shrinking, obfuscation, and code optimization is not enabled by default. That’s because these compile-time optimizations increase the build time of your project and might introduce bugs if you do not sufficiently <a href="https://developer.android.com/studio/build/shrink-code#keep-code" target="_blank" rel="noopener">customize which code to keep</a>. (当你使用Android Studio3.4或者Android Gradle Plugin 3.4.0+的话，R8是默认的把Java字节码编译为DEX的编译器. 当你创建一个新的工程时，默认shrinking, obfuscation, code optimization是关闭的，因为这些编译时的优化可能会增加编译时间，以及引入一些bug, 如果你不充分了解<a href="https://developer.android.com/studio/build/shrink-code#keep-code" target="_blank" rel="noopener">customize which code to keep</a>的话)</p>
<p>So, it’s best to enable these compile-time tasks when building the final version of your app that you test prior to publishing. To enable shrinking, obfuscation, and optimization, include the following in your project-level build.gradle file. (所以，最好在编译最终版本时再去打开这个. 打开方式如下: )</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            // Enables code shrinking, obfuscation, and optimization for only</span><br><span class="line">            // your project's release build type.</span><br><span class="line">            // 这儿是针对代码的</span><br><span class="line">            minifyEnabled true</span><br><span class="line"></span><br><span class="line">            // Enables resource shrinking, which is performed by the</span><br><span class="line">            // Android Gradle plugin.</span><br><span class="line">            //这儿是针对资源的</span><br><span class="line">            shrinkResources true</span><br><span class="line"></span><br><span class="line">            // Includes the default ProGuard rules files that are packaged with</span><br><span class="line">            // the Android Gradle plugin. To learn more, go to the section about</span><br><span class="line">            // R8 configuration files.</span><br><span class="line">            proguardFiles getDefaultProguardFile(</span><br><span class="line">                    'proguard-android-optimize.txt'),</span><br><span class="line">                    'proguard-rules.pro'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="R8-configuration-files"><a href="#R8-configuration-files" class="headerlink" title="R8 configuration files"></a>R8 configuration files</h2><p>R8 uses ProGuard rules files to modify its default behavior and better understand your app’s structure, such as the classes that serve as entry points into your app’s code. Although you can modify some of these rules files, some rules may be generated automatically by compile-time tools, such as AAPT2, or inherited from your app’s library dependencies. The table below describes the sources of ProGuard rules files that R8 uses.<br>(R8使用ProGuard rules文件来配合优化。 有些文件是系统生成的，有些你可以自行修改。以下的表格里记录了R8用到的ProGurad rules文件)</p>
<table>
<thead>
<tr>
<th>Source</th>
<th>Location</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Android Studio</td>
<td><module-dir>/proguard-rules.pro</module-dir></td>
<td>When you create a new module using Android Studio, the IDE creates a proguard-rules.pro file in the root directory of that module. By default, this file does not apply any rules. So, include your own ProGuard rules here, such as your custom keep rules.</td>
</tr>
<tr>
<td>Android Gradle plugin</td>
<td>Generated by the Android Gradle plugin at compile time.</td>
<td>The Android Gradle plugin generates proguard-android-optimize.txt, which includes rules that are useful to most Android projects and enables @Keep* annotations. By default, when creating a new module using Android Studio, the module-level build.gradle file includes this rules file in your release build for you.</td>
</tr>
<tr>
<td>Library dependencies</td>
<td>AAR libraries: <library-dir>/proguard.txt JAR libraries: <library-dir>/META-INF/proguard/</library-dir></library-dir></td>
<td>If an AAR library is published with its own ProGuard rules file, and you include that AAR as a compile-time dependency, R8 automatically applies its rules when compiling your project. Using rules files that are packaged with AAR libraries is useful if certain keep rules are required for the library to function properly—that is, the library developer has performed the troubleshooting steps for you. However, you should be aware that, because ProGuard rules are additive, certain rules that an AAR library dependency includes cannot be removed and might impact the compilation of other parts of your app. For example, if a library includes a rule to disable code optimizations, that rule disables optimizations for your entire project.</td>
</tr>
<tr>
<td>Android Asset Package Tool 2 (AAPT2)</td>
<td>After building your project with minifyEnabled true: <module-dir>/build/intermediates/proguard-rules/debug/aapt_rules.txt</module-dir></td>
<td>AAPT2 generates keep rules based on references to classes in your app’s manifest, layouts, and other app resources. For example, AAPT2 includes a keep rule for each Activity that you register in your app’s manifest as an entry point.</td>
</tr>
<tr>
<td>Custom configuration files</td>
<td>By default, when you create a new module using Android Studio, the IDE creates <module-dir>/proguard-rules.pro for you to add your own rules.</module-dir></td>
<td>You can include additional configurations, and R8 applies them at compile-time.</td>
</tr>
</tbody></table>
<p>When you set the <code>minifyEnabled</code> property to <code>true</code>, R8 combines rules from all the avaiblable sources listed above. This is important to remember when you <a href>troubleshoot with R8</a>, because other compile-time dependencies, such as library dependencies, may introduce changes to the R8 behavior that you donot know about. </p>
<p>(当你设置minifyEnable为true的时候，R8会把以上文件结合起来. 你需要注意这一点，因为如果你依赖的一个东西更改了R8的设置， 着对你可能是无感的.)</p>
<p>To output a full report of all the rules that R8 applies when building your project, include the following in your module’s <code>proguard-rules.pro</code> file:</p>
<p>(打印R8用到的所有的rules)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// You can specify any path and filename.</span><br><span class="line">-printconfiguration ~/tmp/full-r8-config.txt</span><br></pre></td></tr></table></figure>

<h3 id="Include-additional-configurations"><a href="#Include-additional-configurations" class="headerlink" title="Include additional configurations"></a>Include additional configurations</h3><p>When you create a new project or module using Android Studio, the IDE creates a <code>&lt;module-dir&gt;/proguard-rules.pro</code> file for you to include your own rules. You can also include additional rules from other files by adding them to the <code>proguardFiles</code> property in your module’s build.gradle file. </p>
<p>(使用Android studio会默认在<code>module-dir/</code>下创建<code>proguard-rules.pro</code>文件， 你可以在里面写自己的一些规则， 当然你也可以自己增加文件， 然后在<code>proguardFiles</code>里添加进来)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="string">'proguard-android-optimize.txt'</span>)</span>,</span></span><br><span class="line"><span class="function">              <span class="comment">// List additional ProGuard rules for the given build type here. By default,</span></span></span><br><span class="line"><span class="function">              <span class="comment">// Android Studio creates and includes an empty rules file for you (located</span></span></span><br><span class="line"><span class="function">              <span class="comment">// at the root directory of each module).</span></span></span><br><span class="line"><span class="function">              'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    flavorDimensions "version"</span></span><br><span class="line"><span class="function">    productFlavors </span>&#123;</span><br><span class="line">        flavor1 &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">        flavor2 &#123;</span><br><span class="line">            proguardFile <span class="string">'flavor2-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Shrink-your-code"><a href="#Shrink-your-code" class="headerlink" title="Shrink your code"></a>Shrink your code</h2><p>Code shrinking with R8 is enabled by default when you set the minifyEnabled property to true. (设置minifyEnabled为true默认就会开启代码优化)</p>
<p>Code shrinking (also known as tree shaking), is the process of removing code that R8 determines is not required at runtime. This process can greatly reduce your app’s size if, for example, your app includes many library dependencies but utilizes only a small part of their functionality. (它对减少app大小很有效，尤其是如果你引用了一个很大的库但是只使用了很少一部分的时候)</p>
<p>To shrink your app’s code, R8 first determines all entry points into your app’s code based on the combined <a href="https://developer.android.com/studio/build/shrink-code#configuration-files" target="_blank" rel="noopener">set of configuration files</a>. These entry points include all classes that the Android platform may use to open your app’s Activities or services. Starting from each entry point, R8 inspects your app’s code to build a graph of all methods, member variables, and other classes that your app might access at runtime. Code that is not connected to that graph is considered unreachable and may be removed from the app. (类似垃圾清理，没有依赖到的会被删除掉)</p>
<p>Figure 1 shows an app with a runtime library dependency. While inspecting the app’s code, R8 determines that methods foo(), faz(), and bar() are reachable from the MainActivity.class entry point. However, class OkayApi.class or its method baz() is never used by your app at runtime, and R8 removes that code when shrinking your app.</p>
<p><img src="https://developer.android.com/studio/images/build/r8/tree-shaking.png" alt></p>
<p>R8 determines entry points through -keep rules in the project’s <a href="https://developer.android.com/studio/build/shrink-code#configuration-files" target="_blank" rel="noopener">R8 configuration files</a>. That is, keep rules specify classes that R8 should not discard when shrinking your app, and R8 considers those classes as possible entry points into your app. The Android Gradle plugin and AAPT2 automatically generate keep rules that are required by most app projects for you, such as your app’s activities, views, and services. However, if you need to customize this default behavior with additional keep rules, read the section about how to <a href="https://developer.android.com/studio/build/shrink-code#keep-code" target="_blank" rel="noopener">customize which code to keep</a>. (Android Gradle Plugin 和 APPT2会自动生成为你程序里使用到的大部分类生成keep规则, 比如activity, view, service等. 当然，你可以自己去更改这些)</p>
<p>If instead you are interested only in reducing the size of your app’s resources, skip to the section about how to <a href="https://developer.android.com/studio/build/shrink-code#shrink-resources" target="_blank" rel="noopener">shrink your resources</a>. (如果你只对减少资源大小感兴趣, 跳过这块去看链接的部分)</p>
<h3 id="Customize-which-code-to-keep"><a href="#Customize-which-code-to-keep" class="headerlink" title="Customize which code to keep"></a>Customize which code to keep</h3><p>For most situations, the default ProGuard rules file (proguard-android- optimize.txt) is sufficient for R8 to remove only the unused code. However, some situations are difficult for R8 to analyze correctly and it might remove code your app actually needs. Some examples of when it might incorrectly remove code include: </p>
<p>(默认的ProGuard rules文件,proguard-android- optimize.txt, 可能会删除一些你程序需要的代码，比如以下情况: )</p>
<ul>
<li>When your app calls a method from the Java Native Interface (JNI) </li>
<li>When your app looks up code at runtime (such as with reflection)</li>
</ul>
<p>Testing your app should reveal any errors caused by inappropriately removed code, but you can also inspect what code was removed by <a href="https://developer.android.com/studio/build/shrink-code#usage" target="_blank" rel="noopener">generating a report of removed code</a>.</p>
<p>To fix errors and force R8 to keep certain code , add a <code>-keep</code> line in the ProGuard rules file. For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-keep <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br></pre></td></tr></table></figure>

<p>Alternatively, you can add the <code>@Keep</code> annotation to the code you want to keep. Adding <code>@Keep</code> on a class keeps the entire class as-is. Adding it on a method or field will keep the method/field (and its name) as well as the class name intact. Note that this annotation is available only when using the <a href="https://developer.android.com/reference/androidx/annotation/package-%0Asummary" target="_blank" rel="noopener">AndroidX Annotations Library</a> and when you include the ProGuard rules file that is packaged with the Android Gradle plugin, as described in the section about how to <a href="https://developer.android.com/studio/build/shrink-code#enable" target="_blank" rel="noopener">enable shrinking</a>. 
(你也可以使用AndroidX包里的相关注解，来注解方法或者类或者字段)</p>
<p>There are many considerations you should make when using the -keep option; for more information about customizing your rules file, read the <a href="https://www.guardsquare.com/en/products/proguard/manual/usage" target="_blank" rel="noopener">ProGuard Manual</a>. The <a href="https://www.guardsquare.com/en/products/proguard/manual/troubleshooting" target="_blank" rel="noopener">Troubleshooting</a> section outlines other common problems you might encounter when your code gets stripped away.</p>
<h2 id="Shrink-your-resources"><a href="#Shrink-your-resources" class="headerlink" title="Shrink your resources"></a>Shrink your resources</h2><p>Resource shrinking works only in conjunction with code shrinking. After the code shrinker removes all unused code, the resource shrinker can identify which resources the app still uses. This is especially true when you add code libraries that include resources—you must remove unused library code so the library resources become unreferenced and, thus, removable by the resource shrinker. (Code shrinker 删除掉无用的代码后, resource Shrinker会把unreferenced的资源给删掉)</p>
<p>To enable resource shrinking, set the <code>shrinkResources</code> property to true in your build.gradle file (alongside minifyEnabled for code shrinking). For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources <span class="keyword">true</span></span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>,</span></span><br><span class="line"><span class="function">                    'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>If you haven’t already built your app using <code>minifyEnabled</code> for code shrinking, then try that before enabling <code>shrinkResources</code>, because you might need to edit your <code>proguard-rules.pro</code> file to keep classes or methods that are created or invoked dynamically before you start removing resources. (最好开启shrinkResource时也要开启minifyEnable, 因为如果你删除某个资源，但是proguard-rules.pro把相关的类给keep了，就会出现问题)</p>
<h3 id="Customize-which-resources-to-keep"><a href="#Customize-which-resources-to-keep" class="headerlink" title="Customize which resources to keep"></a>Customize which resources to keep</h3><p>If there are specific resources you wish to keep or discard, create an XML file in your project with a <code>&lt;resources&gt;</code> tag and specify each resource to keep in the <code>tools:keep</code> attribute and each resource to discard in the <code>tools:discard</code> attribute. Both attributes accept a comma-separated list of resource names. You can use the asterisk character as a wild card.  (在工程里创建一个<code>resources</code>, 然后通过<code>tools:keep</code>, <code>tools:discard</code>来指定那些需要keep, 那些discard)</p>
<p>For example:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">"@layout/l_used*_c,@layout/l_used_a,@layout/l_used_b*"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:discard</span>=<span class="string">"@layout/unused2"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Save this file in your project resources, for example, at <code>res/raw/keep.xml</code>. The build does not package this file into your APK.</p>
<p>Specifying which resources to discard might seem silly when you could instead delete them, but this can be useful when using build variants. For example, you might put all your resources into the common project directory, then create a different <code>keep.xml</code> file for each build variant when you know that a given resource appears to be used in code (and therefore not removed by the shrinker) but you know it actually won’t be used for the given build variant. It’s also possible that the build tools incorrectly identified a resource as needed, which is possible because the compiler adds the resource IDs inline and then the resource analyzer might not know the difference between a genuinely referenced resource and an integer value in the code that happens to have the same value. (你可能以为那些资源要discard会很傻，因为你可以直接删除它， 但是这个在多渠道打包的时候会很有用.)</p>
<h3 id="Enable-strict-reference-checks"><a href="#Enable-strict-reference-checks" class="headerlink" title="Enable strict reference checks"></a>Enable strict reference checks</h3><p>Normally, the resource shrinker can accurately determine whether a resource is used. However, if your code makes a call to <code>Resources.getIdentifier()</code> (or if any of your libraries do that—the AppCompat library does), that means your code is looking up resource names based on dynamically-generated strings. When you do this, the resource shrinker behaves defensively by default and marks all resources with a matching name format as potentially used and unavailable for removal. (如果你的程序里使用了动态获取资源的话， resource shrinker会保守的把所有可能匹配的资源全部保留)</p>
<p>For example, the following code causes all resources with the <code>img_</code> prefix to be marked as used.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = String.format(<span class="string">"img_%1d"</span>, angle + <span class="number">1</span>);</span><br><span class="line">res = getResources().getIdentifier(name, <span class="string">"drawable"</span>, getPackageName());</span><br></pre></td></tr></table></figure>

<p>The resource shrinker also looks through all the string constants in your code, as well as various res/raw/ resources, looking for resource URLs in a format similar to file:///android_res/drawable//ic_plus_anim_016.png. If it finds strings like this or others that look like they could be used to construct URLs like this, it doesn’t remove them.</p>
<p>These are examples of the safe shrinking mode that is enabled by default. You can, however, turn off this <code>&quot;better safe than sorry&quot;</code> handling, and specify that the resource shrinker keep only resources that it’s certain are used. To do this, set <code>shrinkMode</code> to <code>strict</code> in the <code>keep.xml</code> file, as follows:</p>
<p>（你可以使用严格模式， 不支持这种匹配, 通过keep.xml里如下设置)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:shrinkMode</span>=<span class="string">"strict"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you do enable strict shrinking mode and your code also references resources with dynamically-generated strings, as shown above, then you must manually keep those resources using the <code>tools:keep</code> attribute.</p>
<p>(如果你用了严格的模式，然后某些动态引用的就需要你手动的去keep)</p>
<h3 id="Remove-unused-alternative-resources"><a href="#Remove-unused-alternative-resources" class="headerlink" title="Remove unused alternative resources"></a>Remove unused alternative resources</h3><p>The Gradle resource shrinker removes only resources that are not referenced by your app code, which means it will not remove <a href="https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources" target="_blank" rel="noopener">alternative resources</a> for different device configurations. If necessary, you can use the Android Gradle plugin’s resConfigs property to remove alternative resource files that your app does not need. </p>
<p>(resource shrinker只会删除没有引用到的资源， 而不会删除<code>alternative resources</code>, 比如不同配置下的资源。 如果你需要删除不用的配置下的资源，你可以如下设置: )</p>
<p>For example, if you are using a library that includes language resources (such as AppCompat or Google Play Services), then your APK includes all translated language strings for the messages in those libraries whether the rest of your app is translated to the same languages or not. If you’d like to keep only the languages that your app officially supports, you can specify those languages using the <code>resConfig</code> property. Any resources for languages not specified are removed.</p>
<p>The following snippet shows how to limit your language resources to just English and French:</p>
<p>(只保留英文和法语资源)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        resConfigs "en", "fr"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Similarly, you can customize which screen density or ABI resources to include in your APK by <a href="https://developer.android.com/studio/build/configure-apk-splits.html" target="_blank" rel="noopener">building multiple APKs</a> that each target a different device configuration.</p>
<h3 id="Merge-duplicate-resources"><a href="#Merge-duplicate-resources" class="headerlink" title="Merge duplicate resources"></a>Merge duplicate resources</h3><p>By default, Gradle also merges identically named resources, such as drawables with the same name that might be in different resource folders. This behavior is not controlled by the <code>shrinkResources</code> property and cannot be disabled, because it is necessary to avoid errors when multiple resources match the name your code is looking up. (系统会自动merge重名的resources, 不然查找资源的时候可能会出现问题)</p>
<p>Resource merging occurs only when two or more files share an identical resource name, type, and qualifier. Gradle selects which file it considers to be the best choice among the duplicates (based on a priority order described below) and passes only that one resource to the AAPT for distribution in the APK file.</p>
<p>Gradle looks for duplicate resources in the following locations:</p>
<p>(Gradle会从以下几个地方找resources)</p>
<ul>
<li>The main resources, associated with the main source set, generally located in src/main/res/.</li>
<li>The variant overlays, from the build type and build flavors.</li>
<li>The library project dependencies.</li>
</ul>
<p>Gradle merges duplicate resources in the following cascading priority order:</p>
<p>Dependencies → Main → Build flavor → Build type (Gralde merge资源的优先级顺序， 右侧会覆盖左侧)</p>
<p>For example, if a duplicate resource appears in both your main resources and a build flavor, Gradle selects the one in the build flavor.</p>
<p>If identical resources appear in the same source set, Gradle cannot merge them and emits a resource merge error. This can happen if you define multiple source sets in the sourceSet property of your <code>build.gradle</code> file—for example if both <code>src/main/res/</code> and <code>src/main/res2/</code> contain identical resources. (如果同级别下两个相同名称的资源，系统会报错)</p>
<h2 id="Obfuscate-your-code"><a href="#Obfuscate-your-code" class="headerlink" title="Obfuscate your code"></a>Obfuscate your code</h2><p>The purpose of obfuscation is to reduce your app size by shortening the names of your app’s classes, methods, and fields. The following is an example of obfuscation using R8:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">androidx.appcompat.app.ActionBarDrawerToggle$DelegateProvider -&gt; a.a.a.b:</span><br><span class="line">androidx.appcompat.app.AlertController -&gt; androidx.appcompat.app.AlertController:</span><br><span class="line">    android.content.Context mContext -&gt; a</span><br><span class="line">    <span class="keyword">int</span> mListItemLayout -&gt; O</span><br><span class="line">    <span class="keyword">int</span> mViewSpacingRight -&gt; l</span><br><span class="line">    android.widget.Button mButtonNeutral -&gt; w</span><br><span class="line">    <span class="keyword">int</span> mMultiChoiceItemLayout -&gt; M</span><br><span class="line">    <span class="keyword">boolean</span> mShowTitle -&gt; P</span><br><span class="line">    <span class="keyword">int</span> mViewSpacingLeft -&gt; j</span><br><span class="line">    <span class="keyword">int</span> mButtonPanelSideLayout -&gt; K</span><br></pre></td></tr></table></figure>

<p>While obfuscation does not remove code from your app, significant size savings can be seen in apps with DEX files that index many classes, methods, and fields. However, as obfuscation renames different parts of your code, certain tasks, such as inspecting stack traces, require additional tools. To understand your stacktrace after obfuscation, read the next section about how to <a href="https://developer.android.com/studio/build/shrink-code#decode-stack-trace" target="_blank" rel="noopener">decode an obfuscated stack trace</a>.</p>
<p>Additionally, if your code relies on predictable naming for your app’s methods and classes—when using reflection, for example, you should treat those signatures as entry points and specify keep rules for them, as described in the section about how to <a href="https://developer.android.com/studio/build/shrink-code#customize-which-code-to-keep" target="_blank" rel="noopener">customize which code to keep</a>. Those keep rules tell R8 to not only keep that code in your app’s final DEX but also retain its original naming.  (反射的话， 需要手动去keep)</p>
<h3 id="Decode-an-obfuscated-stack-trace"><a href="#Decode-an-obfuscated-stack-trace" class="headerlink" title="Decode an obfuscated stack trace"></a>Decode an obfuscated stack trace</h3><p>After R8 obfuscates your code, understanding a stack trace is difficult (if not impossible) because names of classes and methods might have been changed. Besides renaming, R8 can also change the line numbers present in the stack traces to achieve additional size savings when writing the DEX files. Fortunately, R8 creates a <code>mapping.txt</code> file each time it runs, which contains the obfuscated class, method, and field names mapped to the original names. This mapping file also contain information to map the line numbers back to the original source file line numbers. R8 saves the file in the <code>&lt;module- name&gt;/build/outputs/mapping/&lt;build-type&gt;/</code> directory. (每次R8混淆代码时候，会在上述目录中创建mapping文件，用于解析难懂的代码)</p>
<p>When publishing your app on Google Play, you can upload the <code>mapping.txt</code> file for each version of your APK. Then Google Play will deobfuscate incoming stack traces from user-reported issues so you can review them in the Google Play Console. For more information, see the Help Center article about how to <a href="https://support.google.com/googleplay/android-developer/answer/6295281" target="_blank" rel="noopener">deobfuscate crash stack traces</a>.</p>
<p>To convert an obfuscated stack trace to a readable one yourself, use the <a href="https://www.guardsquare.com/en/products/proguard/manual/retrace" target="_blank" rel="noopener">ReTrace</a> script, which comes packaged with <a href="https://www.guardsquare.com/en/products/proguard" target="_blank" rel="noopener">ProGuard</a>. </p>
<p>(把混淆后的代码复原可以用ReTrace工具)</p>
<h2 id="Code-optimization"><a href="#Code-optimization" class="headerlink" title="Code optimization"></a>Code optimization</h2><p>In order to shrink your app even further, R8 inspects your code at a deeper level to remove more unused code or, where possible, rewrite your code to make it less verbose. The following are a few examples of such optimizations:</p>
<p>(R8还会对你的代码进行深层优化)</p>
<ul>
<li>If your code never takes the <code>else {}</code> branch for a given <code>if/else</code> statement, R8 might remove the code for the <code>else {}</code> branch.</li>
<li>If your code calls a method in only one place, R8 might remove the method and inline it at the single call site.  (只有一个地方调用的函数，R8会把它内联进来)</li>
<li>If R8 determines that a class has only one unique subclass, and the class itself is not instantiated (for example, an abstract base class only used by one concrete implementation class), then R8 can combine the two classes and remove a class from the app. (如果一个类和它子类，如果父类只是被继承的话， 那么R8会把两个类合并)</li>
<li>To learn more, read the <a href="https://jakewharton.com/blog/" target="_blank" rel="noopener">R8 optimization blog </a> posts by Jake Wharton.</li>
</ul>
<p>R8 does not allow you to disable or enable discrete optimizations, or modify the behavior of an optimization. In fact, R8 ignores any ProGuard rules that attempt to modify default optimizations, such as <code>-optimizations</code> and <code>-optimizationpasses</code>. This restriction is important because, as R8 continues to improve, maintaining a standard behavior for optimizations helps the Android Studio team easily troubleshoot and resolve any issues that you might encounter. (R8不允许你进行一些自定义的optimization行为)</p>
<h3 id="Enable-more-aggressive-optimizations"><a href="#Enable-more-aggressive-optimizations" class="headerlink" title="Enable more aggressive optimizations"></a>Enable more aggressive optimizations</h3><p>R8 includes a set of additional optimizations that are not enabled by default. You can enable these additional optimizations by including the following in your project’s gradle.properties file:</p>
<p>(R8包含了一些可选的优化选项，你可以打开或者关闭)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">android.enableR8.fullMode=true</span><br></pre></td></tr></table></figure>

<p>Because the additional optimizations make R8 behave differently from ProGuard, they may require you to include additional ProGuard rules to avoid runtime issues. For example, say that your code references a class through the Java Reflection API. By default, R8 assumes that you intend to examine and manipulate objects of that class at runtime—even if you code actually does not—and it automatically keeps the class and its static initializer.</p>
<p>However, when using “full mode”, R8 does not make this assumption and, if R8 asserts that your code otherwise never uses the class at runtime, it removes the class from your app’s final DEX. That is, if you want to keep the class and its static initializer, you need to include a keep rule in your rules file to do that.</p>
<p>If you encounter any issues while using R8’s “full mode”, refer to the <a href="https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md" target="_blank" rel="noopener">R8 FAQ page</a> for a possible solution. If you are unable to resolve the issue, please <a href="https://issuetracker.google.com/issues/new?component=326788&template=1025938" target="_blank" rel="noopener">report a bug</a>.</p>
<h2 id="Troubleshoot-with-R8"><a href="#Troubleshoot-with-R8" class="headerlink" title="Troubleshoot with R8"></a>Troubleshoot with R8</h2><p>This section describes some strategies for troubleshooting issues when enabling shrinking, obfuscation, and optimization using R8. If you do not find a solution to your issue below, also read the <a href="https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md" target="_blank" rel="noopener">R8 FAQ page</a> and <a href="https://www.guardsquare.com/en/products/proguard/manual/troubleshooting" target="_blank" rel="noopener">ProGuard’s troubleshooting guide</a>.</p>
<p>(这块描述了如果你在优化过程中遇到了一些问题的一些策略)</p>
<h3 id="Generate-a-report-of-removed-or-kept-code"><a href="#Generate-a-report-of-removed-or-kept-code" class="headerlink" title="Generate a report of removed (or kept) code"></a>Generate a report of removed (or kept) code</h3><p>To help you troubleshoot certain R8 issues, it may be useful to see a report of all the code that R8 removed from your app. For each module for which you want to generate this report, add -printusage <output-dir>/usage.txt to your custom rules file. When you <a href="https://developer.android.com/studio/build/shrink-code#enable" target="_blank" rel="noopener">enable R8</a> and build your app, R8 outputs a report with the path and file name you specified. The report of removed code looks similar to the following:</output-dir></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    androidx.drawerlayout.R$attr</span><br><span class="line">androidx.vectordrawable.R</span><br><span class="line">androidx.appcompat.app.AppCompatDelegateImpl</span><br><span class="line">    public void setSupportActionBar(androidx.appcompat.widget.Toolbar)</span><br><span class="line">    public boolean hasWindowFeature(int)</span><br><span class="line">    public void setHandleNativeActionModesEnabled(boolean)</span><br><span class="line">    android.view.ViewGroup getSubDecor()</span><br><span class="line">    public void setLocalNightMode(int)</span><br><span class="line">    final androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoNightModeManager()</span><br><span class="line">    public final androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate()</span><br><span class="line">    private static final boolean DEBUG</span><br><span class="line">    private static final java.lang.String KEY_LOCAL_NIGHT_MODE</span><br><span class="line">    static final java.lang.String EXCEPTION_HANDLER_MESSAGE_SUFFIX</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>If instead you want to see a report of the entry points that R8 determines from your project’s keep rules , include -printseeds <output-dir>/seeds.txt in your custom rules file. When you enable R8 and build your app, R8 outputs a report with the path and file name you specified. The report of kept entry points looks similar to the following:</output-dir></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    com.example.myapplication.MainActivity</span><br><span class="line">androidx.appcompat.R$layout: int abc_action_menu_item_layout</span><br><span class="line">androidx.appcompat.R$attr: int activityChooserViewStyle</span><br><span class="line">androidx.appcompat.R$styleable: int MenuItem_android_id</span><br><span class="line">androidx.appcompat.R$styleable: int[] CoordinatorLayout_Layout</span><br><span class="line">androidx.lifecycle.FullLifecycleObserverAdapter</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Troubleshoot-resource-shrinking"><a href="#Troubleshoot-resource-shrinking" class="headerlink" title="Troubleshoot resource shrinking"></a>Troubleshoot resource shrinking</h3><p>When you shrink resources, the <code>Build</code>   window shows a summary of the resources that are removed from the APK. (You need to first click <code>Toggle view</code>   on the left side of the window to display detailed text output from Gradle.) For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:android:shrinkDebugResources</span><br><span class="line">Removed unused resources: Binary resource data reduced from 2570KB to 1711KB: Removed 33%   </span><br><span class="line">:android:validateDebugSigning</span><br></pre></td></tr></table></figure>

<p>Gradle also creates a diagnostic file named <code>resources.txt</code> in <code>&lt;module-name&gt;/build/outputs/mapping/release/</code> (the same folder as ProGuard’s output files). This file includes details such as which resources reference other resources and which resources are used or removed.</p>
<p>For example, to find out why @drawable/ic_plus_anim_016 is still in your APK, open the <code>resources.txt</code> file and search for that file name. You might find that it’s referenced from another resource, as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">16:25:48.005 [QUIET] [system.out] &amp;#64;drawable/add_schedule_fab_icon_anim : reachable=true</span><br><span class="line">16:25:48.009 [QUIET] [system.out]     &amp;#64;drawable/ic_plus_anim_016</span><br></pre></td></tr></table></figure>

<p>(可以从resources.txt里查看某个resource是为啥没被删除)</p>
<p>You now need to know why <code>@drawable/add_schedule_fab_icon_anim</code> is reachable—and if you search upwards you’ll find that resource is listed under “The root reachable resources are:”. This means there is a code reference to <code>add_schedule_fab_icon_anim</code> (that is, its R.drawable ID was found in the reachable code).</p>
<p>If you are not using strict checking, resource IDs can be marked as reachable if there are string constants that look like they might be used to construct resource names for dynamically loaded resources. In that case, if you search the build output for the resource name, you might find a message like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10:32:50.590 [QUIET] [system.out] Marking drawable:ic_plus_anim_016:2130837506</span><br><span class="line">used because it format-string matches string pool constant ic_plus_anim_%1$d.</span><br></pre></td></tr></table></figure>

<p>If you see one of these strings and you are certain that the string is not being used to load the given resource dynamically, you can use the <code>tools:discard</code> attribute to inform the build system to remove it, as described in the section about how to <a href="https://developer.android.com/studio/build/shrink-code#keep-resources" target="_blank" rel="noopener">customize which resources to keep</a>.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Configure your build-Overview</title>
    <url>/posts/8daa0b89/</url>
    <content><![CDATA[<h1 id="Configure-your-build"><a href="#Configure-your-build" class="headerlink" title="Configure your build"></a>Configure your build</h1><p>The Android build system compiles app resources and source code, and packages them into APKs that you can test, deploy, sign, and distribute. Android Studio uses <a href="http://www.gradle.org/" target="_blank" rel="noopener">Gradle</a>, an advanced build toolkit, to automate and manage the build process, while allowing your to define flexible custom build configurations. Each build configuration can define its own set of code and resources, while reusing the parts common to all versions of your app. The Android plugin for Gradle works with the build toolkit to provide processes and configurable settings that are specific to building and testing Android applications.<br>(Android编译系统通过Gradle把app资源和代码，编译进APK里。Gradle是一个高级的工具，可以自动管理编译过程，而且提供了丰富的可配置选项.)</p>
<p>Gradle and the Android plugin run independent of Android Studio. This means that you can build your Android apps from within Android Studio, the command line on your machine, or on machines where Android Studio is not installed(such as continuous integration servers.). If you are not using Android Studio, you can learn how to <a href="https://developer.android.com/studio/build/building-cmdline.html" target="_blank" rel="noopener">biuld and run your app from the command line</a>. The output of the build is the same whether you are building a project from the command line, on a remote machine, or using Android Studio.<br>(Gralde和Android Gradle插件是独立的。 你可以使用Android Studio或命令行或其他没有安装AndroidStudio的机器上来编译程序.)</p>
<p>The flexibility of the Android build system enables you to perform custom build configurations without modifying your app’s core source files. This section helps you understand how the Android build system works, and how it can help you customize and automate multiple build configurations. If you simply want to learn more about deploying your app, see <a href="https://developer.android.com/studio/run/index.html" target="_blank" rel="noopener">Building and Running from Android Studio</a>. To start creating custom build configurations right away using Android Studio, see<a href="https://developer.android.com/studio/build/build-variants.html" target="_blank" rel="noopener">Configuring Build Variants</a>.</p>
<h2 id="The-build-process"><a href="#The-build-process" class="headerlink" title="The build process"></a>The build process</h2><p>The build process involves many tools and processes that convert your project into an Android Application Package(APK). The build process is very flexible, so it’s useful to understand some of what is happening under the hood.<br>(APK编译过程包含很多工具和程序)</p>
<p><img src="https://developer.android.com/images/tools/studio/build-process_2x.png" alt="build process"><br>The build process for a typical Android app module, as shown in figure 1, follows these general steps:</p>
<ol>
<li>The compilers convert your source code into DEX(Dalvik Executable) files, which include the bytecode that runs on Android devices, and everything else into compiled resources.  (首先编译器会把你的代码编译为DEX文件，这里包含了可在Android设备上执行的字节码和其他编译后的资源文件)</li>
<li>The APK Packager combines the DEX files and compiled resources into a single APK. Before your app can be installed and deployed onto an Android device, however, the APK must be signed. (APK Packager把dex和编译后的资源文件打包为APK. 但是这时还不能安装，APK还需要被签名)</li>
<li>The APK Packager signs your APK using either the debug or release keystore:<ol>
<li>If you are building a debug version of your app, that is , an app you intent only for testing and profiling, the packager signs your app with the debug keystoe. Android Studio atomicatically configures new projects with a debug keystore. (如果你只需要为了测试，你编译个debug程序就够了， Android Studio会自动的给价格debug签名)</li>
<li>If you are building a release version of your app that you intent to release externally, the packager signs your app with the release keystore. To create a release keystore, read about <a href="https://developer.android.com/studio/publish/app-signing.html#studio" target="_blank" rel="noopener">signing your app in Android Studio</a> (如果你需要发布程序，那么你需要编译release包，这就需要release签名文件)</li>
</ol>
</li>
<li>Before generating your final APK, the packager uses the <a href="https://developer.android.com/studio/command-line/zipalign.html" target="_blank" rel="noopener">zipalign</a> tool to optimize your app to use less memory when running on a device. (最终生成APK之前，<code>zipalign</code>工具还会对app再次优化下程序内存。)</li>
</ol>
<p>At the end of the build process, you have either a debug APK or relase APK of your app that you can use to deply, test, or release to external users.</p>
<h2 id="Custom-build-configurations"><a href="#Custom-build-configurations" class="headerlink" title="Custom build configurations"></a>Custom build configurations</h2><p>Gradle and the Android plugin help you configure the following aspects of your build:</p>
<ul>
<li><p>Build Types<br>  Build types define certain properties that Gradle uses when building and packaging your app, and are typically configured for different stages of your development lifecycle. For example, the debug type enables debug options and signs the APK with the debug key, while the release build type may shrink, obfuscate, and sign your APK with a release key for distribution. You must define at least one build type in order to build your app- Android Studio creates the debug and release build types by default. To start customizing packaging settings for your app, learn how to <a href="https://developer.android.com/studio/build/build-variants.html#build-types" target="_blank" rel="noopener">Configure Build Types</a>  (Build types 定义了Gradle在编译程序时候需要的一些属性, 比如： )</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        manifestPlaceholders = [hostName:<span class="string">"www.example.com"</span>]</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;   </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        debug </span>&#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The `initWith` property allows you to copy configurations from other build types,</span></span><br><span class="line"><span class="comment">         * then configure only the settings you want to change. This one copies the debug build</span></span><br><span class="line"><span class="comment">         * type, and then changes the manifest placeholder and application ID.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        staging &#123;</span><br><span class="line">            initWith debug</span><br><span class="line">            manifestPlaceholders = [hostName:<span class="string">"internal.example.com"</span>]</span><br><span class="line">            applicationIdSuffix <span class="string">".debugStaging"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Product Flavors<br>Product flavors represent different versions of your app that you may release to users, such as free and paid version of your app. You can customize product flavors to use different code and resources, while sharing and reusing the parts that are common to all versions of yoru app. Product flavors are optional and you must create them manually . To start creating differernt versions of your app, learn how to <a href="https://developer.android.com/studio/build/build-variants.html#product-flavors" target="_blank" rel="noopener">Configure Product Flavors</a>.  (Product Flavors可以控制多渠道编译，比如你可以编译出付费和免费版本，使用同一套代码, 你可以指定程序使用不同的代码和资源)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;...&#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug&#123;...&#125;</span><br><span class="line">        release&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Specifies one flavor dimension.</span></span><br><span class="line">    flavorDimensions <span class="string">"version"</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        demo &#123;</span><br><span class="line">            <span class="comment">// Assigns this product flavor to the "version" flavor dimension.</span></span><br><span class="line">            <span class="comment">// This property is optional if you are using only one dimension.</span></span><br><span class="line">            dimension <span class="string">"version"</span></span><br><span class="line">            applicationIdSuffix <span class="string">".demo"</span></span><br><span class="line">            versionNameSuffix <span class="string">"-demo"</span></span><br><span class="line">        &#125;</span><br><span class="line">        full &#123;</span><br><span class="line">            dimension <span class="string">"version"</span></span><br><span class="line">            applicationIdSuffix <span class="string">".full"</span></span><br><span class="line">            versionNameSuffix <span class="string">"-full"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build Variants<br>  A build variant is a cross product of a build type and product flavor, and is the configuration Gradle uses to build your app. Using build variant , you can build the debug version of your product flavors during development, or signed release versions of your product flavors for distribution. Although you do not configure build variants directly, you do configure the build types and product flavors that form them. Creating additional build types or product flavors also creates additional build variants. To learn how to create and manage build variants, read the <a href="https://developer.android.com/studio/build/build-variants.html" target="_blank" rel="noopener">Configure Build Variant</a> overview. (Build Variant是build type和product flavor的结合体， 你只能通过更改build type和product flavor来更改build variant， 而不能直接更改。 比如debugPaid, debugFree, releasePaid, releaesFree等这种)</p>
</li>
<li><p>Manifest Entries<br>  You can specify values for some properties of the manifest file in the build variant configuration. These build values override the existing values in the mainfest file . This is useful if you want to generate multiple APKs for your modules where each of the apk files has a differernt application name, minimum SDK version, or target SDK version. When multiple manifests are present, Gradle <a href="https://developer.android.com/studio/build/manifest-merge.html" target="_blank" rel="noopener">merge manifest settings</a>. (你可以在build variant里指定manifest文件的一些配置, 这些配置会覆盖AndroidManifest.xml里的配置。 这对你同一套代码编译多个APK很有用, 不同APK可以有不同的名字, minimumSDK, targetSDk等等。 当多个manifest存在的时候， Gradle会按照链接的规则去merge)</p>
</li>
<li><p>Dependencies<br>  The build system manages project dependencies from your local filesystem and from remote repositories. This prevents you from having to manually search , download, and copy binary packages of your dependencies into your project directory. To find out more , see <a href="https://developer.android.com/studio/build/dependencies.html" target="_blank" rel="noopener">Add build Dependencies</a>. (编译系统通过gradle来管理你的各种依赖包括本地或者远程，而不用你手动去下载)</p>
</li>
<li><p>Signing<br>  The build system enables you to sepecify signing settings in the build configuration, and it can automatically sign your APKs during the build process. The build system signs the debug version with a default key and certificate using known credentials to avoid a password prompt at build time. The build system does not sign the release version unless you explicitly define a signing configuration for this build . If you do not have a release key, you can generate one as described in <a href="https://developer.android.com/studio/publish/app-signing.html" target="_blank" rel="noopener">Sign Your App</a>. (在build configuration里，你也可以配置签名相关东西.)</p>
</li>
<li><p>ProGuard<br>  The build system enables you to specify a different <a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">ProGurad</a> rules file for each build variant. The build system can run ProGurad to shrink and obfuscate your classes during the build process. (编译系统允许你针对不同的渠道指定不同的ProGuard文件, 在编译的过程中运行ProGurad来优化代码.)</p>
</li>
<li><p>Multiple APK Supporting<br>  The build system enables you to automatically build different APKs that each contain only the code and resources needed for a specific screen density or Application Binary Interface(ABI). For more information see <a href="https://developer.android.com/studio/build/configure-apk-splits.html" target="_blank" rel="noopener">Build multiple APKS</a>. (编译系统允许你可以编译出只包含适配特定屏幕的代码和资源的APK, 或者编出ABI. 详见链接)</p>
</li>
</ul>
<h2 id="Build-configuration-files"><a href="#Build-configuration-files" class="headerlink" title="Build configuration files"></a>Build configuration files</h2><p>Creating custom build configurations requires you to make changes to one or more build configuration files, or <code>build.gradle</code> files. These plain text files use Domain Specific Language(DSL) to describe and manipulate the build logic using <a href="http://groovy-lang.org/" target="_blank" rel="noopener">Groovy</a>, which is a dynamic language for the Java Virtual Machine (JVM). You don’t need to know Groovy to start configuring your build because the Android plugin for Gradle introduces most of the DSL elements you need. To learn more about the Android plugin DSL, read the <a href="http://google.github.io/android-gradle-dsl/current/index.html" target="_blank" rel="noopener">DSL reference documentation</a>.</p>
<p>When starting a new project, Android Studio automatically creates some of these files for you, as shown below, and polulates them based on sensible defaults.</p>
<p><img src="https://developer.android.com/images/tools/studio/project-structure_2x.png" alt></p>
<p>There are a few Gradle build configuration files that are a part of the standard project structure for an Android app. Before you can start configuring your build , it is important to understand the scope and purpose of each of these files, and the basic DSL elements they should define.</p>
<h3 id="The-Gradle-settings-file"><a href="#The-Gradle-settings-file" class="headerlink" title="The Gradle settings file"></a>The Gradle settings file</h3><p>The <code>settings.gradle</code> file, located in the root project project directory, tells Gradle which modules it should include when building your app. For most projects, the file is simple and only includes the following:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">incldue  : `app`</span><br></pre></td></tr></table></figure>

<p>However, multi-module projects need to specify each module that should go into the final build.<br>(settings.gradle 告诉编译器，那些module会被编译进来)</p>
<h3 id="The-top-level-build-file"><a href="#The-top-level-build-file" class="headerlink" title="The top-level build file"></a>The top-level build file</h3><p>The top-level <code>build.gradle</code> file , located in the root project directory , defines configurations that apply to all modules in your project. By default, the top-level build file uses the <code>buildscript</code> block to define the Gradle repositories and dependencies that are common to all modules in the project. The following code sample describes the default settings and DSL elements you can find in the top-level <code>build.gradle</code> after creating a new project.</p>
<p>(根目录下的<code>build.gradle</code>文件，定义了所有module都用到的配置, 它用<code>buildscript</code>块定义Gradle仓库和依赖. e.g)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The buildscript block is where you configure the repositories and</span></span><br><span class="line"><span class="comment">* dependencies for Gradle itself—meaning, you should not include dependencies</span></span><br><span class="line"><span class="comment">* for your modules here. For example, this block includes the Android plugin for</span></span><br><span class="line"><span class="comment">* Gradle as a dependency because it provides the additional instructions Gradle</span></span><br><span class="line"><span class="comment">* needs to build Android app modules.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The repositories block configures the repositories Gradle uses to</span></span><br><span class="line"><span class="comment">    * search or download the dependencies. Gradle pre-configures support for remote</span></span><br><span class="line"><span class="comment">    * repositories such as JCenter, Maven Central, and Ivy. You can also use local</span></span><br><span class="line"><span class="comment">     * repositories or define your own remote repositories. The code below defines</span></span><br><span class="line"><span class="comment">    * JCenter as the repository Gradle should use to look for its dependencies.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * New projects created using Android Studio 3.0 and higher also include</span></span><br><span class="line"><span class="comment">    * Google's Maven repository.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The dependencies block configures the dependencies Gradle needs to use</span></span><br><span class="line"><span class="comment">     * to build your project. The following line adds Android plugin for Gradle</span></span><br><span class="line"><span class="comment">    * version 3.4.1 as a classpath dependency.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.4.1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The allprojects block is where you configure the repositories and</span></span><br><span class="line"><span class="comment">* dependencies used by all modules in your project, such as third-party plugins</span></span><br><span class="line"><span class="comment">* or libraries. However, you should configure module-specific dependencies in</span></span><br><span class="line"><span class="comment">* each module-level build.gradle file. For new projects, Android Studio</span></span><br><span class="line"><span class="comment">* includes JCenter and Google's Maven repository by default, but it does not</span></span><br><span class="line"><span class="comment">* configure any dependencies (unless you select a template that requires some).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(buildscripts.repositories和allprojects.repositories里的区别?  buildscript里是gradle脚本执行所需依赖，分别是对应的maven库和插件. allprojects里是项目本身需要的依赖，比如我现在要依赖我自己maven库的toastutils库，那么我应该将maven {url ‘<a href="https://dl.bigit" target="_blank" rel="noopener">https://dl.bigit</a> ntray.com/calvinning/maven‘}写在这里，而不是buildscript 中,不然找不到。)</p>
<h4 id="Configure-project-wide-properties"><a href="#Configure-project-wide-properties" class="headerlink" title="Configure project-wide properties"></a>Configure project-wide properties</h4><p>For Android projects that include multiple modules, it may be useful to define certain properties at the project level and share them across all the modules. You can do this by adding <a href>extra properties</a> to the <code>ext</code> block in the top-level <code>build.gradle</code> file.<br>(你可以在根目录下的<code>build.gradle</code>里配置<code>ext</code>选项，让所有<code>module</code>都可以引用到)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">buildscript &#123;...&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;...&#125;</span><br><span class="line"></span><br><span class="line">// This block encapsulates custom properties and makes them available to all</span><br><span class="line">// modules in the project.</span><br><span class="line">ext &#123;</span><br><span class="line">    // The following are only a few examples of the types of properties you can define.</span><br><span class="line">    compileSdkVersion = 28</span><br><span class="line">    // You can also create properties to specify versions for dependencies.</span><br><span class="line">    // Having consistent versions between modules can avoid conflicts with behavior.</span><br><span class="line">    supportLibVersion = "28.0.0"</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>To access these properties from a module in the same project, use the following syntax in the modules’s <code>build.gradle</code> file(you can learn more about this file in the section below).</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    // Use the following syntax to access properties you defined at the project level:</span><br><span class="line">    // rootProject.ext.property_name</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation "com.android.support:appcompat-v7:$&#123;rootProject.ext.supportLibVersion&#125;"</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-module-level-build-file"><a href="#The-module-level-build-file" class="headerlink" title="The module-level build file"></a>The module-level build file</h3><p>The module-level <code>build.gradle</code> file, located in each <code>project/module</code> directory, allows you to configure build settings for the sepcific module it is located in. Configuring these build settings allows you to provide custom packaging options, such as additional build types and product flavors, and override settings in the <code>main/</code> app manifest or top-level <code>build.gradle</code>. (你可以在每个module下的<code>build.gradle</code>自己定义一些参数，这些会覆盖根目录下的<code>build.gradle</code>)</p>
<p>This sample Android app module <code>build.gradle</code> file outlines some of the basic DSL elements and settings that you should know.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    /**</span><br><span class="line">    * The first line in the build configuration applies the Android plugin for</span><br><span class="line">    * Gradle to this build and makes the android block available to specify</span><br><span class="line">    * Android-specific build options.</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    apply plugin: 'com.android.application'</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * The android block is where you configure all your Android-specific</span><br><span class="line">    * build options.</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    android &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * compileSdkVersion specifies the Android API level Gradle should use to</span><br><span class="line">    * compile your app. This means your app can use the API features included in</span><br><span class="line">    * this API level and lower.</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    compileSdkVersion 28</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * buildToolsVersion specifies the version of the SDK build tools, command-line</span><br><span class="line">    * utilities, and compiler that Gradle should use to build your app. You need to</span><br><span class="line">    * download the build tools using the SDK Manager.</span><br><span class="line">    *</span><br><span class="line">    * This property is optional because the plugin uses a recommended version of</span><br><span class="line">    * the build tools by default.</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    buildToolsVersion "29.0.0"</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * The defaultConfig block encapsulates default settings and entries for all</span><br><span class="line">    * build variants, and can override some attributes in main/AndroidManifest.xml</span><br><span class="line">    * dynamically from the build system. You can configure product flavors to override</span><br><span class="line">    * these values for different versions of your app.</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * applicationId uniquely identifies the package for publishing.</span><br><span class="line">     * However, your source code should still reference the package name</span><br><span class="line">     * defined by the package attribute in the main/AndroidManifest.xml file.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    applicationId 'com.example.myapp'</span><br><span class="line"></span><br><span class="line">    // Defines the minimum API level required to run the app.</span><br><span class="line">    minSdkVersion 15</span><br><span class="line"></span><br><span class="line">    // Specifies the API level used to test the app.</span><br><span class="line">    targetSdkVersion 28</span><br><span class="line"></span><br><span class="line">    // Defines the version number of your app.</span><br><span class="line">    versionCode 1</span><br><span class="line"></span><br><span class="line">    // Defines a user-friendly version name for your app.</span><br><span class="line">    versionName "1.0"</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * The buildTypes block is where you can configure multiple build types.</span><br><span class="line">   * By default, the build system defines two build types: debug and release. The</span><br><span class="line">   * debug build type is not explicitly shown in the default build configuration,</span><br><span class="line">   * but it includes debugging tools and is signed with the debug key. The release</span><br><span class="line">   * build type applies Proguard settings and is not signed by default.</span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * By default, Android Studio configures the release build type to enable code</span><br><span class="line">     * shrinking, using minifyEnabled, and specifies the Proguard settings file.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    release &#123;</span><br><span class="line">        minifyEnabled true // Enables code shrinking for the release build type.</span><br><span class="line">        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * The productFlavors block is where you can configure multiple product flavors.</span><br><span class="line">   * This allows you to create different versions of your app that can</span><br><span class="line">   * override the defaultConfig block with their own settings. Product flavors</span><br><span class="line">   * are optional, and the build system does not create them by default.</span><br><span class="line">   *</span><br><span class="line">   * This example creates a free and paid product flavor. Each product flavor</span><br><span class="line">   * then specifies its own application ID, so that they can exist on the Google</span><br><span class="line">   * Play Store, or an Android device, simultaneously.</span><br><span class="line">   *</span><br><span class="line">   * If you declare product flavors, you must also declare flavor dimensions</span><br><span class="line">   * and assign each flavor to a flavor dimension.</span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">  flavorDimensions "tier"</span><br><span class="line">  productFlavors &#123;</span><br><span class="line">    free &#123;</span><br><span class="line">      dimension "tier"</span><br><span class="line">      applicationId 'com.example.myapp.free'</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    paid &#123;</span><br><span class="line">      dimension "tier"</span><br><span class="line">      applicationId 'com.example.myapp.paid'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * The splits block is where you can configure different APK builds that</span><br><span class="line">   * each contain only code and resources for a supported screen density or</span><br><span class="line">   * ABI. You'll also need to configure your build so that each APK has a</span><br><span class="line">   * different versionCode.</span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">  splits &#123;</span><br><span class="line">    // Settings to build multiple APKs based on screen density.</span><br><span class="line">    density &#123;</span><br><span class="line"></span><br><span class="line">      // Enable or disable building multiple APKs.</span><br><span class="line">      enable false</span><br><span class="line"></span><br><span class="line">      // Exclude these densities when building multiple APKs.</span><br><span class="line">      exclude "ldpi", "tvdpi", "xxxhdpi", "400dpi", "560dpi"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The dependencies block in the module-level build configuration file</span><br><span class="line"> * specifies dependencies required to build only the module itself.</span><br><span class="line"> * To learn more, go to Add build dependencies.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(":lib")</span><br><span class="line">    implementation 'com.android.support:appcompat-v7:28.0.0'</span><br><span class="line">    implementation fileTree(dir: 'libs', include: ['*.jar'])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Gradle-properties-files"><a href="#Gradle-properties-files" class="headerlink" title="Gradle properties files"></a>Gradle properties files</h3><p>Gradle also includes two properties files, located in your root project directory, that you can use to specify settings for the Gradle build toolkit itself:</p>
<ul>
<li>gradle.properties<br>  This is where you can configure project-wide Gradle settings, such as the Gradle daemon’s maximum heap size. For more information , see <a href="https://docs.gradle.org/current/userguide/build_environment.html" target="_blank" rel="noopener">The Build Envirnment</a></li>
<li>local.properties<br>  Configures local environment properties for the build system, such as the path to the SDK installation. Beacuse the content of this file is automatically generated by Android Studio and is specific to the lcoal developer environment, you should not modify this file manually or check it into your version control system.</li>
</ul>
<h3 id="Synciing-project-with-Gradle-files"><a href="#Synciing-project-with-Gradle-files" class="headerlink" title="Synciing project with Gradle files"></a>Synciing project with Gradle files</h3><p>When you make changes to the build configuration files in your project, Android Studio requires that you sync your project files so that it can import your biuld configuration changes and run some checks to make sure your configuration won’t create build errors.</p>
<p>To sync your project files, click Sync Now in the notification bar that appears when you make a change, as shown in figure 3, or click Sync Project  from the menu bar. If Android Studio notices any errors with your configuration, for example, your source code uses API features that are only available in an API level higher than your compileSdkVersion, the Messages window appears to describe the issue.</p>
<p><img src="https://developer.android.com/images/tools/as-gradlesync.png" alt></p>
<h3 id="Source-sets"><a href="#Source-sets" class="headerlink" title="Source sets"></a>Source sets</h3><p>Android Studio logically groups source code and resources for each module into source sets. A module’s <code>main/</code> source set includes the code and resources used by all its build variant. Additional source set directories are optional, and Android Studio does not automatically create them for you when you configure new build variants. However, creating source sets, similar to <code>main/</code>, helps organize files and resources that Gradle should only use when building certain version of your app:</p>
<ul>
<li>src/main/<br>  This source set includes code and resources common to all build variants. (这个目录下的代码和资源，所有的build variants都可以用到)</li>
<li>src/buildType/<br>  Create this source set to include code and resources only for a specific build type. (存放特定build type用到的资源和代码)</li>
<li>src/productFlavor/<br>  Create this source set to include code and resource only for a specific product flavor. (存放特定的product flavor用到的资源和代码)</li>
<li>src/productFlavorBuildType<br>  Create this source set to include code and resources only for a specific build variant. (存放特定build variant用到的资源和代码)</li>
</ul>
<p>For example, to generate the “fullDebug” version of your app, the build system merges code, settings, and resources from following source sets:</p>
<pre><code>* src/fullDebug(the build variant source set)
* src/debug(the build type source set)
* src/full (the product flavor source set)
* src/main (the main source set)</code></pre><p>If different source sets contain different versions of the same file, Gradle uses the following priority order when deciding which file to use (source sets on the left override the files and settings of source sets to the right):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//左边的代码资源会覆盖右边的代码和资源</span><br><span class="line">build variant &gt; build type &gt; product flavor &gt; main source set &gt; library dependencies</span><br></pre></td></tr></table></figure>

<p>This allows Gradle to use files that are specific to the build variant you are trying to build while reusing activities, application logic, and resources that are common to other versions of your app. When <a href="https://developer.android.com/studio/build/manifest-merge.html" target="_blank" rel="noopener">merging multiple manifests</a>, Gradle uses the same priority order, so each build variant can define different components or permissions in the final manifest. To learn more about creating custom source sets, go to <a href="https://developer.android.com/studio/build/build-variants.html#sourcesets" target="_blank" rel="noopener">Create Source Sets for Build Variants</a>.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidBuild</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Reduce your app size</title>
    <url>/posts/f8021ed8/</url>
    <content><![CDATA[<h1 id="Reduce-your-app-size"><a href="#Reduce-your-app-size" class="headerlink" title="Reduce your app size"></a>Reduce your app size</h1><p>Users often avoid downloading apps that seem too large, particularly in emerging markets where devices connect to often-spotty 2G and 3G networks or work on pay-by-the-byte plans. This page describes how to reduce yoru app’s download size, which enables more users to download your app.</p>
<p>(有些地方使用2G/3G或者需要按流量付费的地方，会不愿意去下载太大的程序。 本文讲告诉你如何减少app大小.)</p>
<h2 id="Upload-yoru-app-with-Android-App-Bundles"><a href="#Upload-yoru-app-with-Android-App-Bundles" class="headerlink" title="Upload yoru app with Android App Bundles"></a>Upload yoru app with Android App Bundles</h2><p>The easiest way to gain immediate app size savings when publishing to Google Play is by uploading your app as an <a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noopener">Android App Bundle</a>, which is a new upload format that includes all your app’s compiled code and resources, but defers APK generation and signing to Google Play.</p>
<p>Google Play’s new app serving model, called Dynamic Delivery, then uses your app bundle to generate and serve optimized APKs for each user’s device configuration, so they download only the code and resources they need to run your app. You no longer have to build, sign, and manage multiple APKs to support different devices, and users get smaller, more optimized downloads</p>
<p>Keep in mind, because Google Play enforces a <a href="https://developer.android.com/guide/app-bundle#size_restrictions" target="_blank" rel="noopener">compressed downloaded size restriction</a> of 150MB or less for apps published with app bundles, it’s still a good idea to apply the guidelines described on this to reduce your app’s download size as much as possible.</p>
<p>(这里介绍了使用Android App Bundles方式，是最简单快速的压缩体积的方式，具体实现细节需要参考<a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noopener">Android App Bundle</a>)</p>
<h2 id="Use-the-Android-Size-Analyzer"><a href="#Use-the-Android-Size-Analyzer" class="headerlink" title="Use the Android Size Analyzer"></a>Use the Android Size Analyzer</h2><p>The Android Size Analyzer tool is an easy way to identify and implement many strategies for reducing the size of your app. It is available as both an Android Studio plugin as well as a standalone JAR.</p>
<p>(Android Size Analyzer，这个工具里面包含了很多减少App体积的方法，你可以通过Android Studio或jar来使用它。)</p>
<h3 id="Use-the-analyzer-in-Android-Studio"><a href="#Use-the-analyzer-in-Android-Studio" class="headerlink" title="Use the analyzer in Android Studio"></a>Use the analyzer in Android Studio</h3><p>You can download the Android Size Analyzer plugin using the plugin marketplace in Android Studio, as shown in figure 1. To open the plugin marketplace and install the plugin, proceed as follows:</p>
<ol>
<li>Select File &gt; Settings (or on Mac, Android Studio &gt; Preferences.)</li>
<li>Select the Plugins section in the left panel</li>
<li>Click the marketplace tab</li>
<li>Search for the “Android Size Analyzer” plugin.</li>
<li>Click the Install button for the analyzer plugin.</li>
</ol>
<p><img src="https://developer.android.com/topic/performance/images/plugin-marketplace.png" alt="img"></p>
<p>After you install the plugin, run a app size analysis on your current project by selecting Analyze &gt; Analyze App Size from the menu bar. After analyzing your project, a tool window appears with recommendations on how to reduce the size of your app, as shown in figure 2.</p>
<p><img src="https://developer.android.com/topic/performance/images/plugin-recommendations.png" alt="img"></p>
<p>(安装Android Size Analyzer插件, Mac下Android Studio &gt; Preferenes &gt; Plugin &gt; marketplace &gt; Android Size Analyzer, 安装完后Android Studio可能会重启, 然后在当前工程下选择 Analyze &gt; Analyze App Size执行分析…但是我试了几次，都会报错，不知道为什么)</p>
<h3 id="Use-the-analyzer-from-the-command-line"><a href="#Use-the-analyzer-from-the-command-line" class="headerlink" title="Use the analyzer from the command line"></a>Use the analyzer from the command line</h3><p>You can download the latest version of the Android Size Analyzer, either as a TAR or ZIP file, from <a href="https://github.com/android/size-analyzer/releases/latest" target="_blank" rel="noopener">Github</a>. After extracting the archive, run the size-analyzer script(on Linux or MacOS) or the size-analyzer.bat script(on Windows) on your Android project or Android App Bundle using one of the following commands:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./size-analyzer check-bundle &lt;path-to-aab&gt;</span><br><span class="line">./size-analyzer check-project &lt;path-to-project-directory&gt;</span><br></pre></td></tr></table></figure>

<p>(在<a href="https://github.com/android/size-analyzer/releases/latest" target="_blank" rel="noopener">Github</a>上下载Android Size Analyzer脚本，然后执行上述命令也是可以的)</p>
<h2 id="Understand-the-APK-structure"><a href="#Understand-the-APK-structure" class="headerlink" title="Understand the APK structure"></a>Understand the APK structure</h2><p>Before discussing how to reduce the size of your app, it’s helpful to understand the structure of an app’s APK. An APK file consists of a ZIP archive that contains all hte files that comprise your app. These files include Java class files, resource files, and a file containing compiled resources.</p>
<p>An APK contains the following directories:</p>
<p>(APK就是一个压缩包，下面介绍下它的组成: )</p>
<ul>
<li>META-INFO /: Contains the CERF.SF and CERT.RSA signature iles, as well as the MANIFEST.MF manifest file. (包含CERF.SF, CERT.RSA签名文件和MANIFEST.MF文件)</li>
<li>assets/ : Contains the app’s assets, which the app can retrieve using an [AssetManager][<a href="https://developer.android.com/reference/android/content/res/AssetManager.html]" target="_blank" rel="noopener">https://developer.android.com/reference/android/content/res/AssetManager.html]</a> object. (包含app的资源，也就是AssetManager可以获取到的资源)</li>
<li>res/ : Contains resources that aren’t compiled into resources.arsc (编译不进resources.arsc里的剩余res)</li>
<li>lib/ : contains the compiled code that is specific to the software layer of a processor. This directory contains a subdirectory for each platform type, like armeabi, armeabi-v7a, arm64-v8a, x86, x86_64 and mips. (编译的.so这些文件，里面的子文件夹分各个架构)</li>
</ul>
<p>An Apk also contains the following files. Among them, only <code>AndroidManifest.xml</code> is mandatory. (APK还包含以下文件，除了AndroidManifest.xml之外，其他都不是必须的。)</p>
<ul>
<li>resoures.arsc: Contains compiled resources. This file contains the XML content from all configurations of the res/value/ folder. The packaging tool extracts this XML content, compiles it to binary form, and archives the content. This content includes language strings and styles, as well as paths to content that is not included directly in the resources.arsc file, such as layout files and images. (编译后的资源文件, 包含res/value/文件夹下所有配置的xml内容。packaging tool把这些内容编译为二进制格式， 还包含language strings, styles, 和没有编译进resources.arsc文件的布局和图片文件的路径)</li>
<li>classes.dex: Contains the classes compiled in the DEX file format understood by the Dalvik/ART virtual machine. (包含编译进DEX文件的类文件，DEX文件是可以被Dalvik/ART虚拟机识别的文件类型)</li>
<li>AndroidManifest.xml: Contains the core Android manifest file. This file lists the name, version, access rights, and referenced library files of the app. The file uses Android’s binary XML format. (包含AndroidManifest.xml文件)</li>
</ul>
<h2 id="Reduce-resource-count-and-size"><a href="#Reduce-resource-count-and-size" class="headerlink" title="Reduce resource count and size"></a>Reduce resource count and size</h2><p>The size of your APK has an impact on how fast your app loads, how much memory it uses, and how much power it consumes. One of thesimple ways to make your APK smaller is to reduce the number and size of the resources it contains. In particular, you can remove resources that your app no longer uses, and you can use scalable <code>Drawable</code> objects in place of image files. This section discusses these methods as well as several other ways that you can reduce the resources in your app to decrease the overall size of your APK.<br>(APK体积越大， 启动速度越慢，内存占用越大，电量消耗越多. 一个简单的办法就是减少app里使用到的资源，尤其是不再使用到的，或者使用drawable替代图片文件等。 这章将会讨论为了减少app的大小还可以通过哪些方法来减少资源的大小.)</p>
<h3 id="Remove-unused-resources"><a href="#Remove-unused-resources" class="headerlink" title="Remove unused resources"></a>Remove unused resources</h3><p>The <a href="https://developer.android.com/studio/write/lint.html" target="_blank" rel="noopener">lint</a> tool, a static code analyzer included in Android Studio, detects resources in your res/ folder that your code doesn’t reference. When the <code>lint</code> tool discovers a potentially unused resource in your project, it prints a message like the following example. (<a href="https://developer.android.com/studio/write/lint.html" target="_blank" rel="noopener">lint</a>静态代码分析工具，可以检测res/文件夹下所有代码没有引用到的资源。)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">res/layout/preferences.xml: Warning: The resource R.layout.preferences appears</span><br><span class="line">to be unused [UnusedResources]</span><br></pre></td></tr></table></figure>

<p>Libraries that you add to your code may include unused resources. Gradle can automatically remove resources on your behalf if you enable <a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">shrinkResources</a> in your app’s <code>build.gradle</code> file. (gradle可以通过在<code>build.gradle</code>里设置<a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">shrinkResources</a>来自动移除无用的资源文件).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    android &#123;</span><br><span class="line">    <span class="comment">// Other settings</span></span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            shrinkResources <span class="keyword">true</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>To use <code>shrinkResources</code>, you must enable code shrinking. During the build process, first <a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">ProGuard</a> removes unused code but leaves unused resources. Then Gradle removes the unused resources.  (为了使用<code>shrinkResources</code>, 你必须先要允许code shrinking. 在编译期， <a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">ProGuard</a> 会把未用到的code给移除，但是resource没有移除，而是留给Gradle去移除没用到的资源)</p>
<p>For more information about ProGuard and other way Android Studio helps you reduce APK size, see <a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">Shrink Your Code and Resources</a> </p>
<p>In Android Gradle Plugin 0.7 and higher, you can declare the configurations that your app supports. Gradle passes this information to the build system using the <code>resConfig</code> and <code>resConfigs</code> flavors and the <code>defaultConfig</code> option. The build system then prevents resources from other, unsupported configurations from appearing in the APK, reducing the APK’s size. For more information about this feature, see <a href="https://developer.android.com/studio/build/shrink-code.html#unused-alt-resources" target="_blank" rel="noopener">Remove unused alternative resources</a>  (在Android Gradle Plugin 0.7及以上，你可以定义app支持的配置, 通过<code>resConfig</code>和<code>resConfigs</code>以及<code>defaultConfig</code>。 编译系统会把这配置里以外的资源去掉，不参与编译, 从而减少size)</p>
<h3 id="Minimize-resource-use-from-libraries"><a href="#Minimize-resource-use-from-libraries" class="headerlink" title="Minimize resource use from libraries"></a>Minimize resource use from libraries</h3><p>When developing an Android app, you usually use external libraries to improve your app’s usability and versatility. For example, you might reference the <a href="https://developer.android.com/topic/libraries/support-library/index.html" target="_blank" rel="noopener">Android Support Library</a> to improve the user experience on older devices, or you could use <a href="https://developers.google.com/android/guides/overview" target="_blank" rel="noopener">Google Play Services</a> to retrieve automatic translations for text within your app.</p>
<p>If a library was designed for a server or desktop, it can include many objects and methods that your app doesn’t need. To include only the parts of the library that your app needs, you can edit the library’s files if the license allows you to modify the library. You can also use an alternative, mobile-friendly library to add specific functionality to your app.</p>
<p>(如果你的app引用了其他三方库，你可以要么自己修改源码来减少些没用的代码， 或者可以使用三方库的mobile版本)</p>
<h3 id="Support-only-specific-densities"><a href="#Support-only-specific-densities" class="headerlink" title="Support only specific densities"></a>Support only specific densities</h3><p>Android supports a very large set of devices, encompassing a variety of screen densities. In Android 4.4 and higher, the framework supports various densities: ldpi, mdpi, tvdpi, hdpi, xhdpi, xxhdpi, and xxxhdpi. Although Android supports all these densities, you don’t need to export your rasterized assets to each density. </p>
<p>If you know that only a small percentage of your users have devices with specific densities, consider whether you need to bundle those densities into your app. If you don’t include resources for a specific screen density, Android automatically scales existing resources originally designed for other screen densities.</p>
<p>If your app needs only scaled images, you can save even more space by having a single variant of an image in drawable-nodpi/. We recommend that every app include at least an xxhdpi image variant.</p>
<p>For more information screen densities, see <a href="https://developer.android.com/about/dashboards/index.html#Screens" target="_blank" rel="noopener">Screen Sizes and Densities</a></p>
<p>(没必要适配所有density的设备, 如果只有很少部分的用户有某一种density的设备，那么就可以考虑不去适配这个density.)</p>
<h3 id="Use-drawable-objects"><a href="#Use-drawable-objects" class="headerlink" title="Use drawable objects"></a>Use drawable objects</h3><p>Some iamge don’t require a static image resource; the framework can dynamically draw the image at runtime instead. <code>Drawable</code> object(<shape> in xml) can take up a tiny amount of space in your APK. In addition, XML <code>Drawable</code> objects produce monochromatic images compliant with material design guideline. (不知道啥意思，大概就是能用drawable就不要用图片)</shape></p>
<h3 id="Reuse-resources"><a href="#Reuse-resources" class="headerlink" title="Reuse resources"></a>Reuse resources</h3><p>You can include a separate resource for variations of an image, such as tinted, shaded, or rotated version of the same image. We recommend, however, that you reuse the same set of resources, customizing them as needed at runtime.</p>
<p>Android provides several utilities to change the color of an asset, either using the <code>android:tint</code> and <code>tintMode</code> attributes on Android 5.0 and higher. For lower versions of the platform, use the <code>ColorFilter</code> class.</p>
<p>You can also omit resources that are only a rotated equivalent of another resource. The following code snippet provides an example of turning a “tumb up” into a “thumb down” by pivoting at the middle of the image and rotating it 180 degrees:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_thumb_up"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromDegrees</span>=<span class="string">"180"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>(重用resource, 能通过tint, 旋转解决的，就不要新的资源)</p>
<h3 id="Render-from-code"><a href="#Render-from-code" class="headerlink" title="Render from code"></a>Render from code</h3><p>You can also reduce your APK size by procedurally rendering your images. Procedural rendering frees up space because you no longer store an image file in your APK.<br>(程序绘图，不用图片)</p>
<h3 id="Crunch-PNG-files"><a href="#Crunch-PNG-files" class="headerlink" title="Crunch PNG files"></a>Crunch PNG files</h3><p>The <code>aapt</code> tool can optimize the image resources placed in <code>res/drawable</code> with lossless compression during the build process. For example, the <code>aapt</code> tool can convert a true-color PNG that does not require more than 256 colors to a 8-bit PNG with a color palette. Doing so results in an image of equal quality but a smaller memory footprint.</p>
<p>Keep in mind that the <code>aapt</code> has the following limitations: </p>
<ul>
<li>The <code>aapt</code> tool does not shrink PNG files contained in the <code>asset/</code> folder</li>
<li>Image files need to use 256 or fewer colors for the <code>aapt</code> tool to optimize them</li>
<li>The <code>aapt</code> tool may inflate PNG files that have already been compressed. To prevent this, you can use the <code>cruncherEnabled</code> flag in Gradle to disable this process for PNG files;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aaptOptions &#123;</span><br><span class="line">    cruncherEnabled = <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Compress-PNG-and-JPEG-files"><a href="#Compress-PNG-and-JPEG-files" class="headerlink" title="Compress PNG and JPEG files"></a>Compress PNG and JPEG files</h3><p>You can reduce PNG file sizes without losing image quality using tools like <a href="http://pmt.sourceforge.net/pngcrush/" target="_blank" rel="noopener">pngcrush</a>, <a href="https://pngquant.org/" target="_blank" rel="noopener">pngquant</a>, or <a href="https://github.com/google/zopfli" target="_blank" rel="noopener">zopflipng</a>. All of these tools can reduce PNG file size while preserving the perceptive image quality. </p>
<p>The <code>pngcrush</code> tool is particularly effective: This tool iterates over PNG filters and zlib parameters, using each combination of filters and parameters to compress the image. It then clooses the configuration that yields the smallest compressed output .</p>
<p>To compress JPEG files, you can use tools like <a href="http://www.elektronik.htw-aalen.de/packjpg/" target="_blank" rel="noopener">packJPG</a> and <a href="https://github.com/google/guetzli" target="_blank" rel="noopener">guetzli</a></p>
<p>(压缩图片文件，可以用上述的几个工具)</p>
<h3 id="Use-WebP-file-format"><a href="#Use-WebP-file-format" class="headerlink" title="Use WebP file format"></a>Use WebP file format</h3><p>Instead of using PNG or JPEG files, you can also use the <a href="https://developers.google.com/speed/webp/" target="_blank" rel="noopener">WebP</a> file format for your images, when targeting Android 3.2(API level 13) and higher. The WebP format provides lossy compression(like JPEG) as well as transparency(like PNG) but can provide better compression than either JPEG or PNG.</p>
<p>You can convert existing BMP, JPG, PNG or static GIF images to WebP format using Android Studio. For more information, see <a href="https://developer.android.com/studio/write/convert-webp.html" target="_blank" rel="noopener">Creating WebP Images Using Android Studio</a></p>
<p>(你可以使用webp文件来替代PNG 或者 JPEG， webp支持JPEG的有损压缩和PNG的透明通道，而且压缩效率更高)</p>
<h3 id="Use-vector-graphics"><a href="#Use-vector-graphics" class="headerlink" title="Use vector graphics"></a>Use vector graphics</h3><p>You can use vector graphics to create resolution-independent icons and other scalable media. Using these graphics can greatly reduce your APK footprint. Vector images are represented in Android as <code>VectorDrawable</code> objects. With a <code>VectorDrawable</code> object, a 100-byte file can generate a sharp image the size of the screen.</p>
<p>However, it takes a significant amount of time for the system to render each <code>VectorDrawable</code> object, and larger images take even longer to appear on the screen. Therefore, consider using these vector graphics only when displaying small images.</p>
<p>For more information on working with <code>VectorDrawable</code> objects, see <a href="https://developer.android.com/training/material/drawables.html" target="_blank" rel="noopener">Working with Drawables</a><br>(你可以使用矢量图来表是图片，但是这种绘制起来很耗时而且占内存，因此，最好使用矢量图来展示小图片。)</p>
<h3 id="Use-vector-graphics-for-animated-images"><a href="#Use-vector-graphics-for-animated-images" class="headerlink" title="Use vector graphics for animated images"></a>Use vector graphics for animated images</h3><p>Do not use <code>AnimationDrawable</code> to create frame-by-frame animations because doing so requires that you include a separate bitmap file for each frame of the animation, which drastically increase the size of your APk.</p>
<p>Instead, you should use <code>AnimatedVectorDrawableCompat</code> to create <a href="https://developer.android.com/training/material/animations.html#AnimVector" target="_blank" rel="noopener">animated vector drawables</a>.
(不要使用<code>AnimationDrawable</code>来绘制帧动画，这需要很多的图片。 你应该用<code>AnimatedVectorDrawableCompact</code>)</p>
<h2 id="Reduce-native-and-Java-code"><a href="#Reduce-native-and-Java-code" class="headerlink" title="Reduce native and Java code"></a>Reduce native and Java code</h2><p>There are several methods you can use to reduce the size of the Java and natvie codebase in your app.</p>
<h3 id="Remove-unnecessary-generated-code"><a href="#Remove-unnecessary-generated-code" class="headerlink" title="Remove unnecessary generated code"></a>Remove unnecessary generated code</h3><p>Make sure to understand the footprint of any code which is automatically generated. For example, many protocal buffer tools generate an excessive number of methdods and classes, which can double or triple the size of your app.<br>(删除无用的代码)</p>
<h3 id="Avoid-enumerations"><a href="#Avoid-enumerations" class="headerlink" title="Avoid enumerations"></a>Avoid enumerations</h3><p>A single enum can add about 1.0 to 1.4KB of size to your app’s <code>classes.dex</code> file. These additions can quickly accumulate for complex systems or shared libraries. If possible, consider using the <code>@IntDef</code> annotation and <a href>ProGuard</a> to strip enumerations out and convert them to integers. This type conersion preserves all of the type safety benefits of enums.<br>(尽量使用<code>@IntDef</code>来替代Enum, 因为enum可以增加1.0-1.4KB的大小, 或者使用ProGuard来把Enum转换为integer)</p>
<h3 id="Reduce-the-size-of-native-binaries"><a href="#Reduce-the-size-of-native-binaries" class="headerlink" title="Reduce the size of native binaries"></a>Reduce the size of native binaries</h3><p>If your app uses native code and the Android NDK, you can also reduce the size of the release version of your app by optimizing your code. Two useful techniques are removing debug symbols and not extracting native libraries.</p>
<h4 id="Remove-debug-symbos"><a href="#Remove-debug-symbos" class="headerlink" title="Remove debug symbos"></a>Remove debug symbos</h4><p>Using debug symbols make sense if your application is in development and still requires debugging. Use the <code>armeabi-strip</code> tool, privided in the Android NDk, to remove unnecessary debug symbols from native libraries. After that, you can compile your release build.</p>
<h4 id="Avoid-extracting-native-libraries"><a href="#Avoid-extracting-native-libraries" class="headerlink" title="Avoid extracting native libraries"></a>Avoid extracting native libraries</h4><p>When building the release version of your app, package unucompressed <code>.so</code> files in the APK by setting <code>android:extractNativeLibs=&quot;false&quot;</code> in the <code>&lt;application&gt;</code> element of your app’s manifest. Disabling this flag prevents PackageManager from copying .so files from the APK to the filesystem during installation and has the added benefit of making updates of your app smaller.</p>
<h2 id="Maintain-multiple-lean-APKs"><a href="#Maintain-multiple-lean-APKs" class="headerlink" title="Maintain multiple lean APKs"></a>Maintain multiple lean APKs</h2><p>Your APK might contain content that users download but never use, like additional language or per-screen-density resources. To ensure a minimal download for your users, you should upload your app to Google Play using <a href="https://developer.android.com/topic/performance/reduce-apk-size#app_bundle" target="_blank" rel="noopener">Android App Bundles</a>. Uploading app bundles let’s Google Play generate and serve optimized APKs for each user’s device configuration, so they download only with the code and resources they need to run your app. You no longer have to build, sign, and manage multiple APKs to support different devices, and users get smaller, more optimized downloads.</p>
<p>If you’re not publishing your app to Google Play, you can segment your app into several APKs, differerntiated by factors such as screen size or GPU texture support.</p>
<p>When a user downloads your app, their device receives the correct APK based on the devices’s features and settings. This way devices don’t receive assets for features that the devices don’t have. For example, if a user has a <code>hdpi</code> device, they don’t need <code>xxxhdpi</code> resources that you might include for devices with higher density displays.</p>
<p>For more information, see <a href="https://developer.android.com/studio/build/configure-apk-splits.html" target="_blank" rel="noopener">configure APK Splits</a> and <a href="https://developer.android.com/training/multiple-apks/index.html" target="_blank" rel="noopener">Maintaining Multiple APKs</a></p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-IntentService的使用和原理</title>
    <url>/posts/a445691e/</url>
    <content><![CDATA[<p>首先要知道<code>IntentService</code>本质上是一个<code>Service</code>, 目的是可以像线程一样执行一些异步操作. </p>
<p>既然目的是为了执行异步操作，为什么不直接通过Thread或者AsyncTask这种来实现，而是继承自Service呢? </p>
<p>因为<code>Android</code>在面对使用<code>IntentService</code>的应用优先级会高些， 主动杀掉的可能性会降低点。</p>
<p>所以， <code>IntentService</code>就是结合了<code>Service</code>与线程的好处而来的一个工具类，分析代码可以很容易的看到:</p>
<p>首先从构造函数来看, 只是传了一个名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IntentService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    mName = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后看Service的第一个回调方法. <code>onCreate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HandlerThread里面的Looper</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Looper mServiceLooper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程中的Handler</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> ServiceHandler mServiceHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//抽象方法，也是经常需要在次回调里做工作的地方</span></span><br><span class="line">        onHandleIntent((Intent)msg.obj);</span><br><span class="line">        <span class="comment">//执行完之后主动关闭自己</span></span><br><span class="line">        stopSelf(msg.arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    </span><br><span class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    mServiceLooper = thread.getLooper();</span><br><span class="line">    mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里新建了一个<code>HandlerThread</code>, 以及一个子线程的<code>Handler</code>, <code>mServiceHandler</code>. 也就是这个<code>mServiceHandler</code>的回调也是在子线程. 也就是<code>IntentService</code>的原理就是<code>HandlerThread</code>.</p>
<p>然后不管是onStart或者onStartCommand， 都会执行这些方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">    msg.arg1 = startId;</span><br><span class="line">    msg.obj = intent;</span><br><span class="line">    mServiceHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    onStart(intent, startId);</span><br><span class="line">    <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们启动<code>IntentService</code>最好是通过<code>start</code>方法，而不是<code>bind</code>方法启动，就是为了触发<code>onStart()</code>回调. 这里就是把消息发送给<code>mServiceHandler</code>.</p>
<p>也就是，我们使用<code>startService</code>会触发<code>onStart</code> -&gt; <code>handle</code>收到消息 -&gt; 子线程里的<code>onHandleIntent</code>回调。 我们只要在这个回调里处理需要的逻辑就可以了。</p>
<p>这里补充下<code>startService</code>和<code>bindService</code>的区别:</p>
<p>TODO: <a href="https://www.jianshu.com/p/d870f99b675c" target="_blank" rel="noopener">https://www.jianshu.com/p/d870f99b675c</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidService</tag>
      </tags>
  </entry>
  <entry>
    <title>Android HandlerThread原理</title>
    <url>/posts/efbd99a7/</url>
    <content><![CDATA[<p>HandlerThread代码还是很简单的，里面有一个Handler和一个Looper, 继承自thread, 本质是一个Thread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mPriority;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Looper mLooper;</span><br><span class="line">    <span class="keyword">int</span> mTid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getThreadHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler(getLooper());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span>(looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quit();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quitSafely();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般配合Handler使用.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> HandlerThread thread;</span><br><span class="line"><span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">init() &#123;</span><br><span class="line">    thread = <span class="keyword">new</span> HandlerThread(<span class="string">"name"</span>);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(thread.getLooper(), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        handleMessage() &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当thread.quit 或 thread.quiteSafe方法调用后, handleMessage将不再回调</span><br></pre></td></tr></table></figure>

<p>quit和quitSafely()的区别:</p>
<ul>
<li>quit(),实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（带Delayed的）还是非延迟消息。</li>
<li>quitSafely(),执行了MessageQueue中的removeAllFutureMessagesLocked方法，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-AsyncTask原理</title>
    <url>/posts/cc1de343/</url>
    <content><![CDATA[<p>看一个类，首先找到它的构造函数，这儿是起点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>((Looper)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(handler != <span class="keyword">null</span> ? handler.getLooper() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(Looper callbackLooper)</span> </span>&#123;</span><br><span class="line">    mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper() ? getMainHandler() : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">            Result result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                <span class="comment">// doInBackground抽象方法，外面实现</span></span><br><span class="line">                result = doInBackground(mParams);</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> tr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//执行完之后发送到getHandler()所在的线程</span></span><br><span class="line">                postResult(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postResultIfNotInvoked(get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</span><br><span class="line">                        e.getCause());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里的核心逻辑是在<code>WorkerRunnable</code>里， 里面有我们熟悉的<code>doInBackground</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    Params[] mParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这个<code>WorkerRunnable</code>是一个<code>Callable</code>, 他与<code>Runnable</code>不同的是他可以拿到返回值。也就是<code>return的value</code>.</p>
<p><code>finally</code>块中，执行完<code>doInbackground</code>后，通过这个<code>postResult(result);</code>方法发送消息到<code>handler</code>所在的线程.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT, <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;)msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，把结果封装成了一个叫做<code>AsyncTaskResult</code>的对象, 里面包含了<code>AsyncTask</code>对象以及<code>Callable</code>里执行的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskResult</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> AsyncTask mTask;</span><br><span class="line">    <span class="keyword">final</span> Data[] mData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后通过<code>result.mTask.finish(result.mData[0]);</code> 回到<code>AsyncTask</code>代码里，执行<code>finish()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//msg收到后，如果取消了，就执行oncancelled回调否则onPotExecute回调</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isCancelled()) &#123;</span><br><span class="line">        onCancelled(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onPostExecute(result);</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.FINISHED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里也可以看到熟悉的<code>onCancelled()</code>和<code>onPostExecute()</code>.</p>
<p>从<code>doInBackground</code>到<code>onPostExecute</code>我们都看过了， 回到开始， 构造函数后，我们一般使用方法是调用<code>execute()</code>方法来开始一个任务. 这里进入<code>execute()</code>方法来看下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec, Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                        + <span class="string">" the task is already running."</span>);</span><br><span class="line">            <span class="keyword">case</span> FINISHED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                        + <span class="string">" the task has already been executed "</span></span><br><span class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">    onPreExecute();</span><br><span class="line"></span><br><span class="line">    mWorker.mParams = params;</span><br><span class="line">    <span class="comment">//核心是通过executor去执行callable任务</span></span><br><span class="line">    exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码也很简单，除了看到了我们熟悉的<code>onPreExecute();</code>.  同时我们可能还会用到获取进度的这个方法<code>onProgressUpdate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他是通过<code>doInBackground</code>里手动去调用<code>publishProgress</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">    result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>相同的原理实现的。</p>
<p>这个<code>AsyncTask</code>的核心就是<code>Executor</code>执行一个<code>Callable</code>, 代码还是不难的。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Handler原理</title>
    <url>/posts/122d6ee8/</url>
    <content><![CDATA[<p><code>Handler</code>是Android中最常用的类之一，我们今天来分析下他的源码结构.</p>
<p>先从构造函数来看.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Handler.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(<span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, async);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(callback, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(looper, callback, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    mLooper = Looper.myLooper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mQueue = mLooper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    mLooper = looper;</span><br><span class="line">    mQueue = looper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里初始化了3个变量. <code>MessageQueue mQueue</code>, <code>Looper mLooper</code>以及一个<code>Callback mCallback</code>. 
这里的<code>Callback</code>最简单，就不分析了, 也就是我们创建Handler(callback)的时候可以传入一个callback来处理handleMessage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看下另外2个, 同样，从构造函数看起</p>
<p>MessageQueue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">    mQuitAllowed = quitAllowed;</span><br><span class="line">    mPtr = nativeInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Looper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到Looper里也持有一个MessageQueue, 从Handler的构造函数看，Handler中的MessageQueue用的也是Looper里的MessageQueue.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mQueue = mLooper.mQueue;</span><br></pre></td></tr></table></figure>

<p>构造函数看完后，我们看下平常使用的Handler的方法，最常用的是sendMessage或者post方法。进入源码可以看到，这些方法其实都是一样的，最终都会调用到<code>enqueueMessage</code>这个方法里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessge</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    msg.what = what;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    Message msg = Message.obtain();</span><br><span class="line">    msg.what = what;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span>(queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, <span class="keyword">long</span> uptimeMillis)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r), uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, Object token, <span class="keyword">long</span> uptimeMillis)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r, token), uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, Object token, <span class="keyword">long</span> delayMillis)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r, token), delayMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入<code>enqueueMessage</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    msg.target = <span class="keyword">this</span>; <span class="comment">//注意这里</span></span><br><span class="line">    <span class="keyword">if</span>(mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先把消息的target指向自己，也就是指向handler, 然后调用<code>MessageQueue</code>的<code>enqueueMessage</code>方法, 从名字看，消息入列, 具体看下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageQueue.java</span><br><span class="line"></span><br><span class="line"><span class="comment">//写的真漂亮，单链表实现按照when时间排序插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mQuitting) &#123;</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        <span class="comment">// mMessages始终指向队列头部</span></span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">//头部插入msg,mMessages指向头部</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev; <span class="comment">//指针p的前一个msg对象</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span>(p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = fales;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历链表，找到合适when的位置，插入</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的代码写的很漂亮， 总结起来就是Message按照时间顺序入列，时间距离现在最短的在最头部, 具体分析内容在注释里了. </p>
<p>同时我们还知道,<code>sendMessage</code>的参数是<code>message</code>, 而且我们最好不要使用<code>new Message()</code>, 而是<code>Message.obtain()</code>, 我们先看下这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message.java</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Constructor (but the preferred way to get a Message is to call &#123;<span class="doctag">@link</span> #obtain() Message.obtain()&#125;).</span></span><br><span class="line"><span class="comment">    // 这里也可以看到， 最好使用obtain()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message sPool;</span><br><span class="line">Message next;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Return a new Message instance from the global pool. Allows us to</span></span><br><span class="line"><span class="comment"> *  avoid allocating new objects in many cases.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message m = sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="keyword">null</span>;</span><br><span class="line">            m.flags = <span class="number">0</span>;</span><br><span class="line">            sPoolSize--;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用对象池，防止多次的<code>new对象</code></p>
<p>分析到这里, <code>handler</code>的<code>sendMessage</code>已经完成了， 也构造了<code>message</code>的<code>queue</code>, 那么这些消息是怎么取出来的呢？ 这就要<code>Looper</code>的帮忙了。</p>
<p>我们知道， 使用<code>Handler</code>的时候一定需要<code>Looper.prepare</code>，否则会报错，也就是<code>Handler</code>构造函数中的错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们进入<code>Looper</code>的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> sMainLooper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了ThreadLocal, 每个线程，独立的Looper. Looper也只有开启了Looper.loop()方法，才会启动这个读，分发消息的机制。所以在自定义的线程里，一定要调用这两个方法<code>prepare</code> &amp; <code>loop</code>, 主线程使用Handler不需要，是因为Framework层的代码已经帮你实现了。</p>
<p>进入<code>loop</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span>(me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        Message msg = queue.next();</span><br><span class="line">        <span class="keyword">if</span>(msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来看， 一个死循环， 循环读取消息<code>queue.next()</code> 然后使用<code>msg.target</code>也就是<code>handler</code>进行分发，调用<code>handler.dispatchMessage()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结一下:</p>
<ol>
<li><code>Looper.prepare()</code>在本线程中保存一个<code>Looper</code>实例，然后实例中保存一个<code>MessageQueue</code>对象; <code>Looper.prepare()</code>在一个线程中只能调用一次，所以<code>MessageQueue</code>对象在一个线程中只有一个</li>
<li><code>Looper.prepare()</code>让当前线程进入无限循环<code>for(;;)</code>不断从<code>MessageQueue</code>实例中读取消息，然后<code>msg.target.dispatchMessage(msg)</code>处理 , <code>msg.target</code>就是<code>handler</code></li>
<li><code>Handler</code>构造方法中绘获取当前线程保存的<code>Looper</code>实例，进而与<code>Looper</code>实例中的<code>MessageQueue</code>关联</li>
<li><code>Handler</code>的<code>sendMessage</code>方法绘给<code>msg</code>的<code>target</code>属性赋值为<code>Handler</code>自身, 然后把<code>msg</code>加入<code>MessageQueue</code></li>
<li><code>Activity</code>创建的时候自动调用了<code>Looper.prepare()</code>和<code>Looper.loop()</code>方法</li>
<li><code>handler</code>的<code>dispatchMessage</code>方法就是外部重载的方法来处理逻辑</li>
<li>产生一个<code>Message</code>对象可以<code>new</code>出来，也可以使用<code>Message.obtain()</code> 建议用后者，因为<code>Message</code>内部维护了一个<code>Message</code>池用来<code>Message</code>的复用。</li>
<li>消息入列，遍历消息，把延迟时间最小的Message放在队列前面</li>
<li>将<code>Handler</code>声明为静态类可以消除内存泄漏，因为静态类不持有外部类的引用</li>
<li><code>HandlerThread</code>出现原因: <code>Thread</code>是个一次性消费品，完成任务后就被销毁，如果此时再有一个任务需要，就需要再开一个线程处理，导致多次的创建和销毁线程很耗时。因此我们创建一个循环线程，有任务投进来，执行完就等待。<code>HandlerThread</code>是一个线程，里面实现了<code>Looper</code>机制，也就是说当线程执行完任务后不会马上销毁，除非主动调用<code>HandlerThread</code>的<code>quit</code>方法退出。<code>HandlerThread</code>要在调用<code>run()</code>之后<code>handler</code>才可以使用它来创建。</li>
<li><code>ThreadLocal</code>，<code>ThreadLocal</code>为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。 首先每个线程内部有一个<code>ThreadLocal.ThreadLocalMap</code>类型的成员变量<code>threadLocals</code>. 这个<code>threadLocals</code>就是用来存储实际的变量副本的，<code>key</code>为当前<code>Thread</code>, <code>value</code>为变量副本.每个线程可以有多个<code>ThreadLocal</code>变量</li>
</ol>
<p>// TODO<br>MessageQueue.next()方法</p>
<p><a href="https://blog.csdn.net/qq_21586317/article/details/88780077" target="_blank" rel="noopener">https://blog.csdn.net/qq_21586317/article/details/88780077</a><br><a href="https://www.jianshu.com/p/219701879fe4" target="_blank" rel="noopener">https://www.jianshu.com/p/219701879fe4</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidCommunication</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-IdleHandler的使用</title>
    <url>/posts/971bf444/</url>
    <content><![CDATA[<p>直接看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Callback interface for discovering when a thread is going to block</span></span><br><span class="line"><span class="comment">   * waiting for more messages.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdleHandler</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Called when the message queue has run out of messages and will now</span></span><br><span class="line"><span class="comment">   * wait for more. Return true to keep your idle handler active, false</span></span><br><span class="line"><span class="comment">   * to have it removed. This may be called if there are still messages</span></span><br><span class="line"><span class="comment">   * pending in the queue, but they are all scheduled to be dispatched</span></span><br><span class="line"><span class="comment">   * after the current time.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">queueIdle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从注释可以知道，这个IdleHandler就是当前消息队列中，如果没有消息需要分发的时候，处于空闲状态，这时会回调这个接口，然后返回值表示，true-&gt;回调完后销毁，不再回调，false-&gt;回调完后会继续存在，继续等待下次MessageQueu空闲时候回调.</p>
<p>比如，我们对于一些不需要立即初始化的操作，可以放在主线程这个回调里去实现, 这样不会阻塞主消息队列的执行，优化启动速度。<br>e.g</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Looper.myQueue().addIdleHandler(<span class="keyword">new</span> MessageQueue.IdleHandler() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">queueIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Debug.i(TAG, <span class="string">"queueIdle .... "</span>);</span><br><span class="line">           <span class="comment">// 做些不需要立即执行的事情</span></span><br><span class="line">           Debug.i(TAG, <span class="string">"queueIdle done..."</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p>它的实现原理也很简单，就是在MessageQueue里，如果消息队列里没有msg，就去执行这个回调</p>
<p>但是在调试的时候发现, 如果当前存在一个动画，那么主消息队列会一直存在，直到动画结束才会回调，因此这种回调机制可能会存在些问题，需要特别注意会不会出现NPE。</p>
<p><a href="https://blog.csdn.net/tencent_bugly/article/details/78395717" target="_blank" rel="noopener">https://blog.csdn.net/tencent_bugly/article/details/78395717</a></p>
<p><a href="https://juejin.im/post/5d55779b518825168e6a0430" target="_blank" rel="noopener">https://juejin.im/post/5d55779b518825168e6a0430</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidCommunication</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-EventBus2 &amp; EventBus3对比</title>
    <url>/posts/c09a1c52/</url>
    <content><![CDATA[<p>在使用<code>method tracing</code>工具分析启动速度的时候，会发现<code>EventBus.getDefault().register</code>方法会耗时挺久，因此分析下<code>EventBus</code>源码，这里使用的是<code>EventBus2.4</code>. 之后，再来看下<code>EventBus3.0</code>究竟优化了什么地方，以及他们之间的性能比较。</p>
<p>为了便于理解，这里先把几个关键变量介绍一下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key is Event name</span></span><br><span class="line"><span class="comment"> * value is subscription</span></span><br><span class="line"><span class="comment"> * 也就是记录了某个事件上所有的注册信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录当前Object类里所有的注册信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录所有sticky的注册信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;</span><br></pre></td></tr></table></figure>

<p>其中，比较关键的一个类是<code>Subscription</code>. 这里的代码也比较少:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object subscriber; <span class="comment">//订阅者，也就是调用EventBus.getDefault().register(xx)里的xx</span></span><br><span class="line">    <span class="keyword">final</span> SubscriberMethod subscriberMethod; <span class="comment">//具体代码在下方</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriberMethod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Method method; <span class="comment">// 也就是每个类中所有onEventXXX()开头的方法, 赋值的地方在SubscriberMethodFinder.findSubscriberMethods里</span></span><br><span class="line">    <span class="keyword">final</span> ThreadMode threadMode;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; eventType; <span class="comment">// eventType是onEventXXX(ABC) 这里的ABC.getClass()</span></span><br><span class="line">    String methodString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面会详细分析这几个的区别</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  ThreadMode &#123;</span><br><span class="line">    PostThread,</span><br><span class="line">    MainThread,</span><br><span class="line">    BackgroundThread,</span><br><span class="line">    Async</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先对以上一些类先有个了解。 然后我们来具体看下<code>EventBus</code>.</p>
<p>我们知道, EventBus使用方式无外乎<code>register</code>, <code>unregister</code>, <code>post</code>, <code>postSticky</code>, <code>registeSticky</code>， 还有定义些<code>onEventXXX(EventType)</code>方法</p>
<h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>其中<code>register</code>, <code>registerSticky</code>都会走到这里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里是前文说的，找出一个类中所有onEvent开头的方法存在subscriberMethods里, 这里的findSubscriberMethods是使用反射来查找出来的</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());</span><br><span class="line">    <span class="keyword">for</span>(SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">        subscribe(subscriber, subscriberMethod, sticky, priority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    String key = subscriberClass.getName();</span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (methodCache) &#123;</span><br><span class="line">        subscriberMethods = methodCache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(subscriberMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    subscriberMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Class&lt;?&gt; clazz = subscriberClass;</span><br><span class="line">    HashSet&lt;String&gt; eventTypesFound = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    StringBuilder methodKeyBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String name = clazz.getName();</span><br><span class="line">        <span class="keyword">if</span>(name.startsWith(<span class="string">"java."</span>) || name.startsWith(<span class="string">"javax."</span>) || name.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods) &#123;</span><br><span class="line">            String methodName = method.getName();</span><br><span class="line">            <span class="keyword">if</span>(methodName.startsWith(ON_EVENT_METHOD_NAME)) &#123;</span><br><span class="line">                <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">                    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                    <span class="keyword">if</span>(parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                        String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());</span><br><span class="line">                        ThreadMode threadMode;</span><br><span class="line">                        <span class="keyword">if</span>(modifierString.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                            threadMode = ThreadMode.PostThread;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(modifierString.equals(<span class="string">"MainThread"</span>)) &#123;</span><br><span class="line">                            threadMode = ThreadMode.MainThread;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(modifierString.equals(<span class="string">"BackgroundThread"</span>)) &#123;</span><br><span class="line">                            threadMode = ThreadMode.BackgroundThread;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(modifierString.equals(<span class="string">"Async"</span>)) &#123;</span><br><span class="line">                            threadMode = ThreadMode.Async;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span>(skipMethodVerificationForClasses.containsKey(clazz)) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Illegal onEvent method, check for tyeps: "</span> + method);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                        methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">                        methodKeyBuilder.append(methodName);</span><br><span class="line">                        methodKeyBuilder.append(<span class="string">'&gt;'</span>).append(eventType.getName());</span><br><span class="line">                        String methodKey = methodKeyBuilder.toString();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(eventTypesFound.add(methodKey)) &#123;</span><br><span class="line">                            subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, threadMode, eventType));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!skipMethodVerificationForClasses.containsKey(clazz)) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(subscriberMethods.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass + <span class="string">" has no public methods called "</span></span><br><span class="line">                + ON_EVENT_METHOD_NAME);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (methodCache) &#123;</span><br><span class="line">            methodCache.put(key, subscriberMethods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续来看下<code>subscribe</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充subscriptionsByEventType这个数据</span></span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line"></span><br><span class="line">    Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod, priority);</span><br><span class="line">    <span class="keyword">if</span>(subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(subscriptions.contains(newSubscription)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></span><br><span class="line">                    + eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == size || newSubscription.priority &gt; subscriptions.get(i).priority) &#123;</span><br><span class="line">            subscriptions.add(i, newSubscription);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充typesBySubscriber这个数据</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span>(subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class="line">    &#125;</span><br><span class="line">    subscribedEvents.add(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// registerSticky会去触发onEventXXX()方法的原因就是在这里</span></span><br><span class="line">    <span class="comment">// 这里的stickyEvents的赋值，是在postSticky方法中</span></span><br><span class="line">    <span class="keyword">if</span>(sticky) &#123;</span><br><span class="line">        Object stickyEvent;</span><br><span class="line">        <span class="keyword">synchronized</span> (stickyEvents) &#123;</span><br><span class="line">            stickyEvent = stickyEvents.get(eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码里可以知道， 这个方法目的就是填充<code>subscriptionsByEventType</code>和<code>typesBySubscriber</code>这两个数据。到这里<code>register</code>的工作就做完了。 然后我们来看下<code>post</code></p>
<h2 id="post"><a href="#post" class="headerlink" title="post"></a>post</h2><p>无论是<code>post</code>, 还是<code>postSticky</code>还是内部方法<code>postSingleEvent</code>,<code>postSingleEventForEventType</code>最终都会走到这里:</p>
<p>到这里，我们可以看到之前<code>ThreadMode</code>中定义的几种类型, 具体解释在注释里.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> PostThread: <span class="comment">// 在哪个线程post的，就在哪个线程invoke</span></span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MainThread:</span><br><span class="line">            <span class="keyword">if</span>(isMainThread) &#123;<span class="comment">// 如果post的是主线程，直接主线程invoke</span></span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果post的是子线程，加入主线程队列中等待invoke</span></span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BackgroundThread:</span><br><span class="line">            <span class="keyword">if</span>(isMainThread) &#123; <span class="comment">//如果post是主线程，那么加入background线程队列里等待invoke</span></span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果post的是子线程，那么直接在当前线程invoke</span></span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Async: <span class="comment">//不管post是在什么线程，均在asyncPoster线程的队列等待invoke</span></span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然最终都是调用到了上面那个方法，但是，他们来的渠道不一样. 对于<code>PostThread</code>最简单，直接在<code>EventBus</code>代码里过来的，但是另外三个，分别通过:</p>
<p>MainThread: &lt;- <code>HandlerPoster mainThreadPoster</code> 中调用的<code>eventBus.invokeSubscriber(pendingPost);</code><br>BackgroundThread &lt;- <code>BackgroundPoster backgroundPoster</code>中调用的<code>eventBus.invokeSubscriber(pendingPost);</code><br>Async &lt;- <code>AsyncPoster asyncPoster</code>中调用的<code>eventBus.invokeSubscriber(pendingPost);</code></p>
<p>不同的渠道过来，也可以看出，注册信息在多线程之间的传递是使用的被封装成了一个PendingPost的对象, 这个类实现如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPost</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对象复用, 不用多次new操作?????这里不是很清楚</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;PendingPost&gt; pendingPostPool = <span class="keyword">new</span> ArrayList&lt;PendingPost&gt;();</span><br><span class="line"></span><br><span class="line">    Object event;</span><br><span class="line">    Subscription subscription;</span><br><span class="line">    PendingPost next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PendingPost</span><span class="params">(Object event, Subscription subscription)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.event = event;</span><br><span class="line">        <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> PendingPost <span class="title">obtainPendingPost</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (pendingPostPool) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = pendingPostPool.size();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                PendingPost pendingPost = pendingPostPool.remove(size - <span class="number">1</span>);</span><br><span class="line">                pendingPost.event = event;</span><br><span class="line">                pendingPost.subscription = subscription;</span><br><span class="line">                pendingPost.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> pendingPost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PendingPost(event, subscription);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releasePendingPost</span><span class="params">(PendingPost pendingPost)</span> </span>&#123;</span><br><span class="line">        pendingPost.event = <span class="keyword">null</span>;</span><br><span class="line">        pendingPost.subscription = <span class="keyword">null</span>;</span><br><span class="line">        pendingPost.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (pendingPostPool) &#123;</span><br><span class="line">            <span class="comment">// TODO 这里不是很清楚</span></span><br><span class="line">            <span class="comment">// Don't let the pool grow indefinitely</span></span><br><span class="line">            <span class="keyword">if</span> (pendingPostPool.size() &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">                pendingPostPool.add(pendingPost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存了<code>Subscription</code>信息以及下一个<code>PendingPost</code>对象. 具体来看下这三个渠道的代码，如何把<code>PendingPost</code>发过来的</p>
<h3 id="HandlerPoster"><a href="#HandlerPoster" class="headerlink" title="HandlerPoster"></a>HandlerPoster</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerPoster</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxMillisInsideHandleMessage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handlerActive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从构造函数可以知道，这里的<code>Handler</code>是<code>主线程的handler</code>, 维护了一个<code>PendingPost</code>的队列<code>PendingPostQueue</code>, 链表实现的队列。出列从head处，入列从tail入，代码比较简单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPostQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PendingPost head;</span><br><span class="line">    <span class="keyword">private</span> PendingPost tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(PendingPost pendingPost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"null cannot be enqueued"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tail != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail.next = pendingPost;</span><br><span class="line">            tail = pendingPost;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = tail = pendingPost;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Head present, but no tail"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> PendingPost <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PendingPost pendingPost = head;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">                tail = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pendingPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> PendingPost <span class="title">poll</span><span class="params">(<span class="keyword">int</span> maxMillisToWait)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            wait(maxMillisToWait);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HandlerPoster</code>每次取队列中的<code>head</code>数据，调用<code>eventBus.invokeSubscriber(pendingPost)</code>. 使用<code>Handler</code>机制从而实现始终保证主线程调用</p>
<h3 id="BackgroundPoster"><a href="#BackgroundPoster" class="headerlink" title="BackgroundPoster"></a>BackgroundPoster</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> executorRunning;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>HandlerPoster</code>类似，循环取队列头元素，执行<code>eventBus.invokeSubscriber</code>, 只不过调用的线程为<code>BackgroundThread</code>线程</p>
<h3 id="AsyncPoster"><a href="#AsyncPoster" class="headerlink" title="AsyncPoster"></a>AsyncPoster</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>BackgroundPoster</code>类似，都是通过<code>EventBus</code>里的<code>ExecutorService</code>启动一个线程，在线程里循环取<code>queue</code>中的<code>PendingPost</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    queue.enqueue(pendingPost);</span><br><span class="line">    eventBus.getExecutorService().execute(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过以上的分析，可以知道，<code>EventBus 2</code>实现的原理主要是通过反射机制，把注册的类和注册的方法全部存到内存里，然后<code>postEvent</code>时候，根据内存信息查找特定的类里的特定的方法来处理Event事件。<br>因为反射本身性能很差，每次<code>register</code>的时候，都会把类中所有方法遍历一遍，找<code>onEventXXX()</code>方法，这里性能比较差。所以才会在<code>method tracing</code>中看到每次<code>register</code>相对都会很耗时。 </p>
<p>现在EventBus3已经出来了， 会不会有改进呢？ 我还没时间分析，具体可以参考下:</p>
<p><a href="https://juejin.im/entry/5948b9bc61ff4b006c047a0d" target="_blank" rel="noopener">https://juejin.im/entry/5948b9bc61ff4b006c047a0d</a></p>
<p>大致意思就是裸的EventBus3因为使用了运行时注解，所以效率还没2高，但是你可以加些注解，这些是编译时注解，在编译期就生成了EventBus2中register里最耗时的那些反射找方法的地方. 具体代码，留待分析 </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidCommunication</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-SharedPreference原理</title>
    <url>/posts/c8244c97/</url>
    <content><![CDATA[<p>在使用method tracing工具时，发现SharedPreference在初次使用的时候，占用的时间比较长。 因此，这里研究下SharedPreference源码， 了解下是什么消耗了的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    SharedPreferences.java</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SharedPreferences</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSharedPreferenceChangeListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSharedPreferenceChanged</span><span class="params">(SharedPreferences sharedPreferences, String key)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">        <span class="function">Editor <span class="title">putString</span><span class="params">(String key, @Nullable String value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">putStringSet</span><span class="params">(String key, @Nullable Set&lt;String&gt; values)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">putInt</span><span class="params">(String key, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">putLong</span><span class="params">(String key, <span class="keyword">long</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">putFloat</span><span class="params">(String key, <span class="keyword">float</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">putBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">remove</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Editor <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">commit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ?&gt; getAll();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getString</span><span class="params">(String key, @Nullable String defValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">getStringSet</span><span class="params">(String key, @Nullable Set&lt;String&gt; defValues)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key, <span class="keyword">int</span> defValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String key, <span class="keyword">long</span> defValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(String key, <span class="keyword">float</span> defValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> defValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Editor <span class="title">edit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerOnSharedPreferenceChangeListener</span><span class="params">(OnSharedPreferenceChangeListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterOnSharedPreferenceChangeListener</span><span class="params">(OnSharedPreferenceChangeListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SharedPreference和Editor都只是一个接口, Editor是SharedPreferences接口里的接口, 具体实现类在SharedPreferenceImpl.java里</p>
<p>这里，我们简化下代码， 不去分析OnSharedPreferenceChangeListener相关的东西， 因为用的比较少，而且不影响主要源码逻辑。</p>
<p>先看下，这里有三把锁</p>
<p><code>SharedPreferenceImpl.mLock</code>, <code>EditorImpl.mLock</code>, <code>mWritingToDiskLock</code></p>
<p>先看<code>mLock</code></p>
<h2 id="SharedPreferenceImpl-mLock"><a href="#SharedPreferenceImpl-mLock" class="headerlink" title="SharedPreferenceImpl.mLock"></a>SharedPreferenceImpl.mLock</h2><p>最开始是<code>startLoadFromDisk()</code>这里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startLoadFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            mLoaded = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"SharedPreferencesImpl-load"</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                loadFromDisk();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只是一个标志位mLoaded, 表示是否已经把disk里的xml文件加载进来了</p>
<p>结合loadFromDisk()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mLoaded) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mBackupFile.exists()) &#123;</span><br><span class="line">            mFile.delete();</span><br><span class="line">            mBackupFile.renameTo(mFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">null</span>;</span><br><span class="line">    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mFile.canRead()) &#123;</span><br><span class="line">            BufferedInputStream str = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                str = <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                        <span class="keyword">new</span> FileInputStream(mFile), <span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line">                map = (Map&lt;String, Object&gt;) XmlUtils.readMapXml(str);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Cannot read "</span> + mFile.getAbsolutePath(), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IoUtils.closeQuietly(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        thrown = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mLoaded = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// It's important that we always signal waiters, even if we'll make</span></span><br><span class="line">        <span class="comment">// them fail with an exception. The try-finally is pretty wide, but</span></span><br><span class="line">        <span class="comment">// better safe than sorry.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (thrown == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mMap = map;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// In case of a thrown exception, we retain the old map. That allows</span></span><br><span class="line">            <span class="comment">// any open editors to commit and store updates.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mLock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以知道，这里只是把xml文件，映射到map里. 最后的finally里, mLock会notifyAll. 我们看下哪里调用了mLock.wait方法</p>
<p>阅读代码，可以知道，所有的getString(String , defValue), getXXX()等方法都会被同步锁mLock保护起来， 而且在实际获取值的时候，都会调用awaitLoadedLocked()</p>
<p>也就是说， 在调用getXXX()方法时，必须保证xml文件已经加载进了内存。不然就会阻塞等待加载完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key, @Nullable String defValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        awaitLoadedLocked();</span><br><span class="line">        String v = (String)mMap.get(key);</span><br><span class="line">        <span class="keyword">return</span> v != <span class="keyword">null</span> ? v : defValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">awaitLoadedLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mLoaded) &#123;</span><br><span class="line">        <span class="comment">// Raise an explicit StrictMode onReadFromDisk for this</span></span><br><span class="line">        <span class="comment">// thread, since the real read will be in a different</span></span><br><span class="line">        <span class="comment">// thread and otherwise ignored by StrictMode.</span></span><br><span class="line">        BlockGuard.getThreadPolicy().onReadFromDisk();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!mLoaded) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mLock.wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException unused) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Editor <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> remove the need to call awaitLoadedLocked() when</span></span><br><span class="line">    <span class="comment">// requesting an editor.  will require some work on the</span></span><br><span class="line">    <span class="comment">// Editor, but then we should be able to do:</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//      context.getSharedPreferences(..).edit().putString(..).apply()</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// ... all without blocking.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        awaitLoadedLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EditorImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="EditorImp-mLock"><a href="#EditorImp-mLock" class="headerlink" title="EditorImp.mLock"></a>EditorImp.mLock</h2><p>还有一些使用<code>mLock</code>的地方，我们等下在看。 先看下<code>mEditorLock</code></p>
<p>主要是在EditorImpl这个内部类里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Editor <span class="title">putString</span><span class="params">(String key, @Nullable String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mEditorLock) &#123;</span><br><span class="line">            mModified.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用Editor把数据写入mModified这个内存里，都是被mEditorLock保护着.</p>
<p>还有一个地方就是Editor里的apply(), commit()方法里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MemoryCommitResult mcr = commitToMemory();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MemoryCommitResult mcr = commitToMemory();</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体来看下<code>commmitToMemory()</code>这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns true if any changes were made</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MemoryCommitResult <span class="title">commitToMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> memoryStateGeneration;</span><br><span class="line">    Map&lt;String, Object&gt; mapToWriteToDisk;</span><br><span class="line">    <span class="comment">// 读xml文件加的锁</span></span><br><span class="line">    <span class="keyword">synchronized</span> (SharedPreferencesImpl.<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">        <span class="comment">// We optimistically don't make a deep copy until</span></span><br><span class="line">        <span class="comment">// a memory commit comes in when we're already</span></span><br><span class="line">        <span class="comment">// writing to disk.</span></span><br><span class="line">        <span class="keyword">if</span> (mDiskWritesInFlight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We can't modify our mMap as a currently</span></span><br><span class="line">            <span class="comment">// in-flight write owns it.  Clone it before</span></span><br><span class="line">            <span class="comment">// modifying it.</span></span><br><span class="line">            <span class="comment">// noinspection unchecked</span></span><br><span class="line">            mMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(mMap);</span><br><span class="line">        &#125;</span><br><span class="line">        mapToWriteToDisk = mMap;</span><br><span class="line">        mDiskWritesInFlight++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写mModified时加的锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mEditorLock) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> changesMade = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mClear) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mapToWriteToDisk.isEmpty()) &#123;</span><br><span class="line">                    changesMade = <span class="keyword">true</span>;</span><br><span class="line">                    mapToWriteToDisk.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                mClear = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; e : mModified.entrySet()) &#123;</span><br><span class="line">                String k = e.getKey();</span><br><span class="line">                Object v = e.getValue();</span><br><span class="line">                <span class="comment">// "this" is the magic value for a removal mutation. In addition,</span></span><br><span class="line">                <span class="comment">// setting a value to "null" for a given key is specified to be</span></span><br><span class="line">                <span class="comment">// equivalent to calling remove on that key.</span></span><br><span class="line">                <span class="keyword">if</span> (v == <span class="keyword">this</span> || v == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mapToWriteToDisk.containsKey(k)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mapToWriteToDisk.remove(k);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mapToWriteToDisk.containsKey(k)) &#123;</span><br><span class="line">                        Object existingValue = mapToWriteToDisk.get(k);</span><br><span class="line">                        <span class="keyword">if</span> (existingValue != <span class="keyword">null</span> &amp;&amp; existingValue.equals(v)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mapToWriteToDisk.put(k, v);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                changesMade = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mModified.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (changesMade) &#123;</span><br><span class="line">                mCurrentMemoryStateGeneration++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            memoryStateGeneration = mCurrentMemoryStateGeneration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MemoryCommitResult(memoryStateGeneration,</span><br><span class="line">            mapToWriteToDisk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里把mModified对象里的内容写入mapToWriteToDisk.</p>
<p>因此在前文中写入mModified时加了mEditorLock锁，因此这里先读取mModified时也需要加锁. 也就是说 mModified这把锁， 保护的是读写mModified这个对象</p>
<p>回过来继续看下这个commitToMemory方法调用的地方， 也就是<code>commit</code>和<code>apply</code>这两个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MemoryCommitResult mcr = commitToMemory();</span><br><span class="line">    <span class="keyword">final</span> Runnable awaitCommit = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mcr.writtenToDiskLatch.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    QueuedWork.addFinisher(awaitCommit);</span><br><span class="line"></span><br><span class="line">    Runnable postWriteRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                awaitCommit.run();</span><br><span class="line">                QueuedWork.removeFinisher(awaitCommit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    SharedPreferencesImpl.<span class="keyword">this</span>.enqueueDiskWrite(mcr, postWriteRunnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MemoryCommitResult mcr = commitToMemory();</span><br><span class="line"></span><br><span class="line">    SharedPreferencesImpl.<span class="keyword">this</span>.enqueueDiskWrite(</span><br><span class="line">        mcr, <span class="keyword">null</span> <span class="comment">/* sync write on this thread okay */</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mcr.writtenToDiskLatch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mcr.writeToDiskResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的applay会阻塞在<code>writtenToDiskLatch</code>这里，等待CountDownLatch倒计时结束后执行后文的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedPreferencesImpl.<span class="keyword">this</span>.enqueueDiskWrite(mcr, postWriteRunnable);</span><br></pre></td></tr></table></figure>

<p>而commit则直接执行enqueueDiskWrite方法。 </p>
<p>也证实了，commit在写到内存后直接就写入文件，而apply写入内存后，异步写入文件. 多并发的提交commit时，需等待正在处理的commit数据更新到磁盘文件后才会继续往下执行，从而降低效率; 而apply只是原子更新到内存，后调用apply函数会直接覆盖前面内存数据，从一定程度上提高很多效率。</p>
<p>最后来看下mWritingToDiskLock</p>
<h2 id="mWritingToDiskLock"><a href="#mWritingToDiskLock" class="headerlink" title="mWritingToDiskLock"></a>mWritingToDiskLock</h2><p>也就是内存写入文件的地方, 防止多个线程操作文件，所以加把锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueueDiskWrite</span><span class="params">(<span class="keyword">final</span> MemoryCommitResult mcr,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> Runnable postWriteRunnable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isFromSyncCommit = (postWriteRunnable == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Runnable writeToDiskRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mWritingToDiskLock) &#123;</span><br><span class="line">                    writeToFile(mcr, isFromSyncCommit);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mDiskWritesInFlight--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (postWriteRunnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    postWriteRunnable.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Typical #commit() path with fewer allocations, doing a write on</span></span><br><span class="line">    <span class="comment">// the current thread.</span></span><br><span class="line">    <span class="keyword">if</span> (isFromSyncCommit) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> wasEmpty = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            wasEmpty = mDiskWritesInFlight == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (wasEmpty) &#123;</span><br><span class="line">            <span class="comment">// 同步方式</span></span><br><span class="line">            writeToDiskRunnable.run();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异步方式</span></span><br><span class="line">    QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过前文分析，SharedPreference代码里使用了大量的同步机制。<br>因此，使用不恰当，很容易出现耗时甚至ANR:</p>
<p>1.第一次读取时，造成主线程阻塞(文件过大，主线程等待时间过长)，引起ANR<br>2.文件太大，加载到内存中一直存在，占用大量内存<br>3.直接在主线程进行commit操作，造成阻塞，引发ANR<br>4.多次apply，造成锁竞争，浪费系统资源<br>5.Sp文件过大，每次更新都更新整个文件</p>
<p>优化建议:<br>1.对Sp进行合适的拆分<br>2.在合适的时机进行异步初始化<br>3.批量修改一次提交<br>4.在主线程谨慎使用commit</p>
<p>SharedPreferences每次写入时是增量写入吗？</p>
<pre><code>答：不是，每次都是重新写入，说一下那个mBackupFile，SharedPreferences在写入时会先把之前的xml文件改成名成一个备份文件，然后再将要写入的数据写到一个新的文件中，如果这个过程执行成功的话，就会把备份文件删除。由此可见每次即使只是添加一个键值对，也会重新写入整个文件的数据，这也说明SharedPreferences只适合保存少量数据，文件太大会有性能问题。SharedPreferences每次写入都是整个文件重新写入，不是增量写入。</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidData</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Activity栈和启动模式</title>
    <url>/posts/a578e2/</url>
    <content><![CDATA[<p>观察<code>Activity</code>栈的脚本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity | sed -n -e '/Stack #/p' -e '/Running activities/,/Run #0/p'</span><br></pre></td></tr></table></figure>

<ul>
<li>Standard模式</li>
<li>SingleTop模式 栈顶复用</li>
<li>SingleTask模式 栈内复用</li>
<li>SingleInstance模式</li>
</ul>
<h2 id="Standard模式"><a href="#Standard模式" class="headerlink" title="Standard模式"></a>Standard模式</h2><p>标准模式, 启动<code>Activity</code>的默认模式, 被启动的<code>Activity</code>会运行于启动的<code>Activity</code>栈, 因此必须使用<code>Activity</code>的<code>Context</code>启动, 不能使用<code>Application</code>否则会报错.</p>
<p>如MainActivity启动TestAActivity</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">    Stack #1:</span><br><span class="line">  <span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">    TaskRecord&#123;3caa65e3 #2711 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=2&#125;</span><br><span class="line">      Run #1: ActivityRecord&#123;36b06e99 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2711&#125;</span><br><span class="line">      Run #0: ActivityRecord&#123;27396226 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2711&#125;</span><br><span class="line">Stack #0:</span><br><span class="line">  <span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">    TaskRecord&#123;27d796c9 #2695 A=com.miui.home U=0 sz=1&#125;</span><br><span class="line">      Run #0: ActivityRecord&#123;2e5712cb u0 com.miui.home/.launcher.Launcher t2695&#125;</span><br></pre></td></tr></table></figure>

<p>栈内由上到下: MainActivity -&gt; TestAActivity</p>
<h2 id="SingleTop模式"><a href="#SingleTop模式" class="headerlink" title="SingleTop模式"></a>SingleTop模式</h2><p>栈顶复用模式, 只有<code>Activity</code>位于栈顶, 重复启动时，会使用默认实例， 即单例模式, 如果位于栈内，则会仍然创建实例</p>
<p>MainActivity启动TestA, TestA启动TestB, TestB启动自身， TestB是单例，观察栈内情况, TestB只有一份实例，第二次创建时复用</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  Stack #1:</span><br><span class="line"><span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">  TaskRecord&#123;12abf566 #2712 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=3&#125;</span><br><span class="line">    Run #2: ActivityRecord&#123;187d7ff7 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2712&#125;</span><br><span class="line">    Run #1: ActivityRecord&#123;a551034 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2712&#125;</span><br><span class="line">    Run #0: ActivityRecord&#123;22f9cce4 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2712&#125;</span><br></pre></td></tr></table></figure>

<p>栈内: MainActivity -&gt; TestAActivity -&gt; TestBActivity</p>
<p>MainActivity启动TestA, TestA启动TestB, TestB启动TestC, TestC启动TestB, TestB是单例, 观察栈内情况，由于TestC是栈定， 启动TestB之后， 因为TestB已经在栈内非栈顶了， 所以会重新创建TestB实例, 保留2份TestB</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  Stack #1:</span><br><span class="line"><span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">  TaskRecord&#123;1792f5f0 #2715 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=5&#125;</span><br><span class="line">    Run #4: ActivityRecord&#123;1e70110b u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2715&#125;</span><br><span class="line">    Run #3: ActivityRecord&#123;c7f4dce u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestCActivity t2715&#125;</span><br><span class="line">    Run #2: ActivityRecord&#123;254536cd u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2715&#125;</span><br><span class="line">    Run #1: ActivityRecord&#123;36b2da15 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2715&#125;</span><br><span class="line">    Run #0: ActivityRecord&#123;3a1c4a6a u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2715&#125;</span><br></pre></td></tr></table></figure>

<p>栈内: MainActivity -&gt; TestAActivity -&gt; TestBActivity -&gt; TestCActivity -&gt; TestBActivity</p>
<h2 id="SingleTask模式"><a href="#SingleTask模式" class="headerlink" title="SingleTask模式"></a>SingleTask模式</h2><p>栈内复用模式，只要<code>Activity</code>在一个栈中存在，多次调用时，都不会创建实例，即单例模式. 包含以下几种情况:</p>
<h3 id="任务栈不存在"><a href="#任务栈不存在" class="headerlink" title="任务栈不存在"></a>任务栈不存在</h3><p>初次启动SingleTask实例，会创建任务栈和实例</p>
<p>MainActivity启动TestA, TestA启动TestB, TestB是SingleTask, 并且任务栈不同，观察可知，系统包含两个任务栈，TestB位于其他任务栈中。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  Stack #1:</span><br><span class="line"><span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">  TaskRecord&#123;d5d53d4 #2727 A=me.chunyu.spike.stack U=0 sz=1&#125;</span><br><span class="line">    Run #2: ActivityRecord&#123;1d720e55 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2727&#125;</span><br><span class="line">  TaskRecord&#123;a3f797d #2726 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=2&#125;</span><br><span class="line">    Run #1: ActivityRecord&#123;ffd689d u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2726&#125;</span><br><span class="line">    Run #0: ActivityRecord&#123;192310ac u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2726&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>taskAffinity</code>属性, 添加新的<code>Activity</code>栈, 与SingleTask配合使用, Standard模式无效. 新任务栈是<code>me.chunyu.spike.stack</code></p>
<h3 id="任务栈存在"><a href="#任务栈存在" class="headerlink" title="任务栈存在"></a>任务栈存在</h3><p>初次启动SingleTask实例，会直接进入栈， 剩下与Standard模式相同</p>
<h3 id="任务栈相同"><a href="#任务栈相同" class="headerlink" title="任务栈相同"></a>任务栈相同</h3><p>再次启动SingleTask实例， 实例会置于栈顶，并清除其上面的实例， 具有clearTop的效果.</p>
<p>MainActivity启动TestA, TestA启动TestB, TestB是SingleTask, TestB启动TestC, TestC重新启动TestB, 则TestB会出栈。 观察可知, TestC出栈，TestB在栈顶</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Stack #1:</span><br><span class="line">  <span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">    TaskRecord&#123;18230815 #2737 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=3&#125;</span><br><span class="line">      Run #4: ActivityRecord&#123;1126c300 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2737&#125;</span><br><span class="line">      Run #3: ActivityRecord&#123;3114fee8 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2737&#125;</span><br><span class="line">      Run #2: ActivityRecord&#123;f8e235d u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2737&#125;</span><br></pre></td></tr></table></figure>

<h3 id="任务栈不同"><a href="#任务栈不同" class="headerlink" title="任务栈不同"></a>任务栈不同</h3><p>再次启动SingleTask实例， 会导致任务栈切换，后台置于前台</p>
<p>MainActivity启动TestA, TestA启动TestB(SingleTask，不同任务栈), TestB启动TestC(与B同栈)。 则MainActivity和TestA想同栈， TestB和TestC相同栈， 此时栈顶是 TestC, 按Home键，再次启动应用，则默认任务栈会启动， TestA启动， TestA启动TestC，应用当前状态如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  Stack #1:</span><br><span class="line"><span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">  TaskRecord&#123;1d05e6c9 #2754 A=me.chunyu.spike.stack U=0 sz=2&#125;</span><br><span class="line">    Run #4: ActivityRecord&#123;3f77e822 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestCActivity t2754&#125;</span><br><span class="line">  TaskRecord&#123;3fe736d0 #2753 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=2&#125;</span><br><span class="line">    Run #3: ActivityRecord&#123;15f0470e u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2753&#125;</span><br><span class="line">  TaskRecord&#123;1d05e6c9 #2754 A=me.chunyu.spike.stack U=0 sz=2&#125;</span><br><span class="line">    Run #2: ActivityRecord&#123;181229e6 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2754&#125;</span><br><span class="line">  TaskRecord&#123;3fe736d0 #2753 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=2&#125;</span><br><span class="line">    Run #1: ActivityRecord&#123;28628d61 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2753&#125;</span><br><span class="line">  TaskRecord&#123;2d646058 #2719 A=com.android.incallui U=0 sz=1&#125;</span><br></pre></td></tr></table></figure>

<p>TestC位于栈顶， 点击Back键, 不是返回TestA(启动TestC的实例)， 而是TestB, 即优先返回相同栈的实例, 再次是TestA, 然后是MainActivity, 依次出栈</p>
<h2 id="SingleInstance模式"><a href="#SingleInstance模式" class="headerlink" title="SingleInstance模式"></a>SingleInstance模式</h2><p>单实例模式， 启动时， 系统会为其创造一个单独的任务栈, 以后每次使用，都会使用这个单例， 直到其被销毁，属于真正的单例模式</p>
<p>MainActivity启动TestA, TestA启动TestB(SingleInstance模式), TestB启动TestC, TestC再启动TestB, 则仍启动上一次的TestB, TestC合并默认栈(MainActivity + TestA， 也就是MainActivity和TestA, TestC同栈，TestB在另一个栈，虽然TestC是TestB启动的，但是TestC与TestA同栈) 是不是可以理解为singleInstance栈里只能有一个实例?</p>
<p>TestA启动TestB(SingleInstance模式). Home键应用退到后台。此时再点击图标进入APP, 原则上认为是TestB先展示, 实际是TestA, 因为当重新启动的时候，系统会先去找主栈（我是这么叫的）里的activity，也就是APP中LAUNCHER的activity所处在的栈。查看是否有存在的activity。没有的话则会重新启动LAUNCHER</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Stack #1:</span><br><span class="line">  <span class="function">Running <span class="title">activities</span> <span class="params">(most recent first)</span>:</span></span><br><span class="line">    TaskRecord&#123;384e3928 #2765 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=1&#125;</span><br><span class="line">      Run #3: ActivityRecord&#123;1ffc5b6b u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestBActivity t2765&#125;</span><br><span class="line">    TaskRecord&#123;2ad03544 #2764 A=me.chunyu.spike.wcl_activity_launchmode_demo U=0 sz=3&#125;</span><br><span class="line">      Run #2: ActivityRecord&#123;293d8c37 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestCActivity t2764&#125;</span><br><span class="line">      Run #1: ActivityRecord&#123;158bc0f3 u0 me.chunyu.spike.wcl_activity_launchmode_demo/.TestAActivity t2764&#125;</span><br><span class="line">      Run #0: ActivityRecord&#123;77691cf u0 me.chunyu.spike.wcl_activity_launchmode_demo/.MainActivity t2764&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用标志位"><a href="#常用标志位" class="headerlink" title="常用标志位"></a>常用标志位</h2><ul>
<li><code>FLAG_ACTIVITY_NEW_TASK</code> 同 <code>singleTask</code>模式</li>
<li><code>FLAG_ACTIVITY_SINGLE_TOP</code> 同 <code>singleTop</code>模式</li>
<li><code>FLAG_ACTIVITY_CLEAR_TOP</code> 一般和<code>singleTask</code>启动模式一起出现<ul>
<li>如果是<code>singleTask</code>启动模式，会清楚栈上其他实例，复用实例，调用<code>onNewIntent()</code></li>
<li>如果是<code>standard</code>启动模式，则会清除自己和其他实例并重新创建，调用<code>onCreate</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidActivity</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Analyze with Profile GPU Rendering</title>
    <url>/posts/5f491d88/</url>
    <content><![CDATA[<h1 id="Analyze-with-Profile-GPU-Rendering"><a href="#Analyze-with-Profile-GPU-Rendering" class="headerlink" title="Analyze with Profile GPU Rendering"></a>Analyze with Profile GPU Rendering</h1><p>The <a href="https://developer.android.com/studio/profile/dev-options-rendering.html" target="_blank" rel="noopener">Profile GPU Rendering</a> too indicates the relative time that each stage of the rendering pipeline takes to render the previous frame. This knowledge can help you identify bottlenecks in the pipeline, so that you can know what to optimize to improve your app’s rendering performance.</p>
<p>This page briefly explains what happens during each pipeline stage, and discusses issues that can cause bottlenecks there. Before reading this page, you should be familiar with the information presented in <a href="https://developer.android.com/studio/profile/dev-options-rendering.html" target="_blank" rel="noopener">Profile GPU rendering</a>. In addition, to understand how all of the stages fit together, it may be helpful to review <a href="https://www.youtube.com/watch?v=we6poP0kw6E&index=64&list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE" target="_blank" rel="noopener">how the rendering pipeline works</a></p>
<h2 id="Visual-representation"><a href="#Visual-representation" class="headerlink" title="Visual representation"></a>Visual representation</h2><p>The Profile GPU Rendering tool displays stages and their relative times in the form of a graph: a color-coded histogram.</p>
<p><img src="https://developer.android.com/topic/performance/images/bars.png" alt="an example of such a display"></p>
<p>Each segment of each vertical bar displayed in the Profile GPU Rendering graph represents a stage of the pipeline and is highlighted using a specific color in the bar graph. Figuer shows a key to the meaning of each displayed color.</p>
<p><img src="https://developer.android.com/topic/performance/images/s-profiler-legend.png" alt="Profile GPU Rendering Graph Legend"></p>
<p>Once you understant what each color signfiles, you can target specific aspects of your app to try to optimize its rendering performance.</p>
<h2 id="Stage-and-their-meanings"><a href="#Stage-and-their-meanings" class="headerlink" title="Stage and their meanings"></a>Stage and their meanings</h2><p>This section explains what happens during each stage corresponding to a color in Figure 2, as well as bottleneck causes to look out for.</p>
<h3 id="Input-Handling"><a href="#Input-Handling" class="headerlink" title="Input Handling"></a>Input Handling</h3><p>The input handling stage of the pipeline measures how long the app spent handling input events. This metric indicates how long the app spent executing code called as a result of input event callbacks.</p>
<p><code>When this segment is large</code></p>
<p>High values in this area are typically a result of too much work, or too-complex work, occuring inside the input-handler event callbacks. Since these callbacks always occur on the main thread, solutions to this problem focus on optimizing the work directly, or offloading the work to a different thread.</p>
<p>It’s also worth nothing that <code>RecyclerView</code> scrolling can appear in this phase. <code>RecyclerView</code> scrolls immediately when it consumes the touch event. As a result, it can inflate or populate new item views. For this reason, it’s important to make this operation as fast as possible. Profiling tools like <a href="https://developer.android.com/studio/profile/traceview.html" target="_blank" rel="noopener">Traceview</a> or <a href="https://developer.android.com/studio/profile/systrace.html" target="_blank" rel="noopener">Systrace</a> can help you investigate further.</p>
<h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><p>The Animations phase shows you just how long it took to evaluate all the animators that were running in that frame. The most common animators are <code>ObjectAnimator</code>, <code>ViewPropertyAnimator</code>, and <code>Transions</code>.</p>
<p><code>When this segment is large</code></p>
<p>High values in this area are typically a result of work that’s executing due to some property change of the animation. For example, a fling animation, which scrolls your <code>ListView</code> or <code>RecyclerView</code>, causes large amounts of view inflation and populaion.</p>
<h3 id="Measurement-Layout"><a href="#Measurement-Layout" class="headerlink" title="Measurement / Layout"></a>Measurement / Layout</h3><p>In order for Android to draw your view items on the screen, it executes two sepecific operations across layouts and views in your view hierarchy.</p>
<p>First, the system measures the view items. Every view and layout has specific data that describes the size of the object on the screen. Some views can have a specific size; others have a size that adapts to the size of the parent layout container.</p>
<p>Second, the system lays out the view item. Once the system calculates the sizes of children views, the system can proceed with layout, sizing and positioning the views on the screen.</p>
<p>The system perfrms measurement and layout not only for the views to be drawn, but also for the parent hierarchies of those views, all the way up to the root view.</p>
<p><code>When this segement is large</code></p>
<p>If your app spends a lot of time per frame in this area, it usually either because of the sheer volume of views that need to be laid out, or problems such as <a href="https://developer.android.com/topic/performance/optimizing-view-hierarchies.html#double" target="_blank" rel="noopener">double taxation</a> at the wrong spot in your hierarchy. In either of these cases, addressing performance involves <a href="https://developer.android.com/topic/performance/optimizing-view-hierarchies.html" target="_blank" rel="noopener">improving the proformance of your view hierarchies</a></p>
<p>Code that you’ve added to <code>onLayout(boolean, int, int, int, int)</code> or <code>onMeasure(int, int)</code> can also cause performace issues. <a href="https://developer.android.com/studio/profile/traceview.html" target="_blank" rel="noopener">TraceView</a> and <a href="https://developer.android.com/studio/profile/systrace.html" target="_blank" rel="noopener">Systrace</a> can help you examine the callstacks to identify problems your code may have.</p>
<h3 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h3><p>The draw stage translates a view’s rendering operations, such as drawing a background or drawing text, into a sequence of native drawing commands. The system captures these commands into a display list.</p>
<p>The Draw bar records how much time it takes to complete capturing the commands into the display list, for all the views that needed to be updated on the screen this frame. This measured time applies to any code that you have added to the UI objects in your app. Examples of such code may be the <code>onDraw()</code>, <code>dispatchDraw()</code> and the various <code>draw() methods</code> belonging to the subclasses of the <code>Drawable</code> class.</p>
<p><code>When this segment  is large</code></p>
<p>In simplified terms, you can understand this metric as showing how long it tooks to run all of the calls to <code>onDraw()</code> for each invalidated view. This measurement includes any time spent dispatching draw commands to children and drawable that may be present. For this reason, when you see this bar spike, the  cause could be that a bunch of views suddenly became invalidated. Invalidation makes it necessary to regenerate views’ display lists. Alertnatively, a lengthy time may be the result of a few custom views that have some extremely complex logic in their <code>onDraw()</code> method.</p>
<h3 id="Sync-upload"><a href="#Sync-upload" class="headerlink" title="Sync/upload"></a>Sync/upload</h3><p>The Sync &amp; Upload metric represents the time it takes to transfer bitmap objects from CPU memory to GPU memory during the current frame.</p>
<p>As different processors, the CPU and the GPU have different RAM areas dedicated to processing. When you draw a bitmap on Android, the system transfers the bitmap to GPU memory before the GPU can render it to the screen. Then, the GPU caches the bitmap so that the system doesn’t need to transfer the data again unless the texture gets evicted from the GPU texture cache.</p>
<p><code>When this segment is large</code></p>
<p>All resources for a frame need to reside in GPU memory before they can be used to draw a frame. This means that a high value for this metric could mean either a large number of small resource loads or a small number of very large resources.  A common case is when an app displays a single bitmap that’s close to the size of the screen. Another case is when an app displays a large number of thumbnails.</p>
<p>To shrink this bar, you can emply techniques such as :<br>    * Ensureing your bitmap resolutions are not much larger than the size at which they will be displayed. For example, your app should avoid displaying a 1024 * 1024 image as a 48 * 48 image.<br>    * Taking advantage of <code>prepareToDraw()</code> to asynchronously pre-upload a bitmap before the next sync phase.</p>
<p>Tips: On Lollipop devices, this stage is purple.</p>
<h3 id="Issue-commands"><a href="#Issue-commands" class="headerlink" title="Issue commands"></a>Issue commands</h3><p>The Issue Commands segment represents the time it takes to issue all of the commands necessary for drawing display lists to the screen.</p>
<p>For the system to draw display lists to the screen, it sends the necessary commands to the GPU. Typically, it performs this action through the <a href="https://developer.android.com/guide/topics/graphics/opengl.html" target="_blank" rel="noopener">OpenGL ES</a> API.</p>
<p>This process takes some time, as the system performs final transformation and clipping for each command before sending the command to the GPU. Additional overhead then arises on the GPU side, which computes the final commands. These commands include final transformations, adn additional clipping.</p>
<p><code>When this segement is large</code><br>The time spent in this stage is a direct measure of the complexity and quantity of display list that the system renders in a given frame. For example, having many draw operations, especially in cases where there’s a small inherent cost to each draw primitive, could inflate this time. For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    canvas.drawPoint()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>is a lot more expensive to issue than:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">canvas.drawPoints(thousandPointArray);</span><br></pre></td></tr></table></figure>

<p>There isn’t always a 1:1 correlation between issuing commands and actually drawing display lists. Unlike Issue Commands, which captures the time it takes to send drawing commands to the GPU, the Draw metric represents the time that it took to capture the issued commands into the display list.</p>
<p>This difference arises because the display lists are cached by the system wherever possible. As a result, there are situations where a scroll, transform, or animation requires the system to re-send a display list, but not have to acutally rebuild it-recapture the drawing commands- from scratch. As a result , you can see a hight <code>Issue Commands</code> bar without seeing a high Draw commands bar.</p>
<h3 id="Process-swap-buffers"><a href="#Process-swap-buffers" class="headerlink" title="Process/swap buffers"></a>Process/swap buffers</h3><p>Once Android finishes submitting all its display list to the GPU, the system issues one final command to tell the graphics driver that it’s done with the current frame. At this point, the driver can finally present the update image to the screen.</p>
<p><code>When this segment is large</code></p>
<p>It’s important to understant that the GPU executes work in parallel with the CPU. The Android system issues draw commands to the GPU, and the n moves on to the next task. The GPU reads those draw commands from a queue and processes them.</p>
<p>In situations where the CPU issues commands faster than the GPU consumes them, the communications queue between the processors can become full. When this occurs, the CPU blocks, and waits unitl there is space in the queue to place the next command. This full-queue state arises often during the <code>Swap buffers</code> stage, because at that point, a whole frame’s worth of commands have been submitted.</p>
<p>The key to mitigating this problem is to reduce the complexity of work occuring on the GPU, in similar fashion to what you would do for the <code>Issue Commands</code> phase.</p>
<h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><p>In addition to the time it takes the rendering system to perform its work, there’s an additional set of work that occurs on the main thread and has nothing to do with rendering.  Time that this work consumes is reported as <code>misc time</code>. Misc time generally represents work that might be occuring on the UI thread between two consecutive frames of rendering.</p>
<p><code>When this segment is large</code></p>
<p>If this value is high, it is likely your app has callbacks, intents, or other work that should be happening on another thread. Tools such <a href="https://developer.android.com/studio/profile/traceview.html" target="_blank" rel="noopener">Method tracing</a> or <a href="https://developer.android.com/studio/profile/systrace.html" target="_blank" rel="noopener">Systrace</a> can provide visibility into the tasks that are running on the main thread. This informaiton can help you target performance improvements.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android UI优化常用工具</title>
    <url>/posts/d96da03e/</url>
    <content><![CDATA[<ul>
<li>Analyze with Profile GPU Rendering</li>
<li>TraceView</li>
<li>Systrace</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-View的绘制流程</title>
    <url>/posts/5c71151a/</url>
    <content><![CDATA[<p>View的绘制流程是从<code>ViewRootImpl.java</code>中的<code>performTraversales()</code>函数开始的。</p>
<p>包括以下三个阶段</p>
<ul>
<li>measure</li>
<li>layout</li>
<li>draw</li>
</ul>
<h2 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h2><p>用于测量<code>view</code>的大小, <code>View</code>中的<code>measure</code>方法，接收2个参数, <code>widthMeasureSpec</code>和<code>heightMeasureSpec</code></p>
<p><code>MeasureSpec</code>由<code>specSize</code>和<code>specMode</code>构成，<code>specSize</code>表示大小, <code>specMode</code>表示规格, 有三种情况</p>
<ul>
<li>EXACTLY 表示父布局希望子布局的大小由specSize决定<ul>
<li>Measure specification mode: The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be.</li>
</ul>
</li>
<li>AT_MOST 表示子布局最大只能是specSize中指定的大小 <ul>
<li>Measure specification mode: The child can be as large as it wants up to the specified size.</li>
</ul>
</li>
<li>UNSPECIFIED 没有限制 <ul>
<li>Measure specification mode: The parent has not imposed any constraint on the child. It can be whatever size it wants. widthMeasureSpec和heightMeasureSpec由父view计算后传给子view, 也就是说父View在一定程度上决定子view的大小。</li>
</ul>
</li>
</ul>
<p>其中, rootView的measureSpec是这么来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);  </span><br><span class="line">    childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height); </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span>      rootDimension)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> measureSpec;  </span><br><span class="line">        <span class="keyword">switch</span> (rootDimension) &#123;  </span><br><span class="line">            <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:  </span><br><span class="line">                measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:  </span><br><span class="line">                measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> measureSpec;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  View.java</span><br><span class="line">  <span class="comment">// final的方法，不允许override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">      measure();</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">      setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">              getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  setMeasuredDimension()之后，getMeasuredWidht&amp;Height才有值，否则为<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h2><p>给视图进行布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">host.layout(<span class="number">0</span>, <span class="number">0</span>, host.mMeasuredWidth, host.mMeasuredHeight);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    onLayout(changed, l, t, r, b);</span><br><span class="line">    <span class="comment">// getWidth = r - l;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">View.java</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//View中是个空方法, 因为onLayout()过程是为了确定视图在布局中的位置，而这个操作应该有布局来完成.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ViewGroup.java</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="comment">// 也就是说ViewGroup子类必须重写这个方法</span></span><br></pre></td></tr></table></figure>

<p><code>view</code>在<code>onLayout()</code>之后，就可以调用<code>getWidth()</code>和<code>getHeight()</code>方法来获取<code>View</code>的宽高。</p>
<p>Tips: getWidth()和getMeasuredWidth()的区别</p>
<p>首先 <code>getMeasuredWidth()</code>方法在<code>measure()</code>过程结束后就可以获取到了，而<code>getWidth()</code>方法要在<code>layout()</code>之后才能拿到。另外, <code>getMeasuredWidth()</code>方法的值是通过<code>setMeasuredDimension()</code>方法进行设置的而<code>getWidth()</code>方法返回的值则是通过视图右坐标减去左坐标计算得到的。</p>
<h2 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a>onDraw</h2><p>绘制过程</p>
<p><code>invalidate()</code>方法虽然最终会调用到<code>performTraversals()</code>方法中。但这时<code>measure</code>和<code>layout</code>流程是不会重新执行的， 因为视图没有强制重新测量的标志，而且大小也没有发生过变化，所以这时只有<code>draw</code>流程执行。</p>
<p>而如果你希望视图的绘制流程可以完整的走一遍，就要使用<code>requestLayout()</code>而不是<code>invalidate()</code></p>
<p>每次绘制的时候并不会重新绘制所有的<code>View Tree</code>视图，而是去绘制需要重绘的(View内部的标示位DRAWN)</p>
<p>流程:</p>
<ol>
<li>绘制View背景</li>
<li>渐变框作准备???</li>
<li>onDraw()</li>
<li>dispatchDraw() 遍历每个子视图， 绘制子视图draw()</li>
<li>绘制滚动条</li>
</ol>
<p>View坐标系</p>
<p><img src="http://img-scions.test.upcdn.net/view.jpeg" alt="View坐标系"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-AsyncLayoutInflator原理</title>
    <url>/posts/7053c23b/</url>
    <content><![CDATA[<p>AsyncInflatInflator源码其实很简单。 </p>
<p>总结来说，就是开启一个线程，进行inflate操作，如果inflate失败，会调用原有线程的inflate操作. inflate成功后返回view, 没有attachToRoot, 需要自己去处理.<br>内部原理需要注意的地方，都以注释方式加上了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncLayoutInflater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"AsyncLayoutInflater"</span>;</span><br><span class="line"></span><br><span class="line">    LayoutInflater mInflater;</span><br><span class="line">    Handler mHandler;</span><br><span class="line">    InflateThread mInflateThread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncLayoutInflater</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 原来的inflater</span></span><br><span class="line">        mInflater = <span class="keyword">new</span> BasicInflater(context);</span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler(mhandlerCallback);</span><br><span class="line">        <span class="comment">// 单线程</span></span><br><span class="line">        mInflateThread = InflateThread.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UiThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resid, @Nullable ViewGroup parent, @NonNull OnInflateFinishedListener callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == callback) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"callback argument may not be null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        InflateRequest request = mInflateThread.obtainRequest();</span><br><span class="line">        request.inflater = <span class="keyword">this</span>;</span><br><span class="line">        request.resid = resid;</span><br><span class="line">        request.parent = parent;</span><br><span class="line">        request.callback = callback;</span><br><span class="line">        mInflateThread.enqueue(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnInflateFinishedListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onInflateFinished</span><span class="params">(@NonNull View view, @LayoutRes <span class="keyword">int</span> resid,</span></span></span><br><span class="line"><span class="function"><span class="params">                               @Nullable ViewGroup parent)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InflateRequest</span> </span>&#123;</span><br><span class="line">        AsyncLayoutInflater inflater;</span><br><span class="line">        ViewGroup parent;</span><br><span class="line">        <span class="keyword">int</span> resid;</span><br><span class="line">        View view;</span><br><span class="line">        OnInflateFinishedListener callback;</span><br><span class="line"></span><br><span class="line">        InflateRequest() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler.Callback mhandlerCallback = <span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            InflateRequest request = (InflateRequest)msg.obj;</span><br><span class="line">            <span class="keyword">if</span>(request.view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果inflate失败，会调用原来的inflater去inflate布局</span></span><br><span class="line">                <span class="comment">// 而且没有attachToRoot, 需要自己去处理返回的request.view</span></span><br><span class="line">                request.view = mInflater.inflate(request.resid, request.parent, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            request.callback.onInflateFinished(request.view, request.resid, request.parent);</span><br><span class="line">            mInflateThread.releaseRequest(request);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInflater</span> <span class="keyword">extends</span> <span class="title">LayoutInflater</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] sClassPrefixList = &#123;</span><br><span class="line">                <span class="string">"android.widget."</span>,</span><br><span class="line">                <span class="string">"android.webkit."</span>,</span><br><span class="line">                <span class="string">"android.app."</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        BasicInflater(Context context) &#123;</span><br><span class="line">            <span class="keyword">super</span>(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">cloneInContext</span><span class="params">(Context newContext)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BasicInflater(newContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> View <span class="title">onCreateView</span><span class="params">(String name, AttributeSet attrs)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String prefix : sClassPrefixList) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 不是很清楚这里</span></span><br><span class="line">                    View view = createView(name, prefix, attrs);</span><br><span class="line">                    <span class="keyword">if</span>(view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> view;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InflateThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InflateThread sInstance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            sInstance = <span class="keyword">new</span> InflateThread();</span><br><span class="line">            sInstance.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InflateThread <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sInstance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阻塞队列， 如果inflate request超过10个会阻塞</span></span><br><span class="line">        <span class="keyword">private</span> ArrayBlockingQueue&lt;InflateRequest&gt; mQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;InflateRequest&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象池， 不用多次创建对象，内存优化</span></span><br><span class="line">        <span class="keyword">private</span> Pools.SynchronizedPool&lt;InflateRequest&gt; mRequestPool = <span class="keyword">new</span> Pools.SynchronizedPool&lt;InflateRequest&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                runInner();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            InflateRequest request;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                request = mQueue.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                request.view = request.inflater.mInflater.inflate(request.resid, request.parent, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送给调用处的handler</span></span><br><span class="line">            Message.obtain(request.inflater.mHandler, <span class="number">0</span>, request).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InflateRequest <span class="title">obtainRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            InflateRequest obj = mRequestPool.acquire();</span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                obj = <span class="keyword">new</span> InflateRequest();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(InflateRequest request)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mQueue.put(request);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">"Failed to enqueue async inflate request"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseRequest</span><span class="params">(InflateRequest obj)</span> </span>&#123;</span><br><span class="line">            obj.callback = <span class="keyword">null</span>;</span><br><span class="line">            obj.inflater = <span class="keyword">null</span>;</span><br><span class="line">            obj.parent = <span class="keyword">null</span>;</span><br><span class="line">            obj.resid = <span class="number">0</span>;</span><br><span class="line">            obj.view = <span class="keyword">null</span>;</span><br><span class="line">            mRequestPool.release(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 抽象布局的使用</title>
    <url>/posts/db834188/</url>
    <content><![CDATA[<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li>include</li>
<li>merge</li>
<li>viewstub</li>
</ul>
<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>重用布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/layout_file"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以在<code>include</code>中指定<code>id</code>， 如果这样，会覆盖<code>layout_file</code>中的<code>id</code></p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>减少视图层级, 多用于替换<code>FramenLayout</code>或者当一个布局包含另一个时</p>
<p>Since the <code>FrameLayout</code> has the same dimension as its parent, by the virtue of using the <code>match_parent</code> constraints, and does not define any background, extra padding or a gravity, it is totally useless, we can use merge tag to replace it. (也就是说，当前布局根布局如果使用的是<code>Framelayout</code>而且与父布局完全一致，那么当前这层布局的根布局就可以省略，使用<code>merge</code>代替)</p>
<p>When the <code>LayoutInflater</code> encounters this tag, it skips it and adds the <code>&lt;merge/&gt;</code> children to the <code>&lt;merge/&gt;</code> parent. (当<code>LayoutInflater</code>解析<code>xml</code>时，如果遇到了<code>merge</code>标签，那么他会忽略这个标签，而是把他的子布局添加到他的父布局里，具体参见<a href>setContentView与LayoutInflater加载解析机制源码解析</a>)</p>
<p>You can’t use this trick if your layout was using a <code>LinearLayout</code> as its root tag. (根布局使用<code>LinearLayout</code>的时候不能用merge替代)</p>
<p><code>&lt;merge&gt;</code> can only be used as the root tag of an XML layout.(<code>merge</code>标签只能用于根布局)</p>
<p>When inflating a layout starting with a <code>&lt;merge/&gt;</code>, you must specify a parent ViewGroup and you must set attachToRoot to true.(使用<code>LayoutInflater</code>解析<code>xml</code>时，如果<code>xml</code>以<code>merge</code>开始，你必须在解析时指定<code>parent viewgroup</code>和<code>attachToRoot = true</code>)</p>
<h2 id="viewstub"><a href="#viewstub" class="headerlink" title="viewstub"></a>viewstub</h2><p>需要的时候才加载</p>
<p>It has no dimension, it does not draw anything and does not participate in the layout in any way.</p>
<p><code>ViewStub</code>只能<code>inflate</code>一次，之后<code>ViewStub</code>对象就会被置为空, 换句话说，某个被<code>ViewStub</code>指定的布局被<code>inflate</code>后，就不能再通过<code>ViewStub</code>来控制它了.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span>&gt;</span></span><br><span class="line">  android:id=""</span><br><span class="line">  android:layout="to refreence what layout file to include and inflate"</span><br><span class="line">  android:inflatedId="can be used to override the id of the root of the included file"</span><br><span class="line"><span class="tag">&lt;/<span class="name">ViewStub</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>When you are ready to inflate the stub, simply invoke the inflate() method. you can also simply change the visiblity of the stub to VISIBLE or INVISIBLE and the stub will inflate.(使用的时候，你可以通过<code>inflate()</code>方法来加载这个布局，也可以简单的通过设置 <code>VISIBLE</code>和<code>INVISIBLE</code>来控制)</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Java- 《Java编程的逻辑》_容器类</title>
    <url>/posts/290d3103/</url>
    <content><![CDATA[<h2 id="Collections子接口"><a href="#Collections子接口" class="headerlink" title="Collections子接口"></a>Collections子接口</h2><p><img src="http://img-scions.test.upcdn.net/Collection.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-《Java编程的逻辑》- 并发</title>
    <url>/posts/c8a24b3d/</url>
    <content><![CDATA[<h1 id="并发总结"><a href="#并发总结" class="headerlink" title="并发总结"></a>并发总结</h1><p>多线程2个核心问题， <code>竞争</code>和<code>协作</code></p>
<ul>
<li><p>竞争 -&gt; 线程安全的机制</p>
<ul>
<li>synchronized</li>
<li>显示锁</li>
<li>volatile</li>
<li>原子变量和CAS</li>
<li>写时复制 CopyOnWriteArrayList, 讲共享变量变成只读的，写的时候再需要锁, 写的线程不是直接修改原对象，而是创建一个对象，对该对象修改完毕后再原子性的修改共享访问的变量，让他指向新的对象</li>
<li>ThreadLocal</li>
</ul>
</li>
<li><p>协作 -&gt; 线程的协作</p>
<ul>
<li>wait/notify</li>
<li>显示条件</li>
<li>线程的中断</li>
<li>协作工具类 Semaphore, CountDownLatch, CyclicBarrier</li>
<li>并发队列</li>
<li>Future/FutureTask</li>
</ul>
</li>
<li><p>容器类</p>
<ul>
<li>写时复制的List&amp;Set</li>
<li>ConcurrentHashMap</li>
<li>基于SkipList的Map &amp; Set</li>
</ul>
</li>
<li><p>任务执行服务</p>
<ul>
<li>Runnable, Callable, Executor, ExecutorService, Future etc</li>
<li>线程池</li>
<li>定时任务</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>Java7引入的Fork&amp;Join</li>
<li>Java8并行流</li>
<li>CompletionService</li>
<li>Java8引入的CompletableFuture</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>线程表示一条单独的执行流，他有自己的程序计数器，有自己的栈.</p>
<p>Que: 为什么调用的是start, 执行的却是run呢?<br>Ans: start表示启动该线程，使其成为一条单独的执行流，操作系统会分配线程相关的资源, 每个线程都会有单独的程序计数器和栈，操作系统会把这个线程作为一个独立的个体进行调度，分配时间片让他执行，执行的起点就是run方法 。</p>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>通过<code>public State getState()</code>获取，有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">	NEW, <span class="comment">//没有调用start的线程</span></span><br><span class="line">	RUNNABLE, <span class="comment">//调用start后的线程且没有阻塞时的状态</span></span><br><span class="line">	BLOCKED, </span><br><span class="line">	WAITING,</span><br><span class="line">	TIMED_WAITING,</span><br><span class="line">	TERMINATED <span class="comment">//运行结束后的状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// BLOCKED, WAITING, TIMED_WAITING都是阻塞时的状态</span></span><br></pre></td></tr></table></figure>

<p>通过<code>public final boolean isAlive()</code>获取线程是否活着，启动后，run运行完之前都是alive</p>
<h3 id="deamon线程"><a href="#deamon线程" class="headerlink" title="deamon线程"></a>deamon线程</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Thread.sleep. 让当前线程睡眠指定时间，但这个时间不一定是确切的给定毫秒数。与系统精度有关。 睡眠期间，线程可以被中断，如果被中断，sleep会抛出InterruptedException<br>Thread.yield. 让出CPU, 告诉CPU当前线程不着急占用CPU,不可以依赖此方法<br>Thread.join. 可以让调用join的线程等待该线程结束。join() -&gt; waits for this thread to die</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">	Thread thread = <span class="keyword">new</span> HelloWorldThread();</span><br><span class="line">	thread.start();</span><br><span class="line">	thread.join();  <span class="comment">// main线程等待thread执行完后才结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https:<span class="comment">//blog.csdn.net/programmer_at/article/details/78934278</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> ChildThread(list);</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> ChildThread(list);</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       t1.join(); <span class="comment">//这里t1和t2会轮流执行，而不是t2在t1执行完后再执行，因为join阻塞的是这个join方法调用所在的线程，也就是main线程</span></span><br><span class="line">       t2.join();</span><br><span class="line">       System.out.println(shared);</span><br><span class="line">       System.out.println(list);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="竞争"><a href="#竞争" class="headerlink" title="竞争"></a>竞争</h2><p>多条执行流操作相同变量的时候会出现一些异常问题:</p>
<ul>
<li>竞态条件 race condition</li>
<li>内存可见性问题   都个线程可以共享访问和操作相同的变量，但一个线程对一个共享变量的修改，另一个线程不一定可以马上就能看到，甚至永远看不到。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g 内存可见性问题</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisiblityDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> shutdown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       	<span class="meta">@Override</span></span><br><span class="line">       	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           	<span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line"></span><br><span class="line">           	&#125;</span><br><span class="line">           	System.out.println(<span class="string">"exit hello"</span>);</span><br><span class="line">       	&#125;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       	<span class="keyword">new</span> HelloWorld().start();</span><br><span class="line">       	Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       	shutdown = <span class="keyword">true</span>;</span><br><span class="line">       	System.out.println(<span class="string">"exit main"</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">期望结果HelloThread在shutdown为<span class="keyword">true</span>的时候结束并输出exit hello, main结束并输出exit main</span><br><span class="line">实际执行时候可能发现, HelloThread永远都不会退出，也就是HelloThread执行流看shutdown永远为<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">内存可见性问题: 在计算机系统中，除了内存，数据还会被缓存在CPU的寄存器以及各级缓存中，当访问一个变量的时候，可能直接从寄存器或CPU缓存中获取，而不一定到内存中去取，当修改一个变量时，也可能是先写到缓存中，稍后才会同步更新到内存中。在单线程的程序里，这一般不是问题，但是在多线程程序里，尤其是在有多CPU的情况下，一个线程对内存的修改，另一个线程看不到，一是修改没有及时同步到内存，二是另一个线程根本没有从内存里读取。</span><br><span class="line"></span><br><span class="line">解决方法:</span><br><span class="line">	<span class="number">1</span>. 使用volitile关键字</span><br><span class="line">	<span class="number">2</span>. 使用<span class="keyword">synchronized</span>关键字或者显示锁同步。</span><br></pre></td></tr></table></figure>

<p>线程调度和切换是有成本的. 一个线程被切换出去后，操作系统需要保存它的当前上下文状态到内存，上下文状态包括当前CPU寄存器的值,程序计数器的值等，而一个线程被切换回来后，OS需要恢复它原来的上下文状态，整个过程称为 <code>上下文切换</code>， 这个切换不仅耗时，而且使CPU中的很多缓存失效. </p>
<p>如果执行的任务是CPU密集型的，即主要消耗的都是CPU，那创建超过CPU数量的线程就是没有必要的，并不会加快程序的执行。</p>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p><code>synchronized实例方法</code> 实际保护的是同一个对象的方法调用，确保同时只能有一个线程执行。 或者说，<code>synchronized实例方法</code>保护的是当前实例对象, 即this对象, this对象有一个锁和一个等待队列， 锁只能被一个线程持有，其他试图获得同样的锁的线程需要等待。 过程大致如下:</p>
<ol>
<li>尝试获取锁，如果获取到了，进行下一步，否则加入等待队列阻塞并等待被唤醒</li>
<li>执行实例方法体代码</li>
<li>释放锁，如果等待队列上有等待的线程，从中选取一个进行唤醒，如果有多个线程等待，唤醒哪个是不确定的，不保证公平性，也就是不保证等待久的先被唤醒</li>
</ol>
<p>synchronized不能防止非synchronized方法被同时执行，因此，一般在保护变量时， 需要在所有访问该变量的方法上加上synchronized。</p>
<p>synchronized同步的对象可以是任意对象，任意对象都有一个锁和等待队列。</p>
<p>synchronized特性：</p>
<ul>
<li>可重入性, 对同一个执行线程，他在获得了锁之后，在调用其他需要同样锁的代码时，可以直接调用，比如，在一个synchronized实例方法内，可以直接调用其他synchronized实例方法。但是并不是所有的锁都是可重入的。 可重入锁是通过记录锁的持有线程和持有数量来实现的， 当调用被synchronized保护的代码时，检查对象是否已被锁，如果是，再检查是否被当前线程锁定，如果是，增加持有数量，如果不是被当前线程锁定，才加入等待队列，释放锁时，减少持有数量，当数量变为0才释放整个锁。</li>
<li>内存可见性。释放锁时，所有写入都会写回内存，获取锁后，都会从内存里读取最新数据, 但是只是为了保证内存可见性，使用synchronized成本有点高，使用轻量级的volitile就可以了</li>
</ul>
<p>死锁，A等待B的锁释放，B等待A的锁释放导致，AB陷入互相等待。所以应该避免在持有一个锁的同时去申请另一个锁，如果确实需要多个锁，所有代码都应该按照相同的顺序去申请。或者使用显示锁Lock, 它支持tryLock和带时间限制的获取锁的方法来避免死锁</p>
<h3 id="显示锁"><a href="#显示锁" class="headerlink" title="显示锁"></a>显示锁</h3><p>锁接口 Lock, 主要实现类ReentrantLock<br>读写锁接口ReadWriteLock, 主要实现类ReentrantReadWriteLock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>/<span class="title">unlock</span><span class="params">()</span></span>;   普通的获取锁和释放锁, lock会阻塞直到成功</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InteruptedException</span>; 可以响应中断的lock, 如果被其他线程中断了，会抛出InterruptedException</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>; 尝试获取锁，立即返回，不阻塞，成功返回<span class="keyword">true</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>; 先尝试获取锁 如果成功立即返回<span class="keyword">true</span>, 否则阻塞等待time时间，会响应中断</span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>; 新建一个条件, 一个lock可以关联多个条件</span><br></pre></td></tr></table></figure>

<p>相比synchronized, lock可以以非阻塞的形式获取锁，响应中断，限时，更加灵活</p>
<h3 id="可重入锁-ReentrantLock"><a href="#可重入锁-ReentrantLock" class="headerlink" title="可重入锁 ReentrantLock"></a>可重入锁 ReentrantLock</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span></span>; <span class="comment">//是否保证公平，默认为false. 公平表示，等待最长的线程优先获取锁，这个机制会影响性能，默认不保证</span></span><br></pre></td></tr></table></figure>

<p>一般把lock之后的代码放入try中，finally里释放锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	counter++;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tryLock<br>使用tryLock()可以避免死锁，在持有一个锁获取另一个锁而获取不到的时候，可以释放已有的锁，给其他线程获取锁的机会，然后重试获取所有锁</p>
<p>ReentrantLock实现原理<br>依赖CAS方法以及LockSupport类中的一些方法. //TODO 未细看</p>
<p>synchronized代表一种声明式编程思维，显示锁代表一种命令式编程思维。 简单总结就是能用synchronized就用synchronized,不满足条件是再考虑ReentrantLock</p>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><h3 id="原子变量和CAS"><a href="#原子变量和CAS" class="headerlink" title="原子变量和CAS"></a>原子变量和CAS</h3><p>对于使用synchronized来保证原子更新操作的成本太高了，一些情况下可以直接使用原子变量代替</p>
<p>AutomicBoolean , AtomicInteger, AtomicLong, AtomicReference等等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                counter.incrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Visitor();</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            threads[i].join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counter.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里总是会输出正确结果 1000000</span></span><br></pre></td></tr></table></figure>

<p>原理如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主要内部成员为:</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; ;) &#123;</span><br><span class="line">		<span class="keyword">int</span> current = get();</span><br><span class="line">		<span class="keyword">int</span> next = current + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(compareAndSet(current, next)) &#123;</span><br><span class="line">			<span class="keyword">return</span> next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">先调取当前值current, 计算期望值next, 然后调用CAS进行更新，如果更新没有成功，说明value被别的线程更改了，则再去取最新值并尝试更新直到成功为止。</span><br><span class="line">一般应用程序不应该直接调用CAS, 原理上一般的操作系统在硬件层次上都支持CAS指令 </span><br><span class="line">具体CAS解析 </span><br><span class="line">CAS有<span class="number">3</span>个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">    * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true if successful. False return indicates that</span></span><br><span class="line"><span class="comment">    * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   这里的<span class="keyword">this</span>结合valueOffset则就是AtomicInteger的实际值，而current是线程修改时用到的初值，如果实际值和初值一致，则说明当前并没有人修改AtomicInteger，故当前修改有效，那么就可以继续赋值为update。</span><br></pre></td></tr></table></figure>

<p>synchronized是悲观的，假定更新很可能冲突，所以先获取锁，得到锁后才更新，是一种阻塞式算法。 原子变量的更新逻辑是乐观的，假定冲突比较少，即使又冲突，继续尝试就好了。是非阻塞式的，性能高于synchronized</p>
<p>Java提供的非阻塞式容器:</p>
<ul>
<li>ConcurrentLinkedQueue &amp; ConcurrentLinkedDeque</li>
<li>ConcurrentSkipListMap &amp; ConcurrentSkipListSet</li>
</ul>
<p>CAS的方式有一个ABA的问题，就是当前值为A被另一个线程先修改为B再修改为A，当前线程CAS操作无法分辨当前值是否发生过变化。 ABA一般不是问题，如果确实有需要可以使用AtomicStampedReference， 在修改值的时候附加一个时间戳</p>
<h3 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h3><ul>
<li>线程安全， 可以被多个线程并发访问</li>
<li>迭代器不支持修改操作，但也不会抛出ConcurrentModificaitonException</li>
<li>以原子方式支持一些符合操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addIfAbsent</span><span class="params">(E e)</span> <span class="comment">//不存在才添加, 添加返回true</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAllAbsent</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">//批量添加C中的非重复元素，不存在才添加，返回实际添加个数</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CopyOnWriteArrayList内部是一个数组，但是这个数组以原子方式被整体更新的。 每次修改操作， 都会新建一个数组，复制原数组的内容到新数组， 在新数组上进行需要的更改，然后以原子方式设置内部的数组引用， 这就是写时复制。<br>所有的读操作，都是先拿到当前引用的数组，然后直接访问该数组， 读的过程中， 可能内部的数据已经被修改了，但不会影响读操作，读的依旧是原数组内容</p>
<p>读不需要锁， 可以并行， 读和写也可以并行，但不能多个线程同时写，同时写需要锁</p>
<p>CopyOnWriteArrayList性能很低， 不适用于数组很大且修改频繁的场景.</p>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>每一个线程都有个map, 对于每个ThreadLocal对象，调用其get/set实际上就是以ThreadLocal对象为key读写当前线程的map</p>
<h2 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h2><p>线程协作的场景:</p>
<ul>
<li>生产者/消费者协作模式</li>
<li>同时开始</li>
<li>等待结束 主从协作模式，主线程讲任务分解为若干任务，主线程再继续执行其他任务前需要等待这些子线程执行完毕</li>
<li>异步结果 主从协作模式中，主线程手动创建自线程的写法比较麻烦，常见的模式时将子线程的管理封装为异步调用，异步调用完马上返回，但返回的不是最终结果而是Future的对象，通过它可以在随后获取最终结果</li>
<li>集合点 每个线程负责一部分计算，在集合点等待其他线程完成，等到齐后，交换数据和计算结果在进行下一次的迭代。</li>
</ul>
<h3 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait/notify"></a>wait/notify</h3><p>线程协作的基本机制是wait/notify</p>
<p>wait() 也就是 wait(0)表示无限期等待， 在等待期间都可以被中断，如果被中断，会抛出InterruptedException.</p>
<p>wait原理:<br>每个对象都有一把锁和等待队列，一个线程在进入synchronized代码块时会尝试获取锁，如果获取不到会把当前线程加入等待队列中，其实，除了锁的等待队列，每个对象还有另一个等待队列，表示条件队列，该队列用于线程的协作。 调用wait会把当前线程放到条件队列上并阻塞，表示当前线程执行不下去，需要等待一个条件，这个条件需要其他线程来更改，调用对象的notify, notify做的事情就是从条件队列里选一个线程，并将其从队列中移除并唤醒，notify和notifyAll的区别就是notifyAll会移除对象条件队列所有的线程并全部唤醒</p>
<p>调用wait/notify方法时， 当前线程没有持有对象锁，会抛出java.lang.IllegalMonitor-StateException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> fire = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   	 	<span class="meta">@Override</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">try</span> &#123;</span><br><span class="line">            	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                	<span class="keyword">while</span>(!fire) &#123;</span><br><span class="line">                    	wait();</span><br><span class="line">                	&#125;</span><br><span class="line">            	&#125;</span><br><span class="line">            	System.out.println(<span class="string">"fired"</span>);</span><br><span class="line">        	&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        	&#125;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">this</span>.fire = <span class="keyword">true</span>;</span><br><span class="line">        	notify();</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        	WaitThread waitThread = <span class="keyword">new</span> WaitThread();</span><br><span class="line">        	waitThread.start();</span><br><span class="line">        	Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        	System.out.println(<span class="string">"fire"</span>);</span><br><span class="line">        	waitThread.fire();</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Question: wait在synchronized保护中， 第一个线程在wait时，另一个线程怎么能调用到同在synchronized保护的notify方法呢?<br>Answer:</p>
<p>wait的具体过程是 :</p>
<ol>
<li>把当前线程放入条件等待队列，释放对象锁，阻塞等待，线程状态变为WAITING或TIMED_WAITING</li>
<li>等待时间到或者被其他线程调用notify/notifyAll从条件队列中移除，这时要重新竞争对象锁<ul>
<li>如果能够获得锁，线程状态变为RUNNABLE, 并从wait调用中返回</li>
<li>否则，该线程加入对象锁的等待队列，线程状态变为BLOCKED, 只有获取锁后才会从wait调用返回</li>
</ul>
</li>
</ol>
<p>调用notify会把条件队列中等待的线程唤醒并从队列中移除，但他不会释放对象锁，也就是说，只有在包含notify的synchronized代码块执行完后，等待的线程才会从wait调用中返回</p>
<p>wait/notify它们被不同的线程调用，但共享相同的锁和条件等待队列（相同对象的synchronized代码块里),它们围绕一个共享的条件变量进行协作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;E&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">        queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;(limit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.size() == limit) &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.add(e);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        E e = queue.poll();</span><br><span class="line">        notifyAll();</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>局限性, 只能有一个条件等待队列。</p>
<p>Java提供了专门的阻塞队列实现</p>
<ul>
<li>接口BlockingQueue和BlockingDequeue</li>
<li>基于数组的实现类ArrayBlockingQueue</li>
<li>基于链表的实现类LinkedBlockingQueue 和 LinkedBlockingDeque</li>
<li>基于堆的实现类PriorityBlockingQueue</li>
</ul>
<p>实际上join就是调用了wait实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!isAlive()) &#123;</span><br><span class="line">	wait(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要线程是活着的，join就一直等待，当线程运行结束后，Java系统调用notifyAll来通知</p>
<h3 id="显示条件"><a href="#显示条件" class="headerlink" title="显示条件"></a>显示条件</h3><p>锁用于解决竞态条件问题，条件是线程间的协作机制。 显示锁与synchronized相对应， 显示条件与wait/notify相对应。 wait/notify与synchronized配合使用，显示条件与显示锁配合使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock接口定义创建条件方法</span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">awaitUninterruptibly</span><span class="params">()</span></span>; <span class="comment">//其他均响应中断，此方法不响应中断</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="title">awaitNanos</span><span class="params">(<span class="keyword">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">awaitUntil</span><span class="params">(Date deadline)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">signalAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// await与wait对应, 调用await方法前需要先获取锁, 没有的话会抛异常IllegalMonitorStateException, await进入等待队列后会释放锁，释放CPU, 当其他线程将它唤醒后，或者等待超时后，或者发生中断异常后，它都需要重新获取锁，获取锁之后，才会从await方法中退出</span></span><br><span class="line"><span class="comment">// signal对于notify</span></span><br></pre></td></tr></table></figure>

<p>ReentrantLock Condition的实现原理 // TODO….</p>
<h3 id="线程的中断"><a href="#线程的中断" class="headerlink" title="线程的中断"></a>线程的中断</h3><p>Java中，停止一个线程的主要机制是中断，中断并不是强迫终止一个线程，它是一种协作机制，是给线程传递一个取消信号，但是由线程来决定如何以及何时退出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>每一个线程都有一个标志位, 表示该线程是否被中断了.</p>
<ol>
<li>isInterrupted 返回对应线程的中断标志位是否为true</li>
<li>interrupted 返回当前线程的中断标志位是否为true, 并且 清空中断标志位</li>
<li>interrupt 表示中断对应的线程</li>
</ol>
<p>中断对线程的意义与线程的状态和正在进行的IO操作有关。这里我们主要考虑线程的状态</p>
<ul>
<li>RUNNABLE : 线程在运行或具备运行条件，只是在等待操作系统调度<br>  interrupt()只是会设置线程的中断标志位，没有其他作用，线程应该自身在合适位置检查中断标志位</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">run() &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">		<span class="comment">// do something....</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>WAITING/TIMED_WAITING: 线程在等待某个条件或超时<br>  线程调用join/wait/sleep方法会进入WAITING/TIMED_WAITING状态，这些状态时，对线程调用interrupt()会使得该线程抛出InteruptedException, 需要注意的是， 抛出异常后，中断标志位会被清空而不是被设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">	run() &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1999</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">			System.out.println(isInterrupted()) <span class="comment">//...返回false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BLOCKED 线程在等待锁，试图进入同步块 </p>
<p>  线程在等待锁，对线程对象调用interrupted()只是会设置线程的中断标志位，线程依然会处于BLOCKED状态</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">INterruptSynchronizedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"exit"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line">            a.start();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            a.interrupt();</span><br><span class="line">            a.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里线程A进入锁等待队列，随后test调用a的interrupted并不会结束a, 在使用synchronized关键字获取锁的过程中不响应中断请求，这也是synchronized的局限性</p>
<ul>
<li><p>NEW/TERMINATED 线程还未启动或已结束</p>
<p>  interrupted()对他没有任何影响，中断标志位也不会设置</p>
</li>
</ul>
<h3 id="协作工具类"><a href="#协作工具类" class="headerlink" title="协作工具类"></a>协作工具类</h3><ul>
<li>ReentrantReadWriteLock 在读多写少的场景里使用ReentrantReadWriteLock替代ReentrantLock提高性能</li>
<li>Semaphore 限制对资源的并发访问数</li>
<li>CountDownLatch 实现不同角色线程间的同步</li>
<li>CyclicBarrier 实现同一角色线程间的协调一致</li>
</ul>
<h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><p>// TODO…<br>无锁非阻塞并发队列: ConcurrentLinkedQueue &amp; ConcurrentLinkedDequeue<br>普通阻塞队列: 基于数组的ArrayBlockingQueue, 基于链表的LinkedBlockingQueue, LinkedBlockingDequeue<br>优先级阻塞队列: PriorityBlockingQueue<br>延时阻塞队列: DelayQueue<br>其他阻塞队列: SynchronousQueue &amp; LinkedTransferQueue</p>
<h2 id="并发容器类"><a href="#并发容器类" class="headerlink" title="并发容器类"></a>并发容器类</h2><h3 id="CopyOnWriteList"><a href="#CopyOnWriteList" class="headerlink" title="CopyOnWriteList"></a>CopyOnWriteList</h3><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>ConcurrentHashMap是HashMap的并发版本</p>
<ul>
<li>并发安全</li>
<li>支持一些原子复合操作</li>
<li>支持高并发， 读操作完全并行， 写操作一定程度上的并行</li>
<li>弱一致性</li>
</ul>
<p>Hashmap不是并发安全， 在并发更新的情况下可能会出现死循环，占满CPU<br>-&gt; Java7 HashMap死循环 TODO<br>-&gt; Java8 优化后减少了死循环的可能，但是扩容的时候仍然会死循环 TODO</p>
<p>-&gt; ConcurrentHashMap原理 TODO</p>
<h3 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h3><p>HashMap/HashSet基于哈希，不能对元素排序，对应的可排序的容器为TreeMap/TreeSet, 其对应的并发版本为 ConcurrentSkipListMap, ConcurrentSkipListSet<br>TreeSet是基于TreeMap实现的, ConcurrentSkipListSet也是基于ConcurrentSkipListMap实现.<br>ConcurrentSkipListMap是基于SkipList实现.<br>-&gt; 原理 TODO</p>
<h2 id="任务执行服务"><a href="#任务执行服务" class="headerlink" title="任务执行服务"></a>任务执行服务</h2><p>Thread即表示要执行的任务，又表示执行机制。Java并发包提供了一套框架，大大简化了执行异步任务所需的开发， 讲“任务的提交”和“任务的执行”分离。</p>
<ul>
<li>Runnalble 和 Callable: 表示要执行的异步任务 (Runnable没有返回结果，Callable有返回结果, Runnable不会抛出异常，Callable会)</li>
<li>用于执行异步任务的接口Executor, 以及有更多功能的子接口ExecutorService</li>
<li>表示异步结果的接口Future和实现类FutureTask</li>
<li>用于创建Executor和ExecutorService的工厂方法类Executors</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">executor</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">            &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line">            &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line">            Future&lt;?&gt; submit(Runnable task);</span><br><span class="line">            <span class="comment">//....</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过Future可以查询异步任务的状态，获取最终结果，取消任务等...</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">            <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get()用于返回异步任务的结果，如果还没有结果，会阻塞. 可以指等待时间，超时会抛TimeoutException</span></span><br><span class="line">            <span class="comment">// cancel()用于取消异步任务, 如果任务已完成或者已取消，或不能取消，cancel返回false, 否则为 true</span></span><br><span class="line">            <span class="comment">// 如果任务还未开始，cancel后则不再运行, 如果已经运行，则不一定能取消，参数mayInterruptIfRunning表示如果任务正在执行，是否调用interrupt()中断线程, false不会</span></span><br><span class="line">            <span class="comment">// idDone表示任务是否结束，不管什么原因的结束都是true</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// get有三种结果</span></span><br><span class="line">            <span class="comment">// 1. 正常完成，返回执行结果，如果是Runnable或者且没提供结果，返回null</span></span><br><span class="line">            <span class="comment">// 2. 任务执行抛出异常, get会讲异常包装为ExecutionException重新抛出, 通过getCause方法获取原异常</span></span><br><span class="line">            <span class="comment">// 3. 任务被取消, get会抛出异常InterruptedException</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>; <span class="comment">// 不再接受新任务，已提交的任务会继续执行，即使任务还未开始执行</span></span><br><span class="line">            <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>; <span class="comment">// 不仅不接受新任务， 而且终止已经提交但没执行的任务，对于正在执行的，会调用线程interrupt()来尝试中断， 返回已提交但没执行的任务列表</span></span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>; <span class="comment">//调用shutdown或shutdownNow不代表所有任务都结束了，但是isShutdown会返回true</span></span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="comment">// invokeAll等待所有任务完成</span></span></span><br><span class="line"><span class="function">            <span class="comment">// invokeAny 只要有一个任务在限时内返回，就会返回该任务结果, 其他任务会被取消</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">            &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">            &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">            &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">            &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### ThreadPoolExecutor ###</span><br><span class="line">```java</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, //核心线程个数</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize, //最大线程个数</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime, //空闲线程存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,//空闲线程存活时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,   //用于对创建的线程的一些配置</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> <span class="comment">// 表示任务拒绝策略</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    新任务到来时，如果当前线程个数小于corePoolSize， 就会创建一个新线程来执行该任务, 即使其他线程现在为空，也会创建新线程。 </span></span><br><span class="line"><span class="function">    如果线程个数&gt;</span>= corePoolSize, 就不会立即创建线程，而是先尝试排队（不是阻塞等待入队), 如果入队不了，就创建线程直到达到maximumPoolSize</span><br><span class="line"></span><br><span class="line">    BlockingQueue:</span><br><span class="line">    <span class="number">1</span>. LinkedBlockingQueue: 基于链表的阻塞队列，可以指定最大长度，默认无界</span><br><span class="line">    <span class="number">2</span>. ArrayBlockingQueue: 基于数组的有界阻塞队列</span><br><span class="line">    <span class="number">3</span>. PriorityBlockingQueue 基于堆的无界阻塞优先级队列</span><br><span class="line">    <span class="number">4</span>. SynchronousQueue: 没有实际存储空间的通不阻塞队列</span><br><span class="line"></span><br><span class="line">    任务拒绝策略:</span><br><span class="line">    <span class="number">1</span>. ThreadPoolExecutor.AbortPolicy 默认方式，抛出异常</span><br><span class="line">    <span class="number">2</span>. ThreadPoolExecutor.DiscardPolicy  静默处理，忽略新任务，不抛异常不执行</span><br><span class="line">    <span class="number">3</span>. ThreadPoolExecutor.DiscardOldestPolicy 等待时间最长的任务扔掉</span><br><span class="line">    <span class="number">4</span>. ThreadPoolExecutor.CallerRunsPolicy 将任务提交者线程中执行任务，而不是交给线程池中的线程执行</span><br></pre></td></tr></table></figure>

<h3 id="工厂类Executors"><a href="#工厂类Executors" class="headerlink" title="工厂类Executors"></a>工厂类Executors</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">其中newSingleThreadExecutor相当于</span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingDeque&lt;Runnable&gt;());</span><br><span class="line"></span><br><span class="line">newFixedThreadPool</span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;())</span><br><span class="line"></span><br><span class="line">newCachedThreadPool</span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;())</span><br><span class="line">当新的任务来时，如果正好有空闲线程在等待任务，则其中一个空闲线程接受该任务，否则总是创建一个新线程， 对于空闲线程，如果<span class="number">60</span>s内没有接受新任务就中止</span><br></pre></td></tr></table></figure>

<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><h4 id="Timer-amp-TimerTask"><a href="#Timer-amp-TimerTask" class="headerlink" title="Timer &amp; TimerTask"></a>Timer &amp; TimerTask</h4><p>Tips: 固定延时fixed-delay 与固定频率 fixed-rate.<br>固定延时，是基于上次任务的实际执行时间来计算<br>固定频率会尽力补够运算次数</p>
<p>一个 Timer只有一个Timer线程， 在执行任何一个任务的run方法时，一旦run抛出异常，Timer线程就会退出，从而所有的任务都会被取消</p>
<h4 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h4><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ul>
<li>Java7引入的Fork&amp;Join</li>
<li>Java8并行流</li>
<li>CompletionService</li>
<li>Java8引入的CompletableFuture</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 动画原理分析</title>
    <url>/posts/4ea354ae/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/131faec834d1" target="_blank" rel="noopener">https://www.jianshu.com/p/131faec834d1</a><br><a href="https://www.jianshu.com/p/2f19fe1e3ca1" target="_blank" rel="noopener">https://www.jianshu.com/p/2f19fe1e3ca1</a></p>
<p>本文将从一个实际问题出发，带领大家分析Android动画的原理(<code>ValueAnimator</code>), 以及动画集合(<code>AnimatorSet</code>)在不同平台上的不一样的组织形式。</p>
<p>Contents:</p>
<ul>
<li>一段代码在不同设备上的不同表现<ul>
<li>代码</li>
<li>Android23上的表现</li>
<li>Android24上的表现</li>
<li>现象描述</li>
</ul>
</li>
<li>动画源码分析<ul>
<li>ValueAnimator源码分析</li>
<li>AnimatorSet源码分析(based on Android 23)</li>
<li>AnimatorSet源码分析(based on Android 24)</li>
</ul>
</li>
<li>回归问题，导致不同表现的原因</li>
</ul>
<h2 id="一段代码在不同设备上的不同表现"><a href="#一段代码在不同设备上的不同表现" class="headerlink" title="一段代码在不同设备上的不同表现"></a>一段代码在不同设备上的不同表现</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mFirstValueAnimator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">2000</span>);</span><br><span class="line">mFirstValueAnimator.setDuration(<span class="number">1000</span>);</span><br><span class="line">mFirstValueAnimator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">mFirstValueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"first anim onAnimationUpdate..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mFirstValueAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"first anim onAnimationStart..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"first anim onAnimationEnd...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"first anim onAnimationCancel..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"first anim onAnimationRepeat..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mFirstValueAnimator.start();</span><br><span class="line">Debug.i(TAG, <span class="string">"first anim anim start...."</span>);</span><br><span class="line"></span><br><span class="line">mSecondValueAnimator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">2000f</span>);</span><br><span class="line">mSecondValueAnimator.setDuration(<span class="number">1000</span>);</span><br><span class="line">mSecondValueAnimator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">mSecondValueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"second anim onAnimationUpdate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mSecondValueAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"second anim onAnimationStart..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"second anim onAnimationEnd...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"second anim onAnimationCancel..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"second anim onAnimationRepeat..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">set.setDuration(<span class="number">500</span>);</span><br><span class="line">set.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"animatorSet start..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"animatorSet end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"animatorSet cancel..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Debug.i(TAG, <span class="string">"animatorSet repeat..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">set.play(mFirstValueAnimator).with(mSecondValueAnimator);</span><br><span class="line">set.start();</span><br><span class="line">Debug.i(TAG, <span class="string">"animator set start..."</span>);</span><br></pre></td></tr></table></figure>

<h3 id="在Android-23-上输出"><a href="#在Android-23-上输出" class="headerlink" title="在Android 23 上输出"></a>在Android 23 上输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.395</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.395</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">2</span>:onAnimationStart:<span class="number">34</span>&gt; first anim onAnimationStart...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.395</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity:onCreate:<span class="number">54</span>&gt; first anim anim start....</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.396</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.396</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">5</span>:onAnimationStart:<span class="number">92</span>&gt; animatorSet start...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.397</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity:onCreate:<span class="number">112</span>&gt; animator set start...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.417</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.418</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.491</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.491</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.950</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.950</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">27.951</span> I/MainActivity(<span class="number">13521</span>): &lt;MainActivity$<span class="number">2</span>:onAnimationEnd:<span class="number">39</span>&gt; first anim onAnimationEnd....</span><br></pre></td></tr></table></figure>

<h3 id="在Android-24上输出"><a href="#在Android-24上输出" class="headerlink" title="在Android 24上输出"></a>在Android 24上输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.942</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">2</span>:onAnimationStart:<span class="number">34</span>&gt; first anim onAnimationStart...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.942</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.942</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity:onCreate:<span class="number">54</span>&gt; first anim anim start....</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.943</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.943</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">4</span>:onAnimationStart:<span class="number">68</span>&gt; second anim onAnimationStart...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.943</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">3</span>:onAnimationUpdate:<span class="number">62</span>&gt; second anim onAnimationUpdate</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.944</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">5</span>:onAnimationStart:<span class="number">92</span>&gt; animatorSet start...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.944</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity:onCreate:<span class="number">112</span>&gt; animator set start...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">11.967</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.427</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">3</span>:onAnimationUpdate:<span class="number">62</span>&gt; second anim onAnimationUpdate</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.445</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.477</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">3</span>:onAnimationUpdate:<span class="number">62</span>&gt; second anim onAnimationUpdate</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.492</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">1</span>:onAnimationUpdate:<span class="number">28</span>&gt; first anim onAnimationUpdate...</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.493</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">2</span>:onAnimationEnd:<span class="number">39</span>&gt; first anim onAnimationEnd....</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.493</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">3</span>:onAnimationUpdate:<span class="number">62</span>&gt; second anim onAnimationUpdate</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.493</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">4</span>:onAnimationEnd:<span class="number">73</span>&gt; second anim onAnimationEnd....</span><br><span class="line">   <span class="number">01</span>-<span class="number">17</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">12.494</span> I/MainActivity(<span class="number">14744</span>): &lt;MainActivity$<span class="number">5</span>:onAnimationEnd:<span class="number">97</span>&gt; animatorSet end...</span><br></pre></td></tr></table></figure>

<h3 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h3><p>简单的2个<code>ValueAnimator</code>动画, <code>ValueAnimator1</code>和<code>ValueAnimator2</code>，以后简称<code>anim1</code>, <code>anim2</code>, 通过<code>AnimatorSet</code>动画集合按照<code>play anim1 with anim2</code>的规则组织在一起，也就是<code>anim1</code>和<code>anim2</code>一起<code>start</code>.</p>
<p>按照我们的预期, <code>anim1</code>和<code>anim2</code>的执行应该是<br><code>anim1 start -&gt; anim1 update -&gt; anim1 end</code><br><code>anim2 start -&gt; anim2 update -&gt; anim2 end</code><br>交替在一起，像两个线程并发执行一样.</p>
<p>但实际上:</p>
<ul>
<li>在Android23上只有anim1的start, update, end. anim2完全被屏蔽了</li>
<li>在Android 24上， anim1和anim2貌似是符合预期的</li>
</ul>
<p>下面我们将会一步步的从源码来分析这个现象产生的原因。</p>
<h2 id="动画源码分析"><a href="#动画源码分析" class="headerlink" title="动画源码分析"></a>动画源码分析</h2><h3 id="ValueAnimator源码分析"><a href="#ValueAnimator源码分析" class="headerlink" title="ValueAnimator源码分析"></a>ValueAnimator源码分析</h3><p>首先进入<code>start</code>方法, 前面几行都是对一些状态进行的初始化，不细说，最后一块代码比较关键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  AnimationHandler animationHandler = getOrCreateAnimationHandler();</span><br><span class="line">  animationHandler.mPendingAnimations.add(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (mStartDelay == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// This sets the initial value of the animation, prior to actually starting it running</span></span><br><span class="line">      <span class="keyword">if</span> (prevPlayingState != SEEKED) &#123;</span><br><span class="line">          setCurrentPlayTime(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      mPlayingState = STOPPED;</span><br><span class="line">      mRunning = <span class="keyword">true</span>;</span><br><span class="line">      notifyStartListeners();</span><br><span class="line">  &#125;</span><br><span class="line">animationHandler.start();</span><br></pre></td></tr></table></figure>

<p>如果<code>mStartDelay==0</code>, 也就是启动动画没有延迟, <code>notifyStartListeners()</code>, 进入这个方法可以看到熟悉的<code>onAnimationStart</code>回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyStartListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    tmpListeners.get(i).onAnimationStart(<span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着来看<code>animationHandler.start()</code>, 这里是动画执行的核心. <code>AnimationHandler</code>是一个静态的内部类，里面定义了以下关键变量<code>mAnimations</code>, <code>mTmpAnimations</code>, <code>mPendingAnimations</code>, <code>mDelayedAnims</code>, <code>mEndingAnims</code>, <code>mReadyAnims</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ArrayList&lt;ValueAnimator&gt; mAnimations = <span class="keyword">new</span> ArrayList&lt;ValueAnimator&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Used in doAnimationFrame() to avoid concurrent modifications of mAnimations</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ValueAnimator&gt; mTmpAnimations = <span class="keyword">new</span> ArrayList&lt;ValueAnimator&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// The per-thread set of animations to be started on the next animation frame</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ArrayList&lt;ValueAnimator&gt; mPendingAnimations = <span class="keyword">new</span> ArrayList&lt;ValueAnimator&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Internal per-thread collections used to avoid set collisions as animations start and end</span></span><br><span class="line"><span class="comment">* while being processed.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ArrayList&lt;ValueAnimator&gt; mDelayedAnims = <span class="keyword">new</span> ArrayList&lt;ValueAnimator&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ValueAnimator&gt; mEndingAnims = <span class="keyword">new</span> ArrayList&lt;ValueAnimator&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ValueAnimator&gt; mReadyAnims = <span class="keyword">new</span> ArrayList&lt;ValueAnimator&gt;();</span><br></pre></td></tr></table></figure>

<p>接着进入前文中的<code>animationHandler.start()</code>方法里, 里面调用了<code>scheduleAnimation()</code>这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mAnimationScheduled) &#123;</span><br><span class="line">      mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, <span class="keyword">null</span>);</span><br><span class="line">      mAnimationScheduled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>mChoreographer.postCallback</code>用法类似于mHandler.post方法，也就是这个方法具体执行在<code>mAnimate</code>这个runnable里。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Runnable mAnimate = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mAnimationScheduled = <span class="keyword">false</span>;</span><br><span class="line">            doAnimationFrame(mChoreographer.getFrameTime());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>这儿简单介绍下<code>mchoreographer</code>是个跟系统时钟相关的类，系统每过16ms会发出<code>VSYNC</code>信号, 触发屏幕渲染, 刷新一次UI, 当然也可以手动的更改刷新频率。这里的<code>mChoreographer.getFrameTime()</code>就是获取这一次刷新的时间，进入到<code>doAnimationFrame</code>方法里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> frameTime)</span> </span>&#123;</span><br><span class="line">    mLastFrameTime = frameTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mPendingAnimations holds any animations that have requested to be started</span></span><br><span class="line">    <span class="comment">// We're going to clear mPendingAnimations, but starting animation may</span></span><br><span class="line">    <span class="comment">// cause more to be added to the pending list (for example, if one animation</span></span><br><span class="line">    <span class="comment">// starting triggers another starting). So we loop until mPendingAnimations</span></span><br><span class="line">    <span class="comment">// is empty.</span></span><br><span class="line">    <span class="keyword">while</span> (mPendingAnimations.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ArrayList&lt;ValueAnimator&gt; pendingCopy =</span><br><span class="line">                        (ArrayList&lt;ValueAnimator&gt;) mPendingAnimations.clone();</span><br><span class="line">        mPendingAnimations.clear();</span><br><span class="line">        <span class="keyword">int</span> count = pendingCopy.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">            ValueAnimator anim = pendingCopy.get(i);</span><br><span class="line">            <span class="comment">// If the animation has a startDelay, place it on the delayed list</span></span><br><span class="line">            <span class="keyword">if</span> (anim.mStartDelay == <span class="number">0</span>) &#123;</span><br><span class="line">                anim.startAnimation(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mDelayedAnims.add(anim);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, process animations currently sitting on the delayed queue, adding</span></span><br><span class="line">    <span class="comment">// them to the active animations if they are ready</span></span><br><span class="line">    <span class="keyword">int</span> numDelayedAnims = mDelayedAnims.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numDelayedAnims; ++i) &#123;</span><br><span class="line">        ValueAnimator anim = mDelayedAnims.get(i);</span><br><span class="line">        <span class="keyword">if</span> (anim.delayedAnimationFrame(frameTime)) &#123;</span><br><span class="line">            mReadyAnims.add(anim);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numReadyAnims = mReadyAnims.size();</span><br><span class="line">    <span class="keyword">if</span> (numReadyAnims &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numReadyAnims; ++i) &#123;</span><br><span class="line">            ValueAnimator anim = mReadyAnims.get(i);</span><br><span class="line">            anim.startAnimation(<span class="keyword">this</span>);</span><br><span class="line">            anim.mRunning = <span class="keyword">true</span>;</span><br><span class="line">            mDelayedAnims.remove(anim);</span><br><span class="line">        &#125;</span><br><span class="line">        mReadyAnims.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now process all active animations. The return value from animationFrame()</span></span><br><span class="line">    <span class="comment">// tells the handler whether it should now be ended</span></span><br><span class="line">    <span class="keyword">int</span> numAnims = mAnimations.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numAnims; ++i) &#123;</span><br><span class="line">        mTmpAnimations.add(mAnimations.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numAnims; ++i) &#123;</span><br><span class="line">        ValueAnimator anim = mTmpAnimations.get(i);</span><br><span class="line">        <span class="keyword">if</span> (mAnimations.contains(anim) &amp;&amp; anim.doAnimationFrame(frameTime)) &#123;</span><br><span class="line">            mEndingAnims.add(anim);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mTmpAnimations.clear();</span><br><span class="line">    <span class="keyword">if</span> (mEndingAnims.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEndingAnims.size(); ++i) &#123;</span><br><span class="line">            mEndingAnims.get(i).endAnimation(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mEndingAnims.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Schedule final commit for the frame.</span></span><br><span class="line">    mChoreographer.postCallback(Choreographer.CALLBACK_COMMIT, mCommit, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are still active or delayed animations, schedule a future call to</span></span><br><span class="line">    <span class="comment">// onAnimate to process the next frame of the animations.</span></span><br><span class="line">    <span class="keyword">if</span> (!mAnimations.isEmpty() || !mDelayedAnims.isEmpty()) &#123;</span><br><span class="line">        scheduleAnimation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个方法里可以看到之前定义过的那一系列的变量</p>
<ol>
<li>首先来看<code>mPendingAnimations</code>. 如果<code>anim.mStartDelay == 0</code>那么就直接<code>start</code>, <code>anim.startAnimation(this);</code>(这里一会回过来看)否则，就把有延迟的动画添加到<code>mDelayAnims</code>里</li>
<li>接下来处理<code>mDelayAnims</code>, 如果<code>anim.delayedAnimationFrame(frameTime)</code>也就是如果delayed的动画延迟时间到了, 那么就<code>mReadyAnims.add(anim)</code>把动画放到<code>mReadyAnims</code>里</li>
<li>然后处理<code>mReadyAnims</code>， 同样的循环<code>mReadyAnims</code>然后去<code>start</code>, <code>anim.startAnimation(this)</code>, 与第一条的<code>start</code>一样</li>
</ol>
<p>我们来看下<code>anim.startAnimation(this)</code>里究竟做了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">(AnimationHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Trace.isTagEnabled(Trace.TRACE_TAG_VIEW)) &#123;</span><br><span class="line">        Trace.asyncTraceBegin(Trace.TRACE_TAG_VIEW, getNameForTrace(),</span><br><span class="line">                System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    initAnimation();</span><br><span class="line">    handler.mAnimations.add(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (mStartDelay &gt; <span class="number">0</span> &amp;&amp; mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Listeners were already notified in start() if startDelay is 0; this is</span></span><br><span class="line">        <span class="comment">// just for delayed animations</span></span><br><span class="line">        notifyStartListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里把<code>start</code>的动画添加到了<code>handler.mAnimations</code>里，跟进去看，也就是添加到了<code>AnimationHandler</code>里面的<code>mAnimations</code>变量里, 注意这一块! 然后<code>notifyStartListener</code>也就是之前提到过的，回调<code>onAnimationStart</code>方法。</p>
<p>跳出来， 我们回到之前的流程中</p>
<ol>
<li>处理完<code>mReadyAnims</code>中的动画后，我们知道那些<code>start</code>了的动画都跑到了<code>mAnimations</code>里，接下来把<code>mAnimations</code>里的动画复制一份放到了<code>mTmpAnimations</code>中</li>
<li>接着处理<code>mTmpAnimations</code>, <code>anim.doAnimationFrame(frameTime)</code>这里就是真正实现动画的部分，等下细说， 然后把完成了的动画放到<code>mEndingAnims</code>中</li>
<li>接下来遍历<code>mEndingAnims</code>, 执行<code>mEndingAnims.get(i).endAnimation(this)</code>，显而易见，这儿的<code>endAnimation</code>就是回调了<code>onAnimationEnd</code>方法</li>
<li>最后递归调用<code>scheduleAnimation()</code>一遍遍的走这个流程，每次传过来的<code>frameTime</code>都是当前刷新的时间，这样就完成了整个动画</li>
</ol>
<p>前文把整个动画的流程和回调时机大致介绍了下， 除了一个<code>anim.doAnimationFrame(frameTime)</code>， 这是动画执行的关键过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> frameTime)</span> </span>&#123;</span><br><span class="line">    ... 关键的代码是最后一行 ...</span><br><span class="line">    <span class="keyword">return</span> animationFrame(currentTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入<code>animationFrame()</code>里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">animationFrame</span><span class="params">(<span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">switch</span> (mPlayingState) &#123;</span><br><span class="line">        <span class="keyword">case</span> RUNNING:</span><br><span class="line">        <span class="keyword">case</span> SEEKED:</span><br><span class="line">            <span class="keyword">float</span> fraction = mDuration &gt; <span class="number">0</span> ? (<span class="keyword">float</span>)(currentTime - mStartTime) / mDuration : <span class="number">1f</span>;</span><br><span class="line">            <span class="keyword">if</span> (mDuration == <span class="number">0</span> &amp;&amp; mRepeatCount != INFINITE) &#123;</span><br><span class="line">                <span class="comment">// Skip to the end</span></span><br><span class="line">                mCurrentIteration = mRepeatCount;</span><br><span class="line">                <span class="keyword">if</span> (!mReversing) &#123;</span><br><span class="line">                    mPlayingBackwards = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fraction &gt;= <span class="number">1f</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCurrentIteration &lt; mRepeatCount || mRepeatCount == INFINITE) &#123;</span><br><span class="line">                    <span class="comment">// Time to repeat</span></span><br><span class="line">                    <span class="keyword">if</span> (mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> numListeners = mListeners.size();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                            mListeners.get(i).onAnimationRepeat(<span class="keyword">this</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mRepeatMode == REVERSE) &#123;</span><br><span class="line">                        mPlayingBackwards = !mPlayingBackwards;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mCurrentIteration += (<span class="keyword">int</span>) fraction;</span><br><span class="line">                    fraction = fraction % <span class="number">1f</span>;</span><br><span class="line">                    mStartTime += mDuration;</span><br><span class="line">                    <span class="comment">// Note: We do not need to update the value of mStartTimeCommitted here</span></span><br><span class="line">                    <span class="comment">// since we just added a duration offset.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    done = <span class="keyword">true</span>;</span><br><span class="line">                    fraction = Math.min(fraction, <span class="number">1.0f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPlayingBackwards) &#123;</span><br><span class="line">                fraction = <span class="number">1f</span> - fraction;</span><br><span class="line">            &#125;</span><br><span class="line">            animateValue(fraction);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> done;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>fraction</code>是时间因子， 从第一行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> fraction = mDuration &gt; <span class="number">0</span> ? (<span class="keyword">float</span>)(currentTime - mStartTime) / mDuration : <span class="number">1f</span>;</span><br></pre></td></tr></table></figure>

<p>可以知道, <code>fraction</code>表示动画已经开始消耗了的时间，如果是单次动画，<code>fraction</code>就是[0, 1], 如果超过了一次, fraction就可能 <code>&gt;=1</code>, 也就会执行下面的代码。 注意里面的<code>onAnimationRepeat</code>回调，每重复一次动画，会回调一次. 最后进入到<code>animateValue(fraction)</code>这个函数里， 把时间因子<code>fraction</code>传了进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">    fraction = mInterpolator.getInterpolation(fraction);</span><br><span class="line">    mCurrentFraction = fraction;</span><br><span class="line">    <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">        mValues[i].calculateValue(fraction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mUpdateListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> numListeners = mUpdateListeners.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">            mUpdateListeners.get(i).onAnimationUpdate(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一行的<code>fraction</code>, 通过<code>mInterpolator.getInterpolation(fraction)</code>这个接口来进行了一次计算，把简单的线性的<code>fraction</code>转化为各种可能的数值从而达到不同的动画效果，我们知道，使用动画时， 我们就是通过<code>setInterpolator()</code>来进行不同样式的动画的， 比如<code>AccelerateDecelerateInterpolator</code>, <code>LinearInterpolator</code>等，原理就是在这里。 <code>Intepolator</code>源码如下，传入一个<code>float</code>输出一个<code>float</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A time interpolator defines the rate of change of an animation. This allows animations</span></span><br><span class="line"><span class="comment"> * to have non-linear motion, such as acceleration and deceleration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps a value representing the elapsed fraction of an animation to a value that represents</span></span><br><span class="line"><span class="comment">     * the interpolated fraction. This interpolated value is then multiplied by the change in</span></span><br><span class="line"><span class="comment">     * value of an animation to derive the animated value at the current elapsed animation time.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input A value between 0 and 1.0 indicating our current point</span></span><br><span class="line"><span class="comment">     *        in the animation where 0 represents the start and 1.0 represents</span></span><br><span class="line"><span class="comment">     *        the end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The interpolation value. This value can be more than 1.0 for</span></span><br><span class="line"><span class="comment">     *         interpolators which overshoot their targets, or less than 0 for</span></span><br><span class="line"><span class="comment">     *         interpolators that undershoot their targets.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>mValues</code>里面的值会跟这个<code>fraction</code>因子进行计算<br>接下来就是<code>onAnimationUpdate</code>回调。 我们经常在这个回调里，把上一部计算后的结果拿到(<code>getAnimatedValue()</code>)</p>
<p>以上就是<code>ValueAnimator</code>大致的执行流程， 和关键的回调， 接下来， 我们分析<code>Android-23源码下</code>的<code>AnimatorSet</code>类， 也就是动画集合类。</p>
<h3 id="AnimatorSet源码分析-based-on-Android-23"><a href="#AnimatorSet源码分析-based-on-Android-23" class="headerlink" title="AnimatorSet源码分析(based on Android 23)"></a>AnimatorSet源码分析(based on Android 23)</h3><p>在<code>AnimatorSet</code>源码中我们发现, 他的一些方法如<code>playTogether</code>, <code>playSequentially</code>, <code>play</code>等方法实际上都是通过<code>Builder</code>模式来构建的这个<code>AnimatorSet</code>的。 进入<code>Builder</code>内部类，继续分析这里的<code>with</code>, <code>before</code>, <code>after</code>方法，也就是我们经常用到的构建动画顺序的方法，里面都是通过<code>Node</code>和<code>Dependency</code>这两个类组合起来的，这里设计的很巧妙，具体来看下这里的代码,  先从<code>Dependency</code>开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependency</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WITH = <span class="number">0</span>; <span class="comment">// dependent node must start with this dependency node</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AFTER = <span class="number">1</span>; <span class="comment">// dependent node must start when this dependency node finishes</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The node that the other node with this Dependency is dependent upon</span></span><br><span class="line">    <span class="keyword">public</span> Node node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The nature of the dependency (WITH or AFTER)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> rule;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dependency</span><span class="params">(Node node, <span class="keyword">int</span> rule)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">        <span class="keyword">this</span>.rule = rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>Dependency</code>里定义了2中依赖关系, <code>WITH</code>和<code>AFTER</code>,可能有人好奇<code>Builder</code>里的<code>before</code>怎么没了。 原因是, <code>before</code>和<code>after</code>其实是一种逆向的过程, <code>A before B</code> 也就是<code>B after A</code>. 所以这里源码作者忽略了<code>before</code>，简化了代码，但是增加了逻辑复杂度，让第一次阅读的人一头雾水<br><code>Dependency</code>里除了定义了依赖关系，还声明了另一个关键的变量<code>Node</code>, <code>Node</code>的英文注释这儿是<code>// The node that the other note with this Dependency is dependent upon</code>. 这里很巧妙，意思是其他的<code>Node</code>与这个<code>Node</code>的依赖关系是这个<code>Dependency</code><br>接下来来看下比较复杂的<code>Node</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Animator animation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  These are the dependencies that this node's animation has on other</span></span><br><span class="line"><span class="comment">     *  nodes. For example, if this node's animation should begin with some</span></span><br><span class="line"><span class="comment">     *  other animation ends, then there will be an item in this node's</span></span><br><span class="line"><span class="comment">     *  dependencies list for that other animation's node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Dependency&gt; dependencies = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tmpDependencies is a runtime detail. We use the dependencies list for sorting.</span></span><br><span class="line"><span class="comment">     * But we also use the list to keep track of when multiple dependencies are satisfied,</span></span><br><span class="line"><span class="comment">     * but removing each dependency as it is satisfied. We do not want to remove</span></span><br><span class="line"><span class="comment">     * the dependency itself from the list, because we need to retain that information</span></span><br><span class="line"><span class="comment">     * if the AnimatorSet is launched in the future. So we create a copy of the dependency</span></span><br><span class="line"><span class="comment">     * list when the AnimatorSet starts and use this tmpDependencies list to track the</span></span><br><span class="line"><span class="comment">     * list of satisfied dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Dependency&gt; tmpDependencies = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * nodeDependencies is just a list of the nodes that this Node is dependent upon.</span></span><br><span class="line"><span class="comment">     * This information is used in sortNodes(), to determine when a node is a root.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; nodeDependencies = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * nodeDepdendents is the list of nodes that have this node as a dependency. This</span></span><br><span class="line"><span class="comment">     * is a utility field used in sortNodes to facilitate removing this node as a</span></span><br><span class="line"><span class="comment">     * dependency when it is a root node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; nodeDependents = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>这里声明了<code>ArrayList&lt;Dependency&gt; dependencies</code>, <code>ArrayList&lt;Dependency&gt; tmpDependencies</code>, <code>ArrayList&lt;Node&gt; nodeDependencies</code>, <code>ArrayList&lt;Node&gt; nodeDependents</code>, 这里的定义只<code>dependents</code>和<code>dependencies</code>就比较容易搞混了, 我们结合例子来看</p>
<p>先举一个普通的<code>AnimatorSet</code>的用法，也就是最开始的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnimatorSet set = <span class="keyword">new</span> AnimatorSet()</span><br><span class="line">set.play(mFirstValueAnimator).with(mSecondValueAnimator);</span><br></pre></td></tr></table></figure>

<p>进入<code>play</code>方法，我们可以看到直接返回的是一个<code>new Builder(anim1)</code>接着进入<code>Builder</code>里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Builder(Animator anim) &#123;</span><br><span class="line">            mCurrentNode = mNodeMap.get(anim);</span><br><span class="line">            <span class="keyword">if</span> (mCurrentNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mCurrentNode = <span class="keyword">new</span> Node(anim);</span><br><span class="line">                mNodeMap.put(anim, mCurrentNode);</span><br><span class="line">                mNodes.add(mCurrentNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这里把<code>anim1</code>赋值给<code>mCurrentNode</code>, 可以这么理解，一个<code>Node</code>对应一个<code>anim</code>, 接着是<code>with(anim2)</code>, 也就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">with</span><span class="params">(Animator anim)</span> </span>&#123;</span><br><span class="line">        Node node = mNodeMap.get(anim);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node(anim);</span><br><span class="line">            mNodeMap.put(anim, node);</span><br><span class="line">            mNodes.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        Dependency dependency = <span class="keyword">new</span> Dependency(mCurrentNode, Dependency.WITH);</span><br><span class="line">        node.addDependency(dependency);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>新建一个<code>Dependency</code>把<code>mCurrentNode</code>也就是<code>anim1</code>和依赖关系<code>Dependency</code>也就是<code>WITH</code>作为<code>Dependency</code>的构造函数传进来, 然后<code>node</code>也就是<code>anim2</code>添加这个<code>Dependency(anim1, with)</code><br>接着进入<code>addDependency</code>里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDependency</span><span class="params">(Dependency dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dependencies == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dependencies = <span class="keyword">new</span> ArrayList&lt;Dependency&gt;();</span><br><span class="line">            nodeDependencies = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        dependencies.add(dependency);</span><br><span class="line">        <span class="keyword">if</span> (!nodeDependencies.contains(dependency.node)) &#123;</span><br><span class="line">            nodeDependencies.add(dependency.node);</span><br><span class="line">        &#125;</span><br><span class="line">        Node dependencyNode = dependency.node;</span><br><span class="line">        <span class="keyword">if</span> (dependencyNode.nodeDependents == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dependencyNode.nodeDependents = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        dependencyNode.nodeDependents.add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>估计看到这块代码一头雾水，先介绍下这里的变量分别是做什么的</p>
<ul>
<li>List<dependency> dependencies 记录当前节点的所有依赖关系</dependency></li>
<li>List<node> nodeDependencies 记录当前节点的依赖节点</node></li>
<li>List<node> nodeDependents 记录依赖当前节点的节点</node></li>
</ul>
<p>以上<code>addDependency</code>函数内做的就是这事，把这三个变量给赋值。 再举个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">anim1.before(anim2)</span><br><span class="line">顺序是anim1, anim2</span><br><span class="line">映射到代码中就是</span><br><span class="line">node(anim2), dependency(anim1, after)</span><br><span class="line">中文描述: 动画<span class="number">2</span>在动画<span class="number">1</span>之后</span><br><span class="line"></span><br><span class="line">anim3.after(anim4)</span><br><span class="line">顺序是anim4, anim3</span><br><span class="line">映射到代码中就是</span><br><span class="line">node(currentNode也就是anim3), dependency(anim4, after)</span><br><span class="line">中文描述: 动画<span class="number">3</span>在动画<span class="number">4</span>之后</span><br><span class="line"></span><br><span class="line">我们再来串起来看下。</span><br><span class="line"></span><br><span class="line">`e.g`</span><br><span class="line"></span><br><span class="line">play(anim1).before(anim2).before(anim3)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. anim1</span><br><span class="line"><span class="number">2</span>. anim2的NodeDependencies 是 anim1</span><br><span class="line"><span class="number">3</span>. anim1的NodeDependents 是 anim2</span><br><span class="line"><span class="number">4</span>. anim3的NodeDependencies 是 anim2</span><br><span class="line"><span class="number">5</span>. anim2的NodeDependencts 是 anim3</span><br><span class="line"></span><br><span class="line">最终结果就是</span><br><span class="line"></span><br><span class="line">anim1的nodeDependencies是<span class="keyword">null</span>, nodeDependents是anim2</span><br><span class="line">anim2的nodeDependencies是anim1, nodeDependents是anim3</span><br><span class="line">anim3的nodeDependencies是anim2, nodeDependents是<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><code>AnimatorSet</code>就是通过这样的依赖关系把添加进来的动画组织起来，接下来，我们看下他们是如何<code>start</code>的，进入<code>AnimatorSet</code>的<code>start</code>方法里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mTerminated = <span class="keyword">false</span>;</span><br><span class="line">            mStarted = <span class="keyword">true</span>;</span><br><span class="line">            mPaused = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">for</span> (Node node : mNodes) &#123;</span><br><span class="line">                node.animation.setAllowRunningAsynchronously(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (mDuration &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// If the duration was set on this AnimatorSet, pass it along to all child animations</span></span><br><span class="line">                <span class="keyword">for</span> (Node node : mNodes) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> don't set the duration of the timing-only nodes created by AnimatorSet to</span></span><br><span class="line">                    <span class="comment">// insert "play-after" delays</span></span><br><span class="line">                    node.animation.setDuration(mDuration);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mInterpolator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node node : mNodes) &#123;</span><br><span class="line">                    node.animation.setInterpolator(mInterpolator);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// First, sort the nodes (if necessary). This will ensure that sortedNodes</span></span><br><span class="line">            <span class="comment">// contains the animation nodes in the correct order.</span></span><br><span class="line">            sortNodes();</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">int</span> numSortedNodes = mSortedNodes.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numSortedNodes; ++i) &#123;</span><br><span class="line">                Node node = mSortedNodes.get(i);</span><br><span class="line">                <span class="comment">// First, clear out the old listeners</span></span><br><span class="line">                ArrayList&lt;AnimatorListener&gt; oldListeners = node.animation.getListeners();</span><br><span class="line">                <span class="keyword">if</span> (oldListeners != <span class="keyword">null</span> &amp;&amp; oldListeners.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> ArrayList&lt;AnimatorListener&gt; clonedListeners = <span class="keyword">new</span></span><br><span class="line">                            ArrayList&lt;AnimatorListener&gt;(oldListeners);</span><br><span class="line">    </span><br><span class="line">                    <span class="keyword">for</span> (AnimatorListener listener : clonedListeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener <span class="keyword">instanceof</span> DependencyListener ||</span><br><span class="line">                                listener <span class="keyword">instanceof</span> AnimatorSetListener) &#123;</span><br><span class="line">                            node.animation.removeListener(listener);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// nodesToStart holds the list of nodes to be started immediately. We don't want to</span></span><br><span class="line">            <span class="comment">// start the animations in the loop directly because we first need to set up</span></span><br><span class="line">            <span class="comment">// dependencies on all of the nodes. For example, we don't want to start an animation</span></span><br><span class="line">            <span class="comment">// when some other animation also wants to start when the first animation begins.</span></span><br><span class="line">            <span class="keyword">final</span> ArrayList&lt;Node&gt; nodesToStart = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numSortedNodes; ++i) &#123;</span><br><span class="line">                Node node = mSortedNodes.get(i);</span><br><span class="line">                <span class="keyword">if</span> (mSetListener == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mSetListener = <span class="keyword">new</span> AnimatorSetListener(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.dependencies == <span class="keyword">null</span> || node.dependencies.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    nodesToStart.add(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> numDependencies = node.dependencies.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numDependencies; ++j) &#123;</span><br><span class="line">                        Dependency dependency = node.dependencies.get(j);</span><br><span class="line">                        dependency.node.animation.addListener(</span><br><span class="line">                                <span class="keyword">new</span> DependencyListener(<span class="keyword">this</span>, node, dependency.rule));</span><br><span class="line">                    &#125;</span><br><span class="line">                    node.tmpDependencies = (ArrayList&lt;Dependency&gt;) node.dependencies.clone();</span><br><span class="line">                &#125;</span><br><span class="line">                node.animation.addListener(mSetListener);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Now that all dependencies are set up, start the animations that should be started.</span></span><br><span class="line">            <span class="keyword">if</span> (mStartDelay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node node : nodesToStart) &#123;</span><br><span class="line">                    node.animation.start();</span><br><span class="line">                    mPlayingSet.add(node.animation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mDelayAnim = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">                mDelayAnim.setDuration(mStartDelay);</span><br><span class="line">                mDelayAnim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> canceled = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator anim)</span> </span>&#123;</span><br><span class="line">                        canceled = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator anim)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (!canceled) &#123;</span><br><span class="line">                            <span class="keyword">int</span> numNodes = nodesToStart.size();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numNodes; ++i) &#123;</span><br><span class="line">                                Node node = nodesToStart.get(i);</span><br><span class="line">                                node.animation.start();</span><br><span class="line">                                mPlayingSet.add(node.animation);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        mDelayAnim = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                mDelayAnim.start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ArrayList&lt;AnimatorListener&gt; tmpListeners =</span><br><span class="line">                        (ArrayList&lt;AnimatorListener&gt;) mListeners.clone();</span><br><span class="line">                <span class="keyword">int</span> numListeners = tmpListeners.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                    tmpListeners.get(i).onAnimationStart(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mNodes.size() == <span class="number">0</span> &amp;&amp; mStartDelay == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Handle unusual case where empty AnimatorSet is started - should send out</span></span><br><span class="line">                <span class="comment">// end event immediately since the event will not be sent out at all otherwise</span></span><br><span class="line">                mStarted = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ArrayList&lt;AnimatorListener&gt; tmpListeners =</span><br><span class="line">                            (ArrayList&lt;AnimatorListener&gt;) mListeners.clone();</span><br><span class="line">                    <span class="keyword">int</span> numListeners = tmpListeners.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                        tmpListeners.get(i).onAnimationEnd(<span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>首先我们可以看到如果<code>AnimatorSet</code>设置了<code>duration</code>, 那么里面所有的<code>animation</code>都会强制地设置为<code>AnimatorSet</code>的<code>duration</code>, <code>Interpolator</code>也一样。<br>接着来看51行。这块代码意思是, 如果<code>当前Node</code>没有<code>dependencies</code>，也就是没有依赖，那么当前节点就是<code>rootNode</code>。如果<code>当前Node</code>有<code>dependencies</code>， 那么<code>当前Node</code>的<code>dependencies里面的Node, 也就是当前的Node</code>, 添加DependencyListener回调。具体来看DependencyLister这个类</p>
<ul>
<li>如果<code>mRule == Dependency.AFTER</code>, 也就是如果依赖规则是<code>after</code>, 那么在<code>onAnimationEnd</code>方法里，去<code>start</code>下一个动画的。</li>
<li>如果<code>mRule == Dependency.WITH</code>, 也就是依赖规则是<code>With</code>, 那么就在<code>onAnimationStart</code>里去<code>start</code>下一个动画</li>
</ul>
<p>总结来说就是，一系列的节点首先是通过<code>Dependency</code>这个依赖关系关联起来，在<code>start</code>的方法里，给所有有依赖的节点添加<code>DependencyListener</code>这个回调方法。如果规则是<code>with</code>, 那么第二个节点在第一个节点的<code>onAnimationStart</code>回调里去<code>start</code>, 如果第二个节点与第一个节点的关系是<code>after</code>, 那么第二个节点在第一个节点的<code>onAnimationEnd</code>回调里去<code>start</code>。</p>
<p>// TODO 类似双向链表实现的树结构??</p>
<p>AnimatorSet 在Android23源码中就是像这样把所有的动画组合起来。可以说非常巧妙，非常的精妙。但是令我们思考的是，这是最好的方法么？这种结构是不是很熟悉？或者说有什么结构可以替代这种很巧妙但是很复杂的结构?</p>
<p>AnimatorSet在Android-24源码中就是用了更加巧妙的方法来实现这块功能。下面我们来分析下AnimatorSet在24里面的源码实现。</p>
<h3 id="AnimatorSet源码分析-based-on-Android-24"><a href="#AnimatorSet源码分析-based-on-Android-24" class="headerlink" title="AnimatorSet源码分析(based on Android 24)"></a>AnimatorSet源码分析(based on Android 24)</h3><p>与23中一样，都是通过<code>Builder</code>模式来构建这个<code>AnimatorSet</code>的，所以我们直接进入到<code>Builder</code>内部类里面。可以看到与23中明显不同的是，这里的<code>with</code>, <code>after</code>, <code>before</code>里面的实现，没有复杂的<code>Dependency</code>这个东西了，取而代之的是<code>Node</code>的<code>addChild</code>, <code>addSibling</code>, <code>addParent</code>。是的，新的结构就是树，<code>with</code>就是添加兄弟节点，<code>before</code>就是添加子节点, <code>after</code>就是添加父节点。非常的清晰。<br>同时Node类里面也是定义了以下3个变量来存储添加进来的动画。<br><code>List&lt;Node&gt; mSiblings, List&lt;Node&gt; mParents, List&lt;Node&gt; mChildNodes</code><br>接着来看<code>start方法</code>,关键部分是这里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mStartDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        start(mRootNode);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mNodes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// No delay, but there are other animators in the set</span></span><br><span class="line">        onChildAnimatorEnded(mDelayAnim);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Set is empty, no delay, no other animation. Skip to end in this case</span></span><br><span class="line">        setIsEmpty = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里把开始的延迟时间作为一个<code>delayAnim</code>，如果有开始延迟的话就先执行这个<code>delayAnim</code>也就是<code>mRootNode</code>。这点可以从<code>mRootNode</code>的定义看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Node mRootNode = <span class="keyword">new</span> Node(mDelayAnim);</span><br></pre></td></tr></table></figure>

<p>接着进入<code>onChildAnimatorEnded(mDelayAnim)</code>方法里看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onChildAnimatorEnded</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        Node animNode = mNodeMap.get(animation);</span><br><span class="line">        animNode.mEnded = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mTerminated) &#123;</span><br><span class="line">            List&lt;Node&gt; children = animNode.mChildNodes;</span><br><span class="line">            <span class="comment">// Start children animations, if any.</span></span><br><span class="line">            <span class="keyword">int</span> childrenSize = children == <span class="keyword">null</span> ? <span class="number">0</span> : children.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenSize; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (children.get(i).mLatestParent == animNode) &#123;</span><br><span class="line">                    start(children.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Listeners are already notified of the AnimatorSet ending in cancel() or</span></span><br><span class="line">            <span class="comment">// end(); the logic below only kicks in when animations end normally</span></span><br><span class="line">            <span class="keyword">boolean</span> allDone = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// Traverse the tree and find if there's any unfinished node</span></span><br><span class="line">            <span class="keyword">int</span> size = mNodes.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mNodes.get(i).mEnded) &#123;</span><br><span class="line">                    allDone = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (allDone) &#123;</span><br><span class="line">                <span class="comment">// If this was the last child animation to end, then notify listeners that this</span></span><br><span class="line">                <span class="comment">// AnimatorSet has ended</span></span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ArrayList&lt;AnimatorListener&gt; tmpListeners =</span><br><span class="line">                            (ArrayList&lt;AnimatorListener&gt;) mListeners.clone();</span><br><span class="line">                    <span class="keyword">int</span> numListeners = tmpListeners.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                        tmpListeners.get(i).onAnimationEnd(<span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mStarted = <span class="keyword">false</span>;</span><br><span class="line">                mPaused = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>因为传过来的是<code>mRootNode</code>，这里第一次循环的就是<code>mRootNode的mChildNodes</code>。也就是第一级的所有动画动过<code>for</code>循环去<code>start</code>。进入到<code>start</code>方法里看，这里就是动画的<code>start</code>和回调方法<code>AnimatorSetListener</code>。在这个回调方法里可以看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        animation.removeListener(<span class="keyword">this</span>);</span><br><span class="line">        mAnimatorSet.mPlayingSet.remove(animation);</span><br><span class="line">        mAnimatorSet.onChildAnimatorEnded(animation);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了<code>onChildAnimationEnded</code>方法，也就是上文中的相同的方法，到这里的时候只是由原来传过来的<code>mRootNode</code>变为<code>mRootNode的childNode</code>了。 经过多次递归，同一层级的通过<code>for</code>循环来<code>start</code>, 子层级的在上一级的<code>onAnimEnd</code>回调里去递归的调用。就这样，<code>AnimatorSet</code>把所有动画组织起来。</p>
<h2 id="回归问题-导致不同表现的原因"><a href="#回归问题-导致不同表现的原因" class="headerlink" title="回归问题, 导致不同表现的原因"></a>回归问题, 导致不同表现的原因</h2><p>先总结一下。</p>
<ul>
<li><code>AnimatorSet</code>在<code>Android23</code>中是通过类似双向链表实现的树结构把所有的动画以及他们的关系给组织起来。在播放的时候, 如果后一个动画如果与前一个动画是同时播放，那么后一个动画就是在前一个动画<code>onAnimationStart</code>回调里去<code>start</code>, 如果后一个动画与前一个动画是后先顺序，那么后一个动画就在前一个动画的<code>onAnimationEnd</code>回调里去<code>start</code>。</li>
<li><code>AnimatorSet</code>在<code>Android24</code>中是通过树的结构把所有的动画组织起来。在播放的时候从跟节点一层一层的往树叶方向播放。</li>
<li>相比来说，虽然23中的做法很巧妙，但是树形结构更加合理。</li>
</ul>
<p>回归到问题, 在<code>23</code>中为什么<code>anim1</code>在播放完之后没有进行<code>anim2</code>的动画?</p>
<p>从之前的原理分析我们知道, <code>play(anim1).with(anim2)</code>也就是<code>anim1</code>与<code>anim2</code>的<code>Dependency</code>关系是<code>WITH</code>, 在<code>AnimatorSet</code>里播放时也就是, <code>anim2</code>在<code>anim1</code>的<code>onAnimationStart</code>回调里去<code>start</code>。</p>
<p>从日志上可以看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">01-17 15:22:27.395 I/MainActivity(13521): &lt;MainActivity:onCreate:54&gt; first anim anim start....</span><br><span class="line">01-17 15:22:27.396 I/MainActivity(13521): &lt;MainActivity$1:onAnimationUpdate:28&gt; first anim onAnimationUpdate...</span><br><span class="line">01-17 15:22:27.396 I/MainActivity(13521): &lt;MainActivity$5:onAnimationStart:92&gt; animatorSet start...</span><br><span class="line">01-17 15:22:27.397 I/MainActivity(13521): &lt;MainActivity:onCreate:112&gt; animator set start...</span><br></pre></td></tr></table></figure>

<p><code>AnimatorSet</code>start之前<code>anim1</code>的<code>onAnimationStart</code>早已经调用过了，后面再没有看到<code>anim1</code>的<code>onAnimationStart</code>的回调记录了 ，所以<code>anim2</code>就没法去<code>start</code>。而在<code>24</code>中，因为是<code>for循环执行的</code>，所以<code>anim2</code>可以正确的<code>start</code>。</p>
<p>至于为什么这块代码里<code>anim1</code>的<code>start</code>会在<code>AnimatorSet</code>的<code>start</code>之前就回调，是因为我们在使用的过程中，不小心把已经<code>start</code>过了的<code>anim1</code>添加到了<code>AnimatorSet</code>中，所以造成了这么比较奇怪的问题。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-《Java编程的逻辑》读书笔记</title>
    <url>/posts/21792e63/</url>
    <content><![CDATA[<h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><p>补码表示法: 在原码表示的基础上取反然后加1.<br>给定一个负数的二进制，想知道他的10进制可以采用相同的补码运算，先取反，再加1<br>e.g<br>-2: 原码 00000010, 取反11111101， 加1 11111110</p>
<p>位运算</p>
<ol>
<li>左移 &lt;&lt;  右边低位补0， 高位舍弃, 左移一位相当于* 2</li>
<li>无符号右移 &gt;&gt;&gt; 向右移动，右边的舍弃，左边补0</li>
<li>有符号右移 &gt;&gt; 向右移动, 右边的舍弃, 左边补的内容取决于原来的最高位. 右移一位相当于除以2</li>
</ol>
<p>字符的编码</p>
<ul>
<li>Unicode Unicode主要做了一件事，就是给所有的字符分配唯一的数字编号，它并没有规定这个编号怎么对应二进制表示， 这个编号与二进制的对应关系通过UTF-8, UTF-16, UTF-32来决定</li>
<li>非Unicode，包括ASCII, ISO 8859-1 GB2313 GBK等</li>
</ul>
<p>类加载进内存后，一般不会释放，知道程序结束，一般情况下，类只会加载一次，所以静态变量在内存中只有一份<br>堆中的内存是被垃圾回收机制管理的，当没有活跃变量指向对象的时候，对应的堆空间就会被释放 </p>
<p>子类对象赋值给父类引用变量，这叫向上转型。 变量Shape可以饮用任何Shape子类类型的对象， 这叫多态，即一种类型的变量，可饮用多种实际类型对象。 这样， 对于变量shape来说，它就有2个类型： 类型Shape， 我们称为shape的静态类型， 类型Circle/Line 称为Shape的动态类型。shapes[i].draw()调用的是其对应的动态类型的draw方法，称为方法的动态绑定</p>
<p>静态绑定:<br>当通过b访问，访问的是Base的变量和方法， 当通过c访问，访问的是Child的变量和方法。 称为静态绑定。 静态绑定在程序编译阶段即可决定， 而动态绑定要等到运行时。 实例变量， 静态变量，静态方法， private方法, 都是静态绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s = <span class="string">"static_base"</span>;</span><br><span class="line">    <span class="keyword">public</span> String m = <span class="string">"base"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"base static "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"base non static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s=  <span class="string">"child_base"</span>;</span><br><span class="line">    <span class="keyword">public</span> String m = <span class="string">"child"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child static "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Child non static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Child c = <span class="keyword">new</span> Child();</span><br><span class="line">    Base b = c;</span><br><span class="line">    System.out.println(b.s);</span><br><span class="line">    System.out.println(b.m);</span><br><span class="line">    b.staticTest();</span><br><span class="line">    System.out.println(c.s);</span><br><span class="line">    System.out.println(c.m);</span><br><span class="line">    c.staticTest();</span><br><span class="line">    b.nonStatic();</span><br><span class="line">    c.nonStatic();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static_base</span><br><span class="line">base</span><br><span class="line">base <span class="keyword">static</span> static_base</span><br><span class="line">child_base</span><br><span class="line">child</span><br><span class="line">child <span class="keyword">static</span> child_base</span><br><span class="line">Child non <span class="keyword">static</span></span><br><span class="line">Child non <span class="keyword">static</span></span><br></pre></td></tr></table></figure>

<p>类加载过程: </p>
<p>基类静态代码块<br>子类静态代码块<br>基类实例代码块<br>基类构造函数<br>子类实例代码块<br>子类构造方法</p>
<p>内部类:</p>
<p>静态内部类<br>成员内部类<br>方法内部类<br>匿名内部类</p>
<p>Question:<br>为什么局部内部类和匿名内部类只能访问final的局部变量?<br>Ans:<br>追究其根本原因就是作用域中变量的生命周期导致的;</p>
<p>首先需要知道的一点是:内部类和外部类是处于同一个级别的,内部类不会因为定义在方法中就会随着方法的执行完毕就被销毁.</p>
<p>这里就会产生问题：当外部类的方法结束时，局部变量就会被销毁了，但是内部类对象可能还存在(只有没有人再引用它时，才会死亡)。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的”copy”。这样就好像延长了局部变量的生命周期<br>       问题又出现了：将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也得跟着改变，怎么解决问题呢？</p>
<p>就将局部变量设置为final，对它初始化后，我就不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。这实际上也是一种妥协。</p>
<p>若变量是final时：</p>
<p>若是基本类型，其值是不能改变的，就保证了copy与原始的局部变量的值是一样的；</p>
<p>若是引用类型，其引用是不能改变的，保证了copy与原始的变量引用的是同一个对象。</p>
<p>这就使得局部变量与内部类内建立的拷贝保持一致。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型的内部原理：<br>我们知道，Java有Java编译器和Java虚拟机，编译器讲Java源代码转换为.class文件。虚拟机加载并运行.class文件，对于泛型类，Java编译器会将泛型代码转换为普通的非泛型代码，将参数类型T擦除，替换为Object,插入必要的强制类型转换。Java虚拟机执行的时候，并不知道泛型，只知道普通的类及代码。</p>
<p>对于类型参数，我们都把它当成Object, 但是Java支持extends关键字来限定这个参数的一个上界。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberPair</span>&lt;<span class="title">U</span> <span class="keyword">extends</span> <span class="title">Number</span>, <span class="title">V</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定边界后，类型擦除时就不会转换为Object, 而是转换为它的边界类型。</p>
<p>虽然Integer是Number的子类，但是DynamicArray<integer>不是DynamicArray<number>的子类.</number></integer></p>
<ul>
<li>&lt;? extends E&gt; -&gt; 有限定通配符</li>
<li>&lt;?&gt; 无限定通配符</li>
</ul>
<p>这两种通配符有一个重要的限制，只能读，不能写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DynamicArray&lt;Integer&gt; integers = <span class="keyword">new</span> DynamicArray&lt;&gt;();</span><br><span class="line">   DynamicArray&lt;? extends Number&gt; numbers = integers;</span><br><span class="line">   numbers.add(<span class="number">1</span>); <span class="comment">//错误</span></span><br><span class="line">   numbers.add((Integer)<span class="number">1</span>); <span class="comment">//错误</span></span><br><span class="line">   numbers.add((Number)<span class="number">1</span>); <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<p>因为<code>? extends Number</code>表示是Number的一个子类型，但是不知道具体类型，如果允许写入<br>numbers里面的值就可能会存入Integer, Float等不同类型，无法保证类型安全。</p>
<p>总结: 泛型方法到底应该用通配符形式还是加类型参数</p>
<ol>
<li>通配符形式都可以用类型参数的形式替代，通配符能做的，类型参数都能做</li>
<li>通配符形式可以减少类型参数，形式上往往更简单，可读性好，所以能用通配符就用通配符</li>
<li>如果类型参数有依赖关系，或者返回值依赖类型参数，或者需要写操作，则只能用类型参数</li>
<li>通配符形式和类型参数往往配合使用。</li>
</ol>
<p>超类型通配符 &lt;? super E&gt;</p>
<p><code>&lt;? super E&gt;</code>用于灵活<code>写入</code>, <code>&lt;? extends E&gt;</code>用于灵活<code>读取</code></p>
<p>泛型的限制：</p>
<ul>
<li>不能通过类型参数创建对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g</span><br><span class="line">T t = <span class="keyword">new</span> T(); <span class="comment">// illegal</span></span><br></pre></td></tr></table></figure>

<p>如果一定要创建，可以调用Class.newInstance方法来创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> type.newInstance();</span><br><span class="line">	&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java支持多个上界，以 &amp; 分隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T extends Base &amp; Coparable &amp; Serializable</span><br></pre></td></tr></table></figure>

<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>每个已加载的类在内存都有一份类信息，每个对象都有指向它所属类信息的引用.  这里的类信息对应的类就是java.lang.Class. 且</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object.java </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>

<p>可以通过object.getClass()获取，也可以通过类名直接.class获取 // tips, 基本类型没有.getClass()方法，但是通过int.class，也可以获得对应的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g</span><br><span class="line">Class&lt;Date&gt; cls = Date.class;</span><br><span class="line">Class&lt;Integer&gt; cls = <span class="keyword">int</span>.class;</span><br><span class="line">Class&lt;Void&gt; cls = <span class="keyword">void</span>.class;</span><br></pre></td></tr></table></figure>

<p>也可以通过Class的静态方法.forName获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e.g</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; cls = Class.forName(<span class="string">"java.util.HashMap"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Class方法:</p>
<h3 id="名称信息"><a href="#名称信息" class="headerlink" title="名称信息"></a>名称信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> <span class="comment">//获取全称</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSimpleName</span><span class="params">()</span> <span class="comment">//获取不带包名的名称</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCanonicalName</span><span class="params">()</span> <span class="comment">//获取有好的名称</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Package <span class="title">getPackage</span><span class="params">()</span> <span class="comment">//获取包名</span></span></span><br></pre></td></tr></table></figure>

<p>e.g</p>
<table>
<thead>
<tr>
<th align="left">Class对象</th>
<th align="right">getName</th>
<th align="center">getSimpleName</th>
<th>getCanonicalName</th>
<th>getPackage</th>
</tr>
</thead>
<tbody><tr>
<td align="left">int.class</td>
<td align="right">int</td>
<td align="center">int</td>
<td>int</td>
<td>null</td>
</tr>
<tr>
<td align="left">int[].calss</td>
<td align="right">[I</td>
<td align="center">int[]</td>
<td>int[]</td>
<td>null</td>
</tr>
<tr>
<td align="left">String.class</td>
<td align="right">java.lang.String</td>
<td align="center">String</td>
<td>java.lang.String</td>
<td>java.lang</td>
</tr>
</tbody></table>
<p>数组类型的getName返回值使用[表示数组，几个[表示几个数组.<br>数组的通用类型用一个字符表示, I -&gt; int, L -&gt; 表示类或接口, Z -&gt; boolean, B -&gt; byte, C -&gt; Char, D -&gt; double, F -&gt; float, J -&gt; long, S -&gt; short</p>
<h3 id="字段信息"><a href="#字段信息" class="headerlink" title="字段信息"></a>字段信息</h3><p>类中定义的静态和实例变量都被称为字段, 用Field表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="comment">//返回所有的public字段, 包括其父类的, 如果没有字段，返回空数组</span></span><br><span class="line"><span class="keyword">public</span> Field[] getDeclaredFields() <span class="comment">//返回本类声明的所有字段，包含非public，但不包括父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span> <span class="comment">//返回本类或者父类中指定名称的public字段，找不到抛异常NoSuchFieldException</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getDeclaredField</span><span class="params">(String name)</span> <span class="comment">//返回本类声明中指定名称的字段，找不到抛NoSuchFieldException</span></span></span><br></pre></td></tr></table></figure>

<p>对与Field类中的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> <span class="comment">//获取字段名称</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccessible</span><span class="params">()</span> <span class="comment">//当前程序是否有该字段的访问权限</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">boolean</span> flag)</span> <span class="comment">//flag为true, 表示忽略java访问检查机制, 以允许读写非public字段</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object obj)</span> <span class="comment">//获取知道对象obj中的该字段的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span> <span class="comment">//讲指定obj对象中的该字段设为value</span></span></span><br></pre></td></tr></table></figure>

<p>类中定义的静态和实例方法都被称为方法，用Method表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="comment">//返回所有的public方法，包括其父类, 如果没有方法，返回空数组</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods() <span class="comment">//返回本类声明的所有方法，包括非public的，但不包括父类的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterType)</span> <span class="comment">//返回本类或父类指定名称和参数类型的public方法，找不到抛NoSuchException异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterType)</span> <span class="comment">//返回本类声明的指定名称和参数类型的方法，找不到抛NoSuchException异常</span></span></span><br></pre></td></tr></table></figure>

<h3 id="方法信息"><a href="#方法信息" class="headerlink" title="方法信息"></a>方法信息</h3><p>对于Method中的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">publci String <span class="title">getName</span><span class="params">()</span> <span class="comment">//获取方法名称</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span> <span class="keyword">throws</span> .... <span class="comment">// 在指定对象obj上调用Method代表的方法, 传递args参数列表</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果Method为静态方法，obj可以被忽略，可以为null</span></span></span><br></pre></td></tr></table></figure>

<h3 id="创建对象和构造方法"><a href="#创建对象和构造方法" class="headerlink" title="创建对象和构造方法"></a>创建对象和构造方法</h3><p>可以用newInstance() 调用类的默认构造函数，即无参构造函数的构造方法，来创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">()</span> <span class="keyword">throws</span> ....</span></span><br></pre></td></tr></table></figure>

<h3 id="类型检查和转换"><a href="#类型检查和转换" class="headerlink" title="类型检查和转换"></a>类型检查和转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInstance</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(list <span class="keyword">instanceof</span> ArrayList)</span> 与 下面代码时一样的</span></span><br><span class="line"><span class="function">Class cls </span>= Class.forName(<span class="string">"java.util.ArrayList"</span>);</span><br><span class="line"><span class="keyword">if</span>(cls.isInstance(list))</span><br></pre></td></tr></table></figure>

<p>//….其他方法</p>
<p>总结:<br>反射虽然是灵活的，但一般情况下，不优先建议:</p>
<ol>
<li>反射容易出现运行时错误</li>
<li>反射性能低一点</li>
</ol>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解是给程序添加一些信息，用字符@开头， 这些信息用于修饰它后面紧挨着的其他代码元素，比如，类，接口，字段, 方法，方法中的参数，构造方法等。 注解可以被编译器，程序运行时和其他工具使用，用于增强和修改程序行为</p>
<p>依赖注入 TODO</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理是实现面向切片编程的基础AOP(Aspect Oriented Programming) TODO</p>
<h3 id="静态代理。"><a href="#静态代理。" class="headerlink" title="静态代理。"></a>静态代理。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceProxy</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IService realService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TraceProxy</span><span class="params">(IService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realService = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"entering sayHello"</span>);</span><br><span class="line">        <span class="keyword">this</span>.realService.sayHello();</span><br><span class="line">        System.out.println(<span class="string">"leaving sayHello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    IService realService = <span class="keyword">new</span> RealService();</span><br><span class="line">    IService proxyService = <span class="keyword">new</span> TraceProxy(realService);</span><br><span class="line">    proxyService.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理和实际对象一般有相同接口</p>
<h3 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object realObject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleInvocationHandler</span><span class="params">(Object realObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realObject = realObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"entering "</span> + method.getName());</span><br><span class="line">        Object result = method.invoke(realObject, args);</span><br><span class="line">        System.out.println(<span class="string">"leaving "</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    IService realService = <span class="keyword">new</span> RealService();</span><br><span class="line">    IService proxyService = (IService) Proxy.newProxyInstance(IService.class.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123;IService.class&#125;, <span class="keyword">new</span> SimpleInvocationHandler((realService)));</span><br><span class="line">    proxyService.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span></span><br><span class="line"><span class="function"><span class="comment">// loader表示类加载器</span></span></span><br><span class="line"><span class="function"><span class="comment">// interfaces表示代理类要实现的接口列表</span></span></span><br><span class="line"><span class="function"><span class="comment">// INvocationHandler 只定义了一个方法invoke, 对代理接口所有方法的调用都会转到这里</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// TODO.....</span></span></span><br></pre></td></tr></table></figure>

<p>AOP… TODO</p>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类加载器ClassLoader就是加载其他类的类, 负责将字节码文件加载到内存，创建Class对象。 ClassLoader一般系统提供，不需要自己实现，但是，通过创建自定义的ClassLoader可以实现一些强大灵活的功能</p>
<ul>
<li>热部署 在不重启Java程序的情况下，动态替换类的实现</li>
<li>应用的模块化和相互隔离 不同的ClassLoader可以加载相同的类，但互相隔离，互不影响</li>
<li>不同的地方灵活加载 系统默认的ClassLoader一般从本地.class文件或者jar文件中加载字节码文件， 自定义的可以从共享的Web服务器等等地方加载</li>
</ul>
<p>一般程序运行，会有3个类加载器(Java9之前)</p>
<ol>
<li>启动加载器(Bootstrap ClassLoader)<br> 这个加载器是Java虚拟机实现的一部分，不是Java实现，一般是C++ 负责加载Java的基础类，主要是<java_home>/lib/rt.jar</java_home></li>
<li>拓展类加载器(Extension ClassLoader)<br> 这个类加载器的实现类是sun.misc.Launcher$ExtClassLoader, 负责加载Java的一些拓展类，主要是<java_home>/lib/ext.jar</java_home></li>
<li>应用程序类加载器(ApplicationClassLoader)<br> 这个加载器的实现类是sun.misc.Launcher$AppClassLoader, 负责加载应用程序的类，包括自己写的和第三方引用的</li>
</ol>
<p>加载一个类的过程是:</p>
<ol>
<li>判断是否已经加载过了，加载过了直接返回 Class对象，一个类只会被一个ClassLoader加载一次</li>
<li>如果没有加载，先让父ClassLoader去加载，如果成功，返回得到的Class对象</li>
<li>父ClassLoader没有成功的前提下，自己尝试加载类</li>
</ol>
<p>这个过程一般被称为双亲委派模型，即优先让父ClassLoader去加载，因为这样可以避免Java类库被覆盖的问题</p>
<p>TODO</p>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>TODO</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>Translation-Dumpsys工具</title>
    <url>/posts/122f7e6c/</url>
    <content><![CDATA[<h1 id="dumpsys工具"><a href="#dumpsys工具" class="headerlink" title="dumpsys工具"></a>dumpsys工具</h1><p>翻译, 原文见<a href="https://developer.android.com/studio/command-line/dumpsys" target="_blank" rel="noopener">dympsys</a></p>
<p><code>dumpsys</code> is a tool that runs on Android devices and provides information about system services. You can call <code>dumpsys</code> from the command line using the <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">Androi Debug Bridge(ADB)</a> to get diagonostic output for all system services running on a connected device. This output is typically more verbose than you may want, so use the command line options described below to get output for only the system services you’re interested in. This page also describes how to use <code>dumpsys</code> to accomplish common tasks, such as inspecting input, RAM, battery, or network diagnostics.</p>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>The general syntax for using <code>dumpsys</code> is as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys [-t timeout] [--help | -l | --skip services | service [arguments] | -c | -h]</span><br></pre></td></tr></table></figure>

<p>To get a diagnostic output for all system services for your connected device, simply run <code>adb shell dumpsys</code>. However, this outputs far more information than you would typically want. For more manageable output, specify the service you want to examine by including it in the command. For example, the command below provides system data for input components, such as touchscreens or built-in keyboards:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys input</span><br></pre></td></tr></table></figure>

<p>For a complete list of system services that you can use with <code>dympsys</code>, use the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys -l</span><br></pre></td></tr></table></figure>

<h3 id="Command-line-options"><a href="#Command-line-options" class="headerlink" title="Command line options"></a>Command line options</h3><p>The following table lists the available options when using <code>dumpsys</code>.</p>
<table>
<thead>
<tr>
<th align="center">Option</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-t timeout</td>
<td align="center">Sepecifies the timeout period in seconds. When not specified, the default value is 10 seconds.</td>
</tr>
<tr>
<td align="center">- -help</td>
<td align="center">Prints out help text for the dumpsys tool</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">Outputs a complete list of system services that you can use with dumpsys.</td>
</tr>
<tr>
<td align="center">- -skip <font color="red">services</font></td>
<td align="center">Specifies the <font color="red">services</font> that you do not want to include in the output.</td>
</tr>
<tr>
<td align="center"><font color="red">service</font> [<font color="red">arguments</font>]</td>
<td align="center">Specifies the <font color="red">service</font> that you want to output. Some services may allow you to pass optional <font color="red">arguments</font>. You can learn about these optional arguments by passing the -h option with the service, as shown below: adb shell dumpsys procstats -h</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">When specifying certain services, append this option to output data in a machine-friendly format.</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">For certain services, append this option to see help text and additional options for that service.</td>
</tr>
</tbody></table>
<h2 id="Inspect-input-diagnostics"><a href="#Inspect-input-diagnostics" class="headerlink" title="Inspect input diagnostics"></a>Inspect input diagnostics</h2><p>Sepcifying the <code>input</code> service, as shown below, dumps the state of the system’s input devices, such as keyboards and touchscreens, and the processing of input events.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys input</span><br></pre></td></tr></table></figure>

<p>The output varies depending on the version of Android running on the connected device. The sections below describe the type of infomation you typically see.</p>
<h3 id="Event-hub-state"><a href="#Event-hub-state" class="headerlink" title="Event hub state"></a>Event hub state</h3><p>The following is a sample of what you might see when inspecting the Event Hub State of the input diagnostics:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INPUT MANAGER (dumpsys input)</span><br><span class="line"></span><br><span class="line">Event Hub State:</span><br><span class="line">  BuiltInKeyboardId: -2</span><br><span class="line">  Devices:</span><br><span class="line">    -1: Virtual</span><br><span class="line">      Classes: 0x40000023</span><br><span class="line">      Path: </span><br><span class="line">      Descriptor: a718a782d34bc767f4689c232d64d527998ea7fd</span><br><span class="line">      Location:</span><br><span class="line">      ControllerNumber: 0</span><br><span class="line">      UniqueId: </span><br><span class="line">      Identifier: bus=0x0000, vendor=0x0000, product=0x0000, version=0x0000</span><br><span class="line">      KeyLayoutFile: /system/usr/keylayout/Generic.kl</span><br><span class="line">      KeyCharacterMapFile: /system/usr/keychars/Virtual.kcm</span><br><span class="line">      ConfigurationFile:</span><br><span class="line">      HaveKeyboardLayoutOverlay: false</span><br><span class="line">    1: msm8974-taiko-mtp-snd-card Headset Jack</span><br><span class="line">      Classes: 0x00000080</span><br><span class="line">      Path: /dev/input/event5</span><br><span class="line">      Descriptor: c8e3782483b4837ead6602e20483c46ff801112c</span><br><span class="line">      Location: ALSA</span><br><span class="line">      ControllerNumber: 0</span><br><span class="line">      UniqueId:</span><br><span class="line">      Identifier: bus=0x0000, vendor=0x0000, product=0x0000, version=0x0000</span><br><span class="line">      KeyLayoutFile:</span><br><span class="line">      KeyCharacterMapFile:</span><br><span class="line">      ConfigurationFile:</span><br><span class="line">      HaveKeyboardLayoutOverlay: false</span><br><span class="line">    2: msm8974-taiko-mtp-snd-card Button Jack</span><br><span class="line">      Classes: 0x00000001</span><br><span class="line">      Path: /dev/input/event4</span><br><span class="line">      Descriptor: 96fe62b244c555351ec576b282232e787fb42bab</span><br><span class="line">      Location: ALSA</span><br><span class="line">      ControllerNumber: 0</span><br><span class="line">      UniqueId:</span><br><span class="line">      Identifier: bus=0x0000, vendor=0x0000, product=0x0000, version=0x0000</span><br><span class="line">      KeyLayoutFile: /system/usr/keylayout/msm8974-taiko-mtp-snd-card_Button_Jack.kl</span><br><span class="line">      KeyCharacterMapFile: /system/usr/keychars/msm8974-taiko-mtp-snd-card_Button_Jack.kcm</span><br><span class="line">      ConfigurationFile:</span><br><span class="line">      HaveKeyboardLayoutOverlay: false</span><br><span class="line">    3: hs_detect</span><br><span class="line">      Classes: 0x00000081</span><br><span class="line">      Path: /dev/input/event3</span><br><span class="line">      Descriptor: 485d69228e24f5e46da1598745890b214130dbc4</span><br><span class="line">      Location:</span><br><span class="line">      ControllerNumber: 0</span><br><span class="line">      UniqueId:</span><br><span class="line">      Identifier: bus=0x0000, vendor=0x0001, product=0x0001, version=0x0001</span><br><span class="line">      KeyLayoutFile: /system/usr/keylayout/hs_detect.kl</span><br><span class="line">      KeyCharacterMapFile: /system/usr/keychars/hs_detect.kcm</span><br><span class="line">      ConfigurationFile:</span><br><span class="line">      HaveKeyboardLayoutOverlay: false</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Input-reader-state"><a href="#Input-reader-state" class="headerlink" title="Input reader state"></a>Input reader state</h3><p>The <code>InputReader</code> is responsible for decoding input events from the kernel. Its state dump shows information about how each input device is configured and recent state changes that have occured, such as key presses or touches on the touch screen.<br>The following sample shows the output for a touch screen. Note the information about the resolution of the device and the calibration parameters that were used.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input Reader State</span><br><span class="line">...</span><br><span class="line">  Device 6: Melfas MMSxxx Touchscreen</span><br><span class="line">      IsExternal: false</span><br><span class="line">      Sources: 0x00001002</span><br><span class="line">      KeyboardType: 0</span><br><span class="line">      Motion Ranges:</span><br><span class="line">        X: source=0x00001002, min=0.000, max=719.001, flat=0.000, fuzz=0.999</span><br><span class="line">        Y: source=0x00001002, min=0.000, max=1279.001, flat=0.000, fuzz=0.999</span><br><span class="line">        PRESSURE: source=0x00001002, min=0.000, max=1.000, flat=0.000, fuzz=0.000</span><br><span class="line">        SIZE: source=0x00001002, min=0.000, max=1.000, flat=0.000, fuzz=0.000</span><br><span class="line">        TOUCH_MAJOR: source=0x00001002, min=0.000, max=1468.605, flat=0.000, fuzz=0.000</span><br><span class="line">        TOUCH_MINOR: source=0x00001002, min=0.000, max=1468.605, flat=0.000, fuzz=0.000</span><br><span class="line">        TOOL_MAJOR: source=0x00001002, min=0.000, max=1468.605, flat=0.000, fuzz=0.000</span><br><span class="line">        TOOL_MINOR: source=0x00001002, min=0.000, max=1468.605, flat=0.000, fuzz=0.000</span><br><span class="line">      Touch Input Mapper:</span><br><span class="line">        Parameters:</span><br><span class="line">          GestureMode: spots</span><br><span class="line">          DeviceType: touchScreen</span><br><span class="line">          AssociatedDisplay: id=0, isExternal=false</span><br><span class="line">          OrientationAware: true</span><br><span class="line">        Raw Touch Axes:</span><br><span class="line">          X: min=0, max=720, flat=0, fuzz=0, resolution=0</span><br><span class="line">          Y: min=0, max=1280, flat=0, fuzz=0, resolution=0</span><br><span class="line">          Pressure: min=0, max=255, flat=0, fuzz=0, resolution=0</span><br><span class="line">          TouchMajor: min=0, max=30, flat=0, fuzz=0, resolution=0</span><br><span class="line">          TouchMinor: unknown range</span><br><span class="line">          ToolMajor: unknown range</span><br><span class="line">          ToolMinor: unknown range</span><br><span class="line">          Orientation: unknown range</span><br><span class="line">          Distance: unknown range</span><br><span class="line">          TiltX: unknown range</span><br><span class="line">          TiltY: unknown range</span><br><span class="line">          TrackingId: min=0, max=65535, flat=0, fuzz=0, resolution=0</span><br><span class="line">          Slot: min=0, max=9, flat=0, fuzz=0, resolution=0</span><br><span class="line">        Calibration:</span><br><span class="line">          touch.size.calibration: diameter</span><br><span class="line">          touch.size.scale: 10.000</span><br><span class="line">          touch.size.bias: 0.000</span><br><span class="line">          touch.size.isSummed: false</span><br><span class="line">          touch.pressure.calibration: amplitude</span><br><span class="line">          touch.pressure.scale: 0.005</span><br><span class="line">          touch.orientation.calibration: none</span><br><span class="line">          touch.distance.calibration: none</span><br><span class="line">        SurfaceWidth: 720px</span><br><span class="line">        SurfaceHeight: 1280px</span><br><span class="line">        SurfaceOrientation: 0</span><br><span class="line">        Translation and Scaling Factors:</span><br><span class="line">          XScale: 0.999</span><br><span class="line">          YScale: 0.999</span><br><span class="line">          XPrecision: 1.001</span><br><span class="line">          YPrecision: 1.001</span><br><span class="line">          GeometricScale: 0.999</span><br><span class="line">          PressureScale: 0.005</span><br><span class="line">          SizeScale: 0.033</span><br><span class="line">          OrientationCenter: 0.000</span><br><span class="line">          OrientationScale: 0.000</span><br><span class="line">          DistanceScale: 0.000</span><br><span class="line">          HaveTilt: false</span><br><span class="line">          TiltXCenter: 0.000</span><br><span class="line">          TiltXScale: 0.000</span><br><span class="line">          TiltYCenter: 0.000</span><br><span class="line">          TiltYScale: 0.000</span><br><span class="line">        Last Button State: 0x00000000</span><br><span class="line">        Last Raw Touch: pointerCount=0</span><br><span class="line">        Last Cooked Touch: pointerCount=0</span><br></pre></td></tr></table></figure>

<p>At the end of the input reader state dump there is some information about global configuration parameters, such as the tap interval.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Configuration:</span><br><span class="line">  ExcludedDeviceNames: []</span><br><span class="line">  VirtualKeyQuietTime: 0.0ms</span><br><span class="line">  PointerVelocityControlParameters: scale=1.000, lowThreshold=500.000, highThreshold=3000.000, acceleration=3.000</span><br><span class="line">  WheelVelocityControlParameters: scale=1.000, lowThreshold=15.000, highThreshold=50.000, acceleration=4.000</span><br><span class="line">  PointerGesture:</span><br><span class="line">    Enabled: true</span><br><span class="line">    QuietInterval: 100.0ms</span><br><span class="line">    DragMinSwitchSpeed: 50.0px/s</span><br><span class="line">    TapInterval: 150.0ms</span><br><span class="line">    TapDragInterval: 300.0ms</span><br><span class="line">    TapSlop: 20.0px</span><br><span class="line">    MultitouchSettleInterval: 100.0ms</span><br><span class="line">    MultitouchMinDistance: 15.0px</span><br><span class="line">    SwipeTransitionAngleCosine: 0.3</span><br><span class="line">    SwipeMaxWidthRatio: 0.2</span><br><span class="line">    MovementSpeedRatio: 0.8</span><br><span class="line">    ZoomSpeedRatio: 0.3</span><br></pre></td></tr></table></figure>

<h3 id="Input-dispatcher-state"><a href="#Input-dispatcher-state" class="headerlink" title="Input dispatcher state"></a>Input dispatcher state</h3><p>The <code>InputDispatcher</code> is responsible for sending input events to applications. As shown in the sample output below, its state dump shows information about which window is being touched, the state of the input queue, whether an ANR is in progress, and so on.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input Dispatcher State:</span><br><span class="line">  DispatchEnabled: 1</span><br><span class="line">  DispatchFrozen: 0</span><br><span class="line">  FocusedApplication: &lt;null&gt;</span><br><span class="line">  FocusedWindow: name='Window&#123;3fb06dc3 u0 StatusBar&#125;'</span><br><span class="line">  TouchStates: &lt;no displays touched&gt;</span><br><span class="line">  Windows:</span><br><span class="line">    0: name='Window&#123;357bbbfe u0 SearchPanel&#125;', displayId=0, paused=false, hasFocus=false, hasWallpaper=false, visible=false, canReceiveKeys=false, flags=0x01820100, type=0x000007e8, layer=211000, frame=[0,0][1080,1920], scale=1.000000, touchableRegion=[0,0][1080,1920], inputFeatures=0x00000000, ownerPid=22674, ownerUid=10020, dispatchingTimeout=5000.000ms</span><br><span class="line">    1: name='Window&#123;3b14c0ca u0 NavigationBar&#125;', displayId=0, paused=false, hasFocus=false, hasWallpaper=false, visible=false, canReceiveKeys=false, flags=0x01840068, type=0x000007e3, layer=201000, frame=[0,1776][1080,1920], scale=1.000000, touchableRegion=[0,1776][1080,1920], inputFeatures=0x00000000, ownerPid=22674, ownerUid=10020, dispatchingTimeout=5000.000ms</span><br><span class="line">    2: name='Window&#123;2c7e849c u0 com.vito.lux&#125;', displayId=0, paused=false, hasFocus=false, hasWallpaper=false, visible=true, canReceiveKeys=false, flags=0x0089031a, type=0x000007d6, layer=191000, frame=[-495,-147][1575,1923], scale=1.000000, touchableRegion=[-495,-147][1575,1923], inputFeatures=0x00000000, ownerPid=4697, ownerUid=10084, dispatchingTimeout=5000.000ms</span><br><span class="line">    ...</span><br><span class="line">  MonitoringChannels:</span><br><span class="line">    0: 'WindowManager (server)'</span><br><span class="line">  RecentQueue: length=10</span><br><span class="line">    MotionEvent(deviceId=4, source=0x00001002, action=2, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (335.0, 1465.0)]), policyFlags=0x62000000, age=217264.0ms</span><br><span class="line">    MotionEvent(deviceId=4, source=0x00001002, action=1, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (335.0, 1465.0)]), policyFlags=0x62000000, age=217255.7ms</span><br><span class="line">    MotionEvent(deviceId=4, source=0x00001002, action=0, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (330.0, 1283.0)]), policyFlags=0x62000000, age=216805.0ms</span><br><span class="line">    ...</span><br><span class="line">  PendingEvent: &lt;none&gt;</span><br><span class="line">  InboundQueue: &lt;empty&gt;</span><br><span class="line">  ReplacedKeys: &lt;empty&gt;</span><br><span class="line">  Connections:</span><br><span class="line">    0: channelName='WindowManager (server)', windowName='monitor', status=NORMAL, monitor=true, inputPublisherBlocked=false</span><br><span class="line">      OutboundQueue: &lt;empty&gt;</span><br><span class="line">      WaitQueue: &lt;empty&gt;</span><br><span class="line">    1: channelName='278c1d65 KeyguardScrim (server)', windowName='Window&#123;278c1d65 u0 KeyguardScrim&#125;', status=NORMAL, monitor=false, inputPublisherBlocked=false</span><br><span class="line">      OutboundQueue: &lt;empty&gt;</span><br><span class="line">      WaitQueue: &lt;empty&gt;</span><br><span class="line">    2: channelName='357bbbfe SearchPanel (server)', windowName='Window&#123;357bbbfe u0 SearchPanel&#125;', status=NORMAL, monitor=false, inputPublisherBlocked=false</span><br><span class="line">      OutboundQueue: &lt;empty&gt;</span><br><span class="line">      WaitQueue: &lt;empty&gt;</span><br><span class="line">    ...</span><br><span class="line">  AppSwitch: not pending</span><br><span class="line">    7: channelName='2280455f com.google.android.gm/com.google.android.gm.ConversationListActivityGmail (server)', windowName='Window&#123;2280455f u0 com.google.android.gm/com.google.android.gm.ConversationListActivityGmail&#125;', status=NORMAL, monitor=false, inputPublisherBlocked=false</span><br><span class="line">      OutboundQueue: &lt;empty&gt;</span><br><span class="line">      WaitQueue: &lt;empty&gt;</span><br><span class="line">    8: channelName='1a7be08a com.android.systemui/com.android.systemui.recents.RecentsActivity (server)', windowName='Window&#123;1a7be08a u0 com.android.systemui/com.android.systemui.recents.RecentsActivity EXITING&#125;', status=NORMAL, monitor=false, inputPublisherBlocked=false</span><br><span class="line">      OutboundQueue: &lt;empty&gt;</span><br><span class="line">      WaitQueue: &lt;empty&gt;</span><br><span class="line">    9: channelName='3b14c0ca NavigationBar (server)', windowName='Window&#123;3b14c0ca u0 NavigationBar&#125;', status=NORMAL, monitor=false, inputPublisherBlocked=false</span><br><span class="line">      OutboundQueue: &lt;empty&gt;</span><br><span class="line">      WaitQueue: &lt;empty&gt;</span><br><span class="line">    ...</span><br><span class="line">  Configuration:</span><br><span class="line">    KeyRepeatDelay: 50.0ms</span><br><span class="line">    KeyRepeatTimeout: 500.0ms</span><br></pre></td></tr></table></figure>

<h3 id="Things-to-check-for"><a href="#Things-to-check-for" class="headerlink" title="Things to check for"></a>Things to check for</h3><p>The following is a list of things to cnosider when inspecting the various output for the <code>input</code> service:</p>
<p>Event hub state:</p>
<ul>
<li>All of the input devices you expect are present.</li>
<li>Each input device has an appropriate key layout file, key character map file, and input device configuration file. If the files are missing or contain syntax errors, then they will not be loaded.</li>
<li>Each input device is classified correctly. The bits in the <code>Classes</code> field correspond to flags in <code>EventHub.h</code>, such as <code>INPUT_DEVICE_CLASS_TOUCH_MT</code>.</li>
<li>The <code>BuiltInKeyboardId</code> is correct. If the device does not have a built-in keyboard , then the id must be <code>-2</code>. Otherwise, it should be the id of the built-in keyboard.<ul>
<li>If you observe that the <code>BuiltInKeyboardId</code> is not <code>-2</code> but it should be, then you are missing a key character map file for a special function keypad somwhere. Special function keypad devices should have key character map files that contain just the line <code>type SPECIAL_FUNCTION</code>(that’s what in the <code>tuna-gpio-keykad.kcm</code> file we see mentioned above).</li>
</ul>
</li>
</ul>
<p>Input reader state:</p>
<ul>
<li>All of the expected input devices are present.</li>
<li>Each input device is configured correctly. In particular, check that the touch screen and joystick axes are correct.</li>
</ul>
<p>Input dispatcher state:</p>
<ul>
<li>All input events are processed as expected.</li>
<li>After touching the touch screen and running <code>dumpsys</code> at the same time, the <code>TouchStates</code> line correctly identifies the window that you are touching.</li>
</ul>
<h2 id="Test-UI-performance"><a href="#Test-UI-performance" class="headerlink" title="Test UI performance"></a>Test UI performance</h2><p>Specifying the <code>gfxinfo</code> service provides output with performance information relating to frames of animation that are occurring during the recording phase. The following command uses <code>gfxinfo</code> to gather UI performance data for a specified package name:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys gfxinfo package-name</span><br></pre></td></tr></table></figure>

<p>You can also include the <code>framestats</code> option to provide even more detailed frame timing information from recent frames, so that you can track down and debug problems more accurately, shown below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys gfxinfo package-name framestats</span><br></pre></td></tr></table></figure>

<p>To learn more about using <code>gfxinfo</code> and <code>framestates</code> to integrate UI performance measurements into your testing practices, go to <a href="https://developer.android.com/training/testing/performance.html" target="_blank" rel="noopener">Testing UI performance</a></p>
<h2 id="Inspect-network-diagnostics"><a href="#Inspect-network-diagnostics" class="headerlink" title="Inspect network diagnostics"></a>Inspect network diagnostics</h2><p>Specifying the <code>netstats</code> service provides network usage statistics collected since the previous device booted up.  To output additional information, such as detailed unique user ID(UID) information, include the <code>detail</code> option, as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys netstats detail</span><br></pre></td></tr></table></figure>

<p>The output varies depending on the version of Android running on the connected device. The sections below describe the type of information you typically see.</p>
<h3 id="Active-interfaces-and-active-UID-interfaces"><a href="#Active-interfaces-and-active-UID-interfaces" class="headerlink" title="Active interfaces and active UID interfaces"></a>Active interfaces and active UID interfaces</h3><p>The following sample output lists the active interfaces and active UID interfaces of the connected device. In most cases, the infomration for active interfaces and active UID interfaces is the same.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Active interfaces:</span><br><span class="line">  iface=wlan0 ident=[&#123;type=WIFI, subType=COMBINED, networkId="Guest"&#125;]</span><br><span class="line">Active UID interfaces:</span><br><span class="line">  iface=wlan0 ident=[&#123;type=WIFI, subType=COMBINED, networkId="Guest"&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="‘Dev’-and-‘Xt’-statistics"><a href="#‘Dev’-and-‘Xt’-statistics" class="headerlink" title="‘Dev’ and ‘Xt’ statistics"></a>‘Dev’ and ‘Xt’ statistics</h3><p>The following is a sample output for the Dev statistics section:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Dev stats:</span><br><span class="line">  Pending bytes: 1798112</span><br><span class="line">  History since boot:</span><br><span class="line">  ident=[&#123;type=WIFI, subType=COMBINED, networkId="Guest", metered=false&#125;] uid=-1 set=ALL tag=0x0</span><br><span class="line">    NetworkStatsHistory: bucketDuration=3600</span><br><span class="line">      st=1497891600 rb=1220280 rp=1573 tb=309870 tp=1271 op=0</span><br><span class="line">      st=1497895200 rb=29733 rp=145 tb=85354 tp=185 op=0</span><br><span class="line">      st=1497898800 rb=46784 rp=162 tb=42531 tp=192 op=0</span><br><span class="line">      st=1497902400 rb=27570 rp=111 tb=35990 tp=121 op=0</span><br><span class="line">Xt stats:</span><br><span class="line">  Pending bytes: 1771782</span><br><span class="line">  History since boot:</span><br><span class="line">  ident=[&#123;type=WIFI, subType=COMBINED, networkId="Guest", metered=false&#125;] uid=-1 set=ALL tag=0x0</span><br><span class="line">    NetworkStatsHistory: bucketDuration=3600</span><br><span class="line">      st=1497891600 rb=1219598 rp=1557 tb=291628 tp=1255 op=0</span><br><span class="line">      st=1497895200 rb=29623 rp=142 tb=82699 tp=182 op=0</span><br><span class="line">      st=1497898800 rb=46684 rp=160 tb=39756 tp=191 op=0</span><br><span class="line">      st=1497902400 rb=27528 rp=110 tb=34266 tp=120 op=0</span><br></pre></td></tr></table></figure>

<h3 id="UID-stats"><a href="#UID-stats" class="headerlink" title="UID stats"></a>UID stats</h3><p>The following is a sample of detailed statistics of each UID.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UID stats:</span><br><span class="line">  Pending bytes: 744</span><br><span class="line">  Complete history:</span><br><span class="line">  ident=[[type=MOBILE_SUPL, subType=COMBINED, subscriberId=311111...], [type=MOBILE, subType=COMBINED, subscriberId=311111...]] uid=10007  set=DEFAULT tag=0x0</span><br><span class="line">    NetworkStatsHistory: bucketDuration=7200000</span><br><span class="line">      bucketStart=1406167200000 activeTime=7200000 rxBytes=4666 rxPackets=7 txBytes=1597 txPackets=10 operations=0</span><br><span class="line">  ident=[[type=WIFI, subType=COMBINED, networkId="MySSID"]] uid=10007  set=DEFAULT tag=0x0</span><br><span class="line">    NetworkStatsHistory: bucketDuration=7200000</span><br><span class="line">      bucketStart=1406138400000 activeTime=7200000 rxBytes=17086802 rxPackets=15387 txBytes=1214969 txPackets=8036 operations=28</span><br><span class="line">      bucketStart=1406145600000 activeTime=7200000 rxBytes=2396424 rxPackets=2946 txBytes=464372 txPackets=2609 operations=70</span><br><span class="line">      bucketStart=1406152800000 activeTime=7200000 rxBytes=200907 rxPackets=606 txBytes=187418 txPackets=739 operations=0</span><br><span class="line">      bucketStart=1406160000000 activeTime=7200000 rxBytes=826017 rxPackets=1126 txBytes=267342 txPackets=1175 operations=35</span><br></pre></td></tr></table></figure>

<p>To find the UID for your app, run this command : <code>adb shell dumpsys package your-package-name</code>. Then look for the line labeled <code>userId</code>.</p>
<p>For example, to find network usage for the app ‘com.example.myapp’, run the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys package com.example.myapp | grep userId</span><br></pre></td></tr></table></figure>

<p>the output should be similar to the following:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userid = 10007 gids = [3003, 1028, 1015]</span><br></pre></td></tr></table></figure>

<p>Using the sample dump above, look for the lines that have <code>uid = 10007</code>. Two such lines exist-the first indicates a mobile connection and the second indicates a Wi-Fi connection. Below each line, you can see the following information for each two-hour window(which <code>bucketDuration</code> specifies in milliseconds):</p>
<ul>
<li><code>set=DEFAULT</code> indicates foreground network usage, while <code>set=BACKGROUND</code> indicates background usage. <code>set=ALL</code> implies both</li>
<li><code>tag=0x0</code> indicates the socket tag associated with the traffic. </li>
<li><code>rxBytes</code> and <code>rxPackets</code> represent received bytes and received packets in the corresponding time interval.</li>
<li><code>txBytes</code> and <code>txPackets</code> represent sent(transmitted) bytes and sent packets in the corresponding time interval.</li>
</ul>
<h2 id="Inspect-battery-diagnostics"><a href="#Inspect-battery-diagnostics" class="headerlink" title="Inspect battery diagnostics"></a>Inspect battery diagnostics</h2><p>Specifying the <code>batterystats</code> service generates interesting statistical data about battery usage on a device, organized by unique user ID(UID). To learn how to use <code>dumpsys</code> to test your app for Doze and App Standby, go to <a href="https://developer.android.com/training/monitoring-device-state/doze-standby.html#testing_doze_and_app_standby" target="_blank" rel="noopener">Testing with Doze and App Standby</a>.</p>
<p>The command for <code>batterystats</code> is as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys batterystats options</span><br></pre></td></tr></table></figure>

<p>To see a list of additional options available to <code>batterystats</code>, include the <code>-h</code> option. The example below outputs battery usage statistics for a specified app package since the device was last charged:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys batterystats --charged package-name</span><br></pre></td></tr></table></figure>

<p>The output typically includes the following:</p>
<ul>
<li>History of battery-related events</li>
<li>Global statistics for the device</li>
<li>Approximate power use per UID and system component</li>
<li>Per-app mobile milliseconds per packet</li>
<li>System UID aggregated statistics</li>
<li>App UID aggregated statistics</li>
</ul>
<p>To learn more about using <code>batterystats</code> and generating an HTML visualization of the output, which makes it easier to understand and diagnose battery-related issues, read <a href="https://developer.android.com/studio/profile/battery-historian.html" target="_blank" rel="noopener">Profile battery usage with Batterystats and Battery Historian</a>.</p>
<h3 id="Inspecting-machine-friendly-output"><a href="#Inspecting-machine-friendly-output" class="headerlink" title="Inspecting machine-friendly output"></a>Inspecting machine-friendly output</h3><p>You can generate <code>batterystats</code> output in machine-readable CSV format by using the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys batterystats --checkin</span><br></pre></td></tr></table></figure>

<p>The following is an example of the output you should see:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">9,0,i,vers,11,116,K,L</span><br><span class="line">9,0,i,uid,1000,android</span><br><span class="line">9,0,i,uid,1000,com.android.providers.settings</span><br><span class="line">9,0,i,uid,1000,com.android.inputdevices</span><br><span class="line">9,0,i,uid,1000,com.android.server.telecom</span><br><span class="line">...</span><br><span class="line">9,0,i,dsd,1820451,97,s-,p-</span><br><span class="line">9,0,i,dsd,3517481,98,s-,p-</span><br><span class="line">9,0,l,bt,0,8548446,1000983,8566645,1019182,1418672206045,8541652,994188</span><br><span class="line">9,0,l,gn,0,0,666932,495312,0,0,2104,1444</span><br><span class="line">9,0,l,m,6794,0,8548446,8548446,0,0,0,666932,495312,0,697728,0,0,0,5797,0,0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Battery-usage observations may be per-UID or system-level; data is selected for inclusion based on its usefulness in analyzing battery performance. Each row represents an observation with the following elements:</p>
<ul>
<li>A dummy integer</li>
<li>The user ID associated with the observation</li>
<li>The aggregation mode:<ul>
<li>“i” for information not tied to charged/uncharged status.</li>
<li>“I” for –charged(usage since last charge).</li>
<li>“u” for –unplugged(usage since last unplugged). Deprecated in Android 5.1.1</li>
</ul>
</li>
<li>Section identifier, which determines how to interpret subsequent values in the line</li>
</ul>
<p>The table below describes the various section identifiers you may see:<br>// TODO </p>
<h2 id="View-memory-allocations"><a href="#View-memory-allocations" class="headerlink" title="View memory allocations"></a>View memory allocations</h2><p>You can inspect your app’s memory usage in one of two ways: over a period of time using <code>procstats</code> or at a particular snapshot in time using <code>meminfo</code>. The sections below show you how to use either method.</p>
<h3 id="procstats"><a href="#procstats" class="headerlink" title="procstats"></a>procstats</h3><p><code>procstats</code> makes it possible to see how your app is behaving over time-including how long it runs in the background and how much memory it uses during that time. It helps you quickly find inefficiencies and misbehaviors in your app, such as memory leaks, that can affect how it performs , especially when running on low-memory devices. Its state dump displays statistics about every application’s runtime, proportional set size(PSS) and unique set size(USS).</p>
<p>To get application memory usage stats over the last three hours, in human-readable format, run the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys procstats --hours 3</span><br></pre></td></tr></table></figure>

<p>As can be seen in the example below, the output displays what percentage of time the application was running , and the PSS and USS as <code>minPSS-avgPSS-maxPSS/minUSS-avgUSS-maxUSS</code> over the number of samples.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">AGGREGATED OVER LAST 3 HOURS:</span><br><span class="line">  * com.android.systemui / u0a20 / v22:</span><br><span class="line">           TOTAL: 100% (109MB-126MB-159MB/108MB-125MB-157MB over 18)</span><br><span class="line">      Persistent: 100% (109MB-126MB-159MB/108MB-125MB-157MB over 18)</span><br><span class="line">  * com.android.nfc / 1027 / v22:</span><br><span class="line">           TOTAL: 100% (17MB-17MB-17MB/16MB-16MB-16MB over 18)</span><br><span class="line">      Persistent: 100% (17MB-17MB-17MB/16MB-16MB-16MB over 18)</span><br><span class="line">  * android.process.acore / u0a4 / v22:</span><br><span class="line">           TOTAL: 100% (14MB-15MB-15MB/14MB-14MB-14MB over 20)</span><br><span class="line">          Imp Fg: 100% (14MB-15MB-15MB/14MB-14MB-14MB over 20)</span><br><span class="line">  ...</span><br><span class="line">  * com.coulombtech / u0a106 / v26:</span><br><span class="line">           TOTAL: 0.01%</span><br><span class="line">        Receiver: 0.01%</span><br><span class="line">        (Cached): 21% (4.9MB-5.0MB-5.2MB/3.8MB-3.9MB-4.1MB over 2)</span><br><span class="line">  * com.softcoil.mms / u0a86 / v32:</span><br><span class="line">           TOTAL: 0.01%</span><br><span class="line">        (Cached): 0.25%</span><br><span class="line">  * com.udemy.android / u0a91 / v38:</span><br><span class="line">           TOTAL: 0.01%</span><br><span class="line">        Receiver: 0.01%</span><br><span class="line">        (Cached): 0.75% (9.8MB-9.8MB-9.8MB/8.5MB-8.5MB-8.5MB over 1)</span><br><span class="line">  ...</span><br><span class="line">Run time Stats:</span><br><span class="line">  SOff/Norm: +32m52s226ms</span><br><span class="line">  SOn /Norm: +2h10m8s364ms</span><br><span class="line">       Mod : +17s930ms</span><br><span class="line">      TOTAL: +2h43m18s520ms</span><br><span class="line"></span><br><span class="line">Memory usage:</span><br><span class="line">  Kernel : 265MB (38 samples)</span><br><span class="line">  Native : 73MB (38 samples)</span><br><span class="line">  Persist: 262MB (90 samples)</span><br><span class="line">  Top    : 190MB (325 samples)</span><br><span class="line">  ImpFg  : 204MB (569 samples)</span><br><span class="line">  ImpBg  : 754KB (345 samples)</span><br><span class="line">  Service: 93MB (1912 samples)</span><br><span class="line">  Receivr: 227KB (1169 samples)</span><br><span class="line">  Home   : 66MB (12 samples)</span><br><span class="line">  LastAct: 30MB (255 samples)</span><br><span class="line">  CchAct : 220MB (450 samples)</span><br><span class="line">  CchCAct: 193MB (71 samples)</span><br><span class="line">  CchEmty: 182MB (652 samples)</span><br><span class="line">  Cached : 58MB (38 samples)</span><br><span class="line">  Free   : 60MB (38 samples)</span><br><span class="line">  TOTAL  : 1.9GB</span><br><span class="line">  ServRst: 50KB (278 samples)</span><br><span class="line"></span><br><span class="line">          Start time: 2015-04-08 13:44:18</span><br><span class="line">  Total elapsed time: +2h43m18s521ms (partial) libart.so</span><br></pre></td></tr></table></figure>

<h3 id="meminfo"><a href="#meminfo" class="headerlink" title="meminfo"></a>meminfo</h3><p>You can record a snapshot of how your app’s memory is divided between different types of RAM allocation with the following command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo package_name|pid [-d]</span><br></pre></td></tr></table></figure>

<p>The -d flag prints more info related to Dalvik and ART memory usage.<br>The output lists all of your app’s current allocations, measured in kilobytes.<br>When inspecting this information, you should be familiar with the following types of allocation:</p>
<ul>
<li>Private(Clean and Dirty) RAM<br>  This is memory that is being used by only your process. This is the bulk of the RAM that the system can reclaim when your app’s process is destroyed. Generally, the most important portion of this is private dirty RAM, which is the most expensive because it is used by only your process and its contents exist only in RAM so can’t be paged to storage(beacuse Android does not use swap). All Dalvik and native heap allocations your make will be private dirty RAM; Dalvik and native allocations you share with the Zygote process are shared dirty RAM.</li>
<li>Proportional Set Size (PSS)<br>  This is a measurement of your app’s RAM use that takes into account sharing pages across processes. Any RAM pages that are unique to your process directly contribute to its PSS value, while pages that are shared with other processes contribute to the PSS value only in proportion to the amount of sharing. For example, a page that is shared between two processes will contribute half of its size to the PSS of each process.</li>
</ul>
<p>A nice characteristic of the PSS measurement is that you can add up the PSS across all processes to determine the actual memory being used by all processes. This means PSS is a good measure for the actual RAM weight of a process and for comparison against the RAM use of other processes and the total available RAm.</p>
<p>For example, below is the output for Map’s process on a Nexus 5 device. There is a lot of information here, but key points for discussion are listed below.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo com.google.android.apps.maps -d</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">** MEMINFO in pid 18227 [com.google.android.apps.maps] **</span><br><span class="line">                   Pss  Private  Private  Swapped     Heap     Heap     Heap</span><br><span class="line">                 Total    Dirty    Clean    Dirty     Size    Alloc     Free</span><br><span class="line">                ------   ------   ------   ------   ------   ------   ------</span><br><span class="line">  Native Heap    10468    10408        0        0    20480    14462     6017</span><br><span class="line">  Dalvik Heap    34340    33816        0        0    62436    53883     8553</span><br><span class="line"> Dalvik Other      972      972        0        0</span><br><span class="line">        Stack     1144     1144        0        0</span><br><span class="line">      Gfx dev    35300    35300        0        0</span><br><span class="line">    Other dev        5        0        4        0</span><br><span class="line">     .so mmap     1943      504      188        0</span><br><span class="line">    .apk mmap      598        0      136        0</span><br><span class="line">    .ttf mmap      134        0       68        0</span><br><span class="line">    .dex mmap     3908        0     3904        0</span><br><span class="line">    .oat mmap     1344        0       56        0</span><br><span class="line">    .art mmap     2037     1784       28        0</span><br><span class="line">   Other mmap       30        4        0        0</span><br><span class="line">   EGL mtrack    73072    73072        0        0</span><br><span class="line">    GL mtrack    51044    51044        0        0</span><br><span class="line">      Unknown      185      184        0        0</span><br><span class="line">        TOTAL   216524   208232     4384        0    82916    68345    14570</span><br><span class="line"></span><br><span class="line"> Dalvik Details</span><br><span class="line">        .Heap     6568     6568        0        0</span><br><span class="line">         .LOS    24771    24404        0        0</span><br><span class="line">          .GC      500      500        0        0</span><br><span class="line">    .JITCache      428      428        0        0</span><br><span class="line">      .Zygote     1093      936        0        0</span><br><span class="line">   .NonMoving     1908     1908        0        0</span><br><span class="line"> .IndirectRef       44       44        0        0</span><br><span class="line"></span><br><span class="line"> Objects</span><br><span class="line">               Views:       90         ViewRootImpl:        1</span><br><span class="line">         AppContexts:        4           Activities:        1</span><br><span class="line">              Assets:        2        AssetManagers:        2</span><br><span class="line">       Local Binders:       21        Proxy Binders:       28</span><br><span class="line">       Parcel memory:       18         Parcel count:       74</span><br><span class="line">    Death Recipients:        2      OpenSSL Sockets:        2</span><br></pre></td></tr></table></figure>

<p>Here is an older dumpsys on Dalvik of the gmail app:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">** MEMINFO in pid 9953 [com.google.android.gm] **</span><br><span class="line">                 Pss     Pss  Shared Private  Shared Private    Heap    Heap    Heap</span><br><span class="line">               Total   Clean   Dirty   Dirty   Clean   Clean    Size   Alloc    Free</span><br><span class="line">              ------  ------  ------  ------  ------  ------  ------  ------  ------</span><br><span class="line">  Native Heap      0       0       0       0       0       0    7800    7637(6)  126</span><br><span class="line">  Dalvik Heap   5110(3)    0    4136    4988(3)    0       0    9168    8958(6)  210</span><br><span class="line"> Dalvik Other   2850       0    2684    2772       0       0</span><br><span class="line">        Stack     36       0       8      36       0       0</span><br><span class="line">       Cursor    136       0       0     136       0       0</span><br><span class="line">       Ashmem     12       0      28       0       0       0</span><br><span class="line">    Other dev    380       0      24     376       0       4</span><br><span class="line">     .so mmap   5443(5) 1996    2584    2664(5) 5788    1996(5)</span><br><span class="line">    .apk mmap    235      32       0       0    1252      32</span><br><span class="line">    .ttf mmap     36      12       0       0      88      12</span><br><span class="line">    .dex mmap   3019(5) 2148       0       0    8936    2148(5)</span><br><span class="line">   Other mmap    107       0       8       8     324      68</span><br><span class="line">      Unknown   6994(4)    0     252    6992(4)    0       0</span><br><span class="line">        TOTAL  24358(1) 4188    9724   17972(2)16388    4260(2)16968   16595     336</span><br><span class="line"></span><br><span class="line"> Objects</span><br><span class="line">               Views:    426         ViewRootImpl:        3(8)</span><br><span class="line">         AppContexts:      6(7)        Activities:        2(7)</span><br><span class="line">              Assets:      2        AssetManagers:        2</span><br><span class="line">       Local Binders:     64        Proxy Binders:       34</span><br><span class="line">    Death Recipients:      0</span><br><span class="line">     OpenSSL Sockets:      1</span><br><span class="line"></span><br><span class="line"> SQL</span><br><span class="line">         MEMORY_USED:   1739</span><br><span class="line">  PAGECACHE_OVERFLOW:   1164          MALLOC_SIZE:       62</span><br></pre></td></tr></table></figure>

<p>In general, be concerned with only the <code>Pss Total</code> and <code>Private Dirty</code> columns. In some cases, the <code>Private Clean</code> and <code>Heap Alloc</code> columns also offer interesting data. More information about the different memory allocations(the rows) you should observe follows:</p>
<p><code>Dalvik Heap</code><br>    The RAM used by Dalvik allocations in your app. The <code>Pss Total</code> includes all Zygote allocations(weighted by their sharing across processes, as described in the PSS definition above). The <code>Private Dirty</code> number is the actual RAM committed to only your app’s heap, composed of your own allocations and any Zygote allocation pages that have been modified since forking your app’s process from Zygote.<br>    The <code>Heap Alloc</code> is the amount of memory that the Dalvik and native heap allocators keep track of for your app. This value is larger thatn <code>Pss Total</code> and <code>Private Dirty</code> because your process was forked from Zygote and it includes allocations that your process shares with all the others.</p>
<p><code>.so mmap</code> and <code>.dex mmap</code><br>    The RAM being used for mapped <code>.so</code>(native) and <code>.dex</code> (Dalvik or ART) code. The <code>Pss Total</code> number includes platform code shared across apps; t he <code>Private Clean</code> is your app’s own code. Generally, the actual mapped size will be much larger-the RAM here is only what currently needs to be in RAM for code  that has been executed by the app. However, the .so mmap has a large private dirty, which is due to fix-ups to the native code when it was loaded into its final address.</p>
<p><code>.oat mmap</code><br>    This is the amount of RAM used by the code image which is based off of the preloaded classes which are commonly used by multiple apps. This image is shared across all apps and is unaffected by particular apps.</p>
<p><code>.art mmap</code><br>    This is the amount of RAM used buy the heap image which is based off of the preloaded class which are commonly used by multiple apps. this image is shared across all apps and is unaffected by particular apps. Even though the ART image contains <code>Object</code> instances, it does not count towards your heap size.</p>
<p><code>.Heap</code>(only with -d flag)<br>    This is the amount of heap memory for your app. This excludes objects in the image and large object spaces, but includes the zygote space and non-moving space.</p>
<p><code>.LOS</code>(only with -d flag)<br>    This is the amount of RAM used by the ART large object space. This includes zygote large objects. Large objects are all primitive array allocations larger than 12KB.</p>
<p><code>.GC</code> (only with -d flag)<br>    This is the overhead cost for garbage collection. There is not really any way to reduce this overhead.</p>
<p><code>.JITCache</code> (only with -d flag)<br>    This is the amount of memory used by the JIT data and code caches. Typically, this is zero since all of the apps will be compiled at installed time.</p>
<p><code>.Zygote</code> (only with -d flag)<br>    This is the amount of memory used by the zygote space. The zygote space is created during device startup and is never allocated into.</p>
<p><code>.NonMoving</code> (only with -d flag)<br>    This is the amount of RAM used by the ART non-moving space. The non-moving space contains special non-movable objects such as fields and methods . You can reduce this section by using fewer fields and methods in your app.</p>
<p><code>.IndirectRef</code> (only with -d flag)<br>    This is the amount of RAM used by the ART indirect reference tables. Usually this amount is small, but if it is too high, it might be possible to reduce it by reducing the number of local and global JNI references used. </p>
<p><code>Unknown</code><br>    Any RAM pages that the system could not classify into one of the other more specific items. Currently, this contains mostly native allocations, which cannot be identified by the tool when collecting this data due to Address Space Layout Randomization (ASLR). Like the Dalvik heap, the <code>Pss Total</code> for Unknown takes into account sharing with Zygote, and <code>Private Dirty</code> is unknown RAM dedicated to only your app.</p>
<p><code>TOTAL</code><br>    The total Proportional Set Size (PSS) RAM used by your process. This is the sum of all PSS fields above it. It indicates the overall memory weight of your process, which can be directly compared with other processes and the total available RAM.<br>    The <code>Private Dirty</code> and <code>Private Clean</code> are the total allocations within your process, which are not shared with other processes. Together (especially <code>Private Dirty</code>), this is the amount of RAM that will be released back to the system when your process is destroyed. Dirty RAM is pages that have been modified and so must stay committed to RAM (because there is no swap); clean RAM is pages that have been mapped from a persistent file (such as code being executed) and so can be paged out if not used for a while.</p>
<p><code>ViewRootImp</code><br>    The number of root views that are active in your process. Each root view is associated with a window, so this can help you identify memory leaks involving dialogs or other windows.</p>
<p><code>AppContext</code> and <code>Activities</code><br>    The number of app Context and Activity objects that currently live in your process. This can help you to quickly identify leaked Activity objects that can’t be garbage collected due to static references on them, which is common. These objects often have many other allocations associated with them, which makes them a good way to track large memory leaks.</p>
]]></content>
      <categories>
        <category>Translation</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidTranslation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Fragment懒加载</title>
    <url>/posts/34ef83a0/</url>
    <content><![CDATA[<p>通用的使用方法是: <code>Fragment</code> + <code>ViewPager</code>配合使用</p>
<p>ViewPager的解析，单独放到其他博文来说，这里主要注意一下,ViewPager的常用的两种Adapter的用法和区别:</p>
<ul>
<li><p>FragmentPagerAdapter</p>
<p> 将每一个生成的Fragment都放到内存里, 无论怎么滑动ViewPager, 都不会有一个Fragment的onDestroy被调用. 当Fragment不在ViewPager.setOffScreenPageLimit()保护范围内，相应的Fragment的onDestroyView会执行，但是Fragment仍然存在.</p>
</li>
<li><p>FragmentStatePagerAdapter</p>
<p>  当Fragment不在ViewPager.setOffScreenPageLimit()保护范围内，Fragment就会被销毁, onDestroy方法会执行</p>
</li>
</ul>
<p>刚New出来的Fragment没有开始它的生命周期，只有被添加到FragmentManager时，生命周期才开始</p>
<p>最好的实现懒加载的方案就是通过重写setUserVisibleHint()方法来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set a hint to the system about whether this fragment's UI is currently visible</span></span><br><span class="line"><span class="comment">    * to the user. This hint defaults to true and is persistent across fragment instance</span></span><br><span class="line"><span class="comment">    * state save and restore.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;An app may set this to false to indicate that the fragment's UI is</span></span><br><span class="line"><span class="comment">    * scrolled out of visibility or is otherwise not directly visible to the user.</span></span><br><span class="line"><span class="comment">    * This may be used by the system to prioritize operations such as fragment lifecycle updates</span></span><br><span class="line"><span class="comment">    * or loader ordering behavior.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method may be called outside of the fragment lifecycle</span></span><br><span class="line"><span class="comment">    * and thus has no ordering guarantees with regard to fragment lifecycle method calls.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Prior to Android N there was a platform bug that could cause</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;setUserVisibleHint&lt;/code&gt; to bring a fragment up to the started state before its</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;FragmentTransaction&lt;/code&gt; had been committed. As some apps relied on this behavior,</span></span><br><span class="line"><span class="comment">    * it is preserved for apps that declare a &lt;code&gt;targetSdkVersion&lt;/code&gt; of 23 or lower.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isVisibleToUser true if this fragment's UI is currently visible to the user (default),</span></span><br><span class="line"><span class="comment">    *                        false if it is not.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span></span></span><br></pre></td></tr></table></figure>

<p><code>isVisibleToUserFragment</code>标示当前Fragment是否处于对用户的可见状态, 贯穿整个<code>Fragment</code>生命周期, 也就是可能在<code>Fragment</code>生命周期以外被调用。 因此，在<code>setUserVisibleHint</code>方法中处理懒加载的话，需要保证其他变量以及<code>view</code>都已经初始化完成，防止空指针问题. </p>
<p>可以参考开源代码: <a href="https://github.com/TellH/FragmentLazyLoading" target="_blank" rel="noopener">https://github.com/TellH/FragmentLazyLoading</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
        <tag>AndroidFragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Android setContentView与LayoutInflater加载解析机制源码分析</title>
    <url>/posts/5259ae3c/</url>
    <content><![CDATA[<p>Activity中的setContentView源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    getWindow().setContentView(layoutResID);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    getWindow().setContentView(view);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">    getWindow().setContentView(view, params);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里都是调用的window的setContentView方法. 这里的Window是一个抽象类，具体实现类在PhoneWindow.java中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></span><br><span class="line">       <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></span><br><span class="line">       <span class="comment">// before this happens.</span></span><br><span class="line">       <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">           installDecor();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">           mContentParent.removeAllViews();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">           <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class="line">                   getContext());</span><br><span class="line">           transitionTo(newScene);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">       &#125;</span><br><span class="line">       mContentParent.requestApplyInsets();</span><br><span class="line">       <span class="keyword">final</span> Callback cb = getCallback();</span><br><span class="line">       <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">           cb.onContentChanged();</span><br><span class="line">       &#125;</span><br><span class="line">       mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">       setContentView(view, <span class="keyword">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></span><br><span class="line">       <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></span><br><span class="line">       <span class="comment">// before this happens.</span></span><br><span class="line">       <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">           installDecor();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">           mContentParent.removeAllViews();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">           view.setLayoutParams(params);</span><br><span class="line">           <span class="keyword">final</span> Scene newScene = <span class="keyword">new</span> Scene(mContentParent, view);</span><br><span class="line">           transitionTo(newScene);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           mContentParent.addView(view, params);</span><br><span class="line">       &#125;</span><br><span class="line">       mContentParent.requestApplyInsets();</span><br><span class="line">       <span class="keyword">final</span> Callback cb = getCallback();</span><br><span class="line">       <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">           cb.onContentChanged();</span><br><span class="line">       &#125;</span><br><span class="line">       mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>第一次会通过installDecor()创建mContentParent的ViewGroup. This is the view in which the window contents are placed. It is either mDecor itself, or a child of mDecor where the contents go.<br>setContentView(int layoutResID)通过mLayoutInflater.inflate(layoutResID, mContentParent);把layout布局文件加入到mContentParent, 而setContentView(View view, ViewGroup.LayoutParams params)直接addView()加进来。</p>
<p>其中installDecor()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PhoneWindow.java</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installDecor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span>(mDecor == <span class="keyword">null</span>) &#123;</span><br><span class="line">		mDecor = generateDecor(-<span class="number">1</span>); <span class="comment">//其中 mDecor 是 DecorView类型, DecorView extends FramenLayout</span></span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">		mContentParent = generateLayout(mDecor); <span class="comment">//mContentParent是ViewGroup类型</span></span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ViewGroup <span class="title">generateLayout</span><span class="params">(DecorView decor)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Inflate the window decor.</span></span><br><span class="line"></span><br><span class="line">   	<span class="keyword">int</span> layoutResource;</span><br><span class="line">   	<span class="keyword">int</span> features = getLocalFeatures();</span><br><span class="line">   	<span class="comment">// System.out.println("Features: 0x" + Integer.toHexString(features));</span></span><br><span class="line">   	<span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; ((<span class="number">1</span> &lt;&lt; FEATURE_PROGRESS) | (<span class="number">1</span> &lt;&lt; FEATURE_INDETERMINATE_PROGRESS))) != <span class="number">0</span></span><br><span class="line">               &amp;&amp; (features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_BAR)) == <span class="number">0</span>) &#123;</span><br><span class="line">       	<span class="comment">// Special case for a window with only a progress bar (and title).</span></span><br><span class="line">       	<span class="comment">// XXX Need to have a no-title version of embedded windows.</span></span><br><span class="line">       	layoutResource = R.layout.screen_progress;</span><br><span class="line">       	<span class="comment">// System.out.println("Progress!");</span></span><br><span class="line">   	&#125; </span><br><span class="line">   	<span class="comment">// 这里根据不同的feature, 来加载不同的layoutResource</span></span><br><span class="line"></span><br><span class="line">   	mDecor.startChanging();</span><br><span class="line">   	mDecor.onResourcesLoaded(mLayoutInflater, layoutResource);</span><br><span class="line">	...</span><br><span class="line">   	ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</span><br><span class="line">   	<span class="keyword">if</span> (contentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">       	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Window couldn't find content container view"</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">   	...</span><br><span class="line">   	<span class="keyword">return</span> contentParent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以这里installDecor方法，就是生成了mDecor和mContentParent对象, mContentParent为id为com.android.internal.R.id.content的ViewGroup</p>
<p>比如根据feature获取到的layoutResource为系统的R.layout.screen_simple.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">ViewStub</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_mode_bar_stub"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:inflatedId</span>=<span class="string">"@+id/action_mode_bar"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout</span>=<span class="string">"@layout/action_mode_bar"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:theme</span>=<span class="string">"?attr/actionBarTheme"</span> /&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">android:id</span>=<span class="string">"@android:id/content"</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">android:foregroundInsidePadding</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">android:foregroundGravity</span>=<span class="string">"fill_horizontal|top"</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">android:foreground</span>=<span class="string">"?android:attr/windowContentOverlay"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中的FrameLayout(id = content)为mContentParent</p>
<p><img src="https://img-blog.csdn.net/20150526104647053" alt="img"></p>
<p>也就是DecroView根据不同feature选择不同的系统R.layout文件加载进来，然后不同的R.layout文件里id为@android:id/content的ViewGroup是我们自己写的布局的父布局。</p>
<p>再来看下LayoutInflater.inflate方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LayoutInflater.java</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> inflate(resource, root, root != <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> inflate(parser, root, root != <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Resources res = getContext().getResources();</span><br><span class="line">       <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">           Log.d(TAG, <span class="string">"INFLATING from resource: \""</span> + res.getResourceName(resource) + <span class="string">"\" ("</span></span><br><span class="line">                   + Integer.toHexString(resource) + <span class="string">")"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> inflate(parser, root, attachToRoot);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           parser.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</span><br><span class="line">           Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"inflate"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> Context inflaterContext = mContext;</span><br><span class="line">           <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class="line">           Context lastContext = (Context) mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">           mConstructorArgs[<span class="number">0</span>] = inflaterContext;</span><br><span class="line">           View result = root;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// Look for the root node.</span></span><br><span class="line">               <span class="keyword">int</span> type;</span><br><span class="line">               <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class="line">                       type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                   <span class="comment">// Empty</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(parser.getPositionDescription()</span><br><span class="line">                           + <span class="string">": No start tag found!"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                   System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">                   System.out.println(<span class="string">"Creating root view: "</span></span><br><span class="line">                           + name);</span><br><span class="line">                   System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></span><br><span class="line">                               + <span class="string">"ViewGroup root and attachToRoot=true"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   rInflate(parser, root, inflaterContext, attrs, <span class="keyword">false</span>);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// Temp is the root view that was found in the xml</span></span><br><span class="line">                   <span class="comment">// 注意这里</span></span><br><span class="line">                   <span class="keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class="line"></span><br><span class="line">                   ViewGroup.LayoutParams params = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                           System.out.println(<span class="string">"Creating params from root: "</span> +</span><br><span class="line">                                   root);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">// Create layout params that match root, if supplied</span></span><br><span class="line">                       params = root.generateLayoutParams(attrs);</span><br><span class="line">                       <span class="keyword">if</span> (!attachToRoot) &#123;</span><br><span class="line">                           <span class="comment">// Set the layout params for temp if we are not</span></span><br><span class="line">                           <span class="comment">// attaching. (If we are, we use addView, below)</span></span><br><span class="line">                           temp.setLayoutParams(params);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                       System.out.println(<span class="string">"-----&gt; start inflating children"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// Inflate all children under temp against its context.</span></span><br><span class="line">                   rInflateChildren(parser, temp, attrs, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                       System.out.println(<span class="string">"-----&gt; done inflating children"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// We are supposed to attach all the views we found (int temp)</span></span><br><span class="line">                   <span class="comment">// to root. Do that now.</span></span><br><span class="line">                   <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class="line">                       root.addView(temp, params);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// Decide whether to return the root that was passed in or the</span></span><br><span class="line">                   <span class="comment">// top view found in xml.</span></span><br><span class="line">                   <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                       result = temp;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">               <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(e.getMessage(), e);</span><br><span class="line">               ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">               <span class="keyword">throw</span> ie;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(parser.getPositionDescription()</span><br><span class="line">                       + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">               ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">               <span class="keyword">throw</span> ie;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">// Don't retain static reference on context.</span></span><br><span class="line">               mConstructorArgs[<span class="number">0</span>] = lastContext;</span><br><span class="line">               mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">               Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>其中所有的方法最终都会调用到<code>public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)</code> 里, 其中的XmlPullParser的意义是<code>XML dom node containing the description of the view herarchy.</code></p>
<p>注意最后这块代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We are supposed to attach all the views we found (int temp)</span></span><br><span class="line"><span class="comment">// to root. Do that now.</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class="line">   	root.addView(temp, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decide whether to return the root that was passed in or the</span></span><br><span class="line"><span class="comment">// top view found in xml.</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">   	result = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果传入root切不为空，且attachToRoot, 则把R.layout解析后的view -&gt; temp包裹在root中并返回，如果传入的root为空或者不attachToRoot, 则直接返回temp. 其中, Temp is the root view that was found in the xml</p>
<p>Tips:<br>layout_width和layout_height不是用来设置view大小的，而是设置view在布局中的大小的</p>
<p>总结:</p>
<ul>
<li>LayoutInflater的静态方法from获取LayoutInflater的实例</li>
<li>inflate解析xml资源</li>
<li>inflate调用createViewFromTag创建顶级View</li>
<li>rInflateChildren递归调用rInflate创建所有的子view</li>
<li>rInflate通过调用createViewFromTag创建一个真正的View</li>
<li>createViewFromTag优先使用 mFactory2、mFactory、mPrivateFactory来创建View，如果创建失败，则最终调用createView方法来创建。创建的过程中用了parent,name,context,attrs等参数，然后运用反射的方法，创建出 View，</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 性能优化</title>
    <url>/posts/dee8b541/</url>
    <content><![CDATA[<h2 id="Android-性能优化"><a href="#Android-性能优化" class="headerlink" title="Android 性能优化"></a>Android 性能优化</h2><p><a href="https://www.jianshu.com/p/797395731747" target="_blank" rel="noopener">https://www.jianshu.com/p/797395731747</a><br><a href="https://juejin.im/post/5d95f4a4f265da5b8f10714b" target="_blank" rel="noopener">https://juejin.im/post/5d95f4a4f265da5b8f10714b</a><br><a href="https://www.jianshu.com/p/7e9ca2c73c97" target="_blank" rel="noopener">https://www.jianshu.com/p/7e9ca2c73c97</a><br><a href="https://juejin.im/post/5d837cd1e51d4561cb5ddf66#heading-26" target="_blank" rel="noopener">https://juejin.im/post/5d837cd1e51d4561cb5ddf66#heading-26</a><br><a href="https://juejin.im/post/5d4bdb23e51d453c2577b747" target="_blank" rel="noopener">https://juejin.im/post/5d4bdb23e51d453c2577b747</a></p>
<ul>
<li>UI优化</li>
<li>启动优化</li>
<li>内存优化</li>
<li>包体积优化</li>
<li>线程优化</li>
<li>内存优化</li>
</ul>
<h3 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h3><ul>
<li><a href="http://blog.scions.cn/2019/06/04/setContentView%E4%B8%8ELayoutInflater%E5%8A%A0%E8%BD%BD%E8%A7%A3%E6%9E%90%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">setContentView与LayoutInflater加载解析机制源码分析</a></li>
<li><a href="done...">AsyncLayoutInflator原理</a></li>
<li><a href="done...">抽象布局的使用</a></li>
<li><a href="done........">动画原理分析</a></li>
<li><a href="done......">View的绘制流程</a></li>
<li><a href="done...">Fragment懒加载</a></li>
<li><a href="progressing....">UI优化常用工具</a></li>
<li><a href="progressing...">ANR原理分析与解决</a></li>
<li><a href="progressing...">ReclerView与ListView的区别</a></li>
<li>ViewPager &amp; ViewPager2源码分析</li>
<li>[TextView优化](<a href="https://www.jianshu.com/p/9f7f9213bff8?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">https://www.jianshu.com/p/9f7f9213bff8?from=timeline&amp;isappinstalled=0</a>   不着急)</li>
<li>[X2C框架原理分析](<a href="https://github.com/iReaderAndroid/X2C" target="_blank" rel="noopener">https://github.com/iReaderAndroid/X2C</a> 不着急. 原理是new 替代 反射)</li>
</ul>
<h3 id="启动优化"><a href="#启动优化" class="headerlink" title="启动优化"></a>启动优化</h3><ul>
<li><a href="progressing...">App启动过程和Activity启动过程</a></li>
<li><a href="done...">Activity栈和LaunchMode</a></li>
<li><a href="progressing...">SharedPreferene原理</a></li>
<li><a href="done...">EventBus2 &amp; EventBus3对比</a></li>
</ul>
<h3 id="包体积优化"><a href="#包体积优化" class="headerlink" title="包体积优化"></a>包体积优化</h3><ul>
<li><a href="done...">Reduce your app size</a></li>
<li><a href="done...">Configure your build-Overview</a></li>
<li><a href="done...">Shrink, obfuscate, and optimize your app</a></li>
<li>Redex的使用</li>
<li>Lint的使用</li>
</ul>
<h3 id="线程优化"><a href="#线程优化" class="headerlink" title="线程优化"></a>线程优化</h3><ul>
<li><a href="done...">Handler原理</a></li>
<li><a href="done...">IdleHandler的使用</a></li>
<li><a href="done...">AsyncTask原理</a></li>
<li><a href="done...">HandlerThread原理</a></li>
<li><a href="done...">IntentService的使用和原理</a></li>
<li><a href="progressing...">Android中startService和bindService的区别</a></li>
<li><a href="progressing...">线程池相关</a></li>
</ul>
<h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><ul>
<li><a href="done...">对象池的使用</a></li>
<li><a href="done...">Loading Large Bitmaps Efficiently</a></li>
<li><a href="done...">Caching Bitmaps</a></li>
<li><a href="progressing...">Managing Bitmap Memory</a></li>
<li><a href="progressing...">Android常见内存泄漏</a></li>
<li><a href="progressing...">图片的内存计算</a></li>
<li><a href="progressing...">LruCache原理</a></li>
<li><a href="progressing...">LeakCanary源码分析</a></li>
<li><a href="done...">BlockCanary源码分析</a></li>
<li>Java GC内存回收机制</li>
<li>开源图片加载库源码分析</li>
<li>内存分析工具的使用, MAT, TraceView, SystemTrace, HeapViewer, Heap SnapShot</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidOptimization</tag>
      </tags>
  </entry>
</search>
